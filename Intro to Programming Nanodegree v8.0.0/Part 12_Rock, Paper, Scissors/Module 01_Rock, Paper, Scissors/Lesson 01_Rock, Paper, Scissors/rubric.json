{
  "id": 1956,
  "project_id": 493,
  "upload_types": [
    "file",
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(css|docx|gradle|htm|html|java|js|markdown|md|pdf|py|rmd|rst|sql|swift|txt|xml|yaml|yml)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "* Adapting the game to play **Rock Paper Scissors Spock Lizard** or another expanded version of the game.\n* Running a **tournament** of many computer players, with different strategies, and discovering which strategies win the most!\n* Adding **color** or other features to the game display. (Look up \"terminal color codes\" in your favorite search engine.)",
  "hide_criteria": false,
  "created_at": "2018-05-31T19:38:23.978Z",
  "updated_at": "2020-04-16T21:49:18.868Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "checkmate_enabled": false,
  "checkmate_metadata": null,
  "available_for_cert_project": false,
  "classroom_node_id": 633744,
  "classroom_project_key": "b9a18fa0-2132-41e3-bbaa-e1950615b28b",
  "language": "en-us",
  "ndkeys": [
    "nd000-ent",
    "nd051-br",
    "nd000-cn-basic",
    "nd000-connect",
    "nd000-alisports",
    "nd000-br",
    "nd000",
    "nd000beta"
  ],
  "coursekeys": [],
  "sections": [
    {
      "id": 4116,
      "name": "Gameplay",
      "created_at": "2018-06-15T17:03:37.382Z",
      "updated_at": "2018-06-15T17:03:48.142Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 1956,
      "rubric_items": [
        {
          "id": 12015,
          "section_id": 4116,
          "passed_description": "Paper beats rock; rock beats scissors; scissors beat paper.",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:04:28.567Z",
          "updated_at": "2018-11-05T23:36:38.842Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The program plays a game of Rock Paper Scissors, following the conventional rules.",
          "exceedable": false
        },
        {
          "id": 12016,
          "section_id": 4116,
          "passed_description": "The game displays the results after each round, including each player's score. At the end, the final score is displayed.\n\nThe number of rounds per game, as well as when to stop, are up to you!",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:04:38.793Z",
          "updated_at": "2018-07-03T20:12:08.445Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The program plays a match consisting of multiple rounds, and tracks players' total score.",
          "exceedable": false
        },
        {
          "id": 12017,
          "section_id": 4116,
          "passed_description": "The game should have (at least) four computer player strategies:\n\n* A player that always plays 'rock'\n* A player that chooses its moves randomly.\n* A player that remembers and imitates what the human player did in the previous round.\n* A player that cycles through the three moves\n",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:10:01.370Z",
          "updated_at": "2018-08-20T17:54:07.551Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "There are at least *four* different computer player classes, each implementing a different strategy.",
          "exceedable": false
        },
        {
          "id": 12018,
          "section_id": 4116,
          "passed_description": "The game should call each player's move method once in each round, to get that player's move. After each round, it should call the remembering method to tell each player what the other player's move was.\n\nSome computer players don't need to remember anything, so their remembering method should do nothing.\n",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:12:22.437Z",
          "updated_at": "2018-07-03T20:12:08.464Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "Each player class has a method that returns that player's move, and a method for remembering information about the round.",
          "exceedable": false
        }
      ]
    },
    {
      "id": 4117,
      "name": "Object-Oriented Programming",
      "created_at": "2018-06-15T17:03:48.256Z",
      "updated_at": "2018-06-15T17:04:02.166Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 1956,
      "rubric_items": [
        {
          "id": 12019,
          "section_id": 4117,
          "passed_description": "The `Game` class should include a method to play a single round, and a method to play a match of several rounds. \n\nFacts about the current match, such as the players' score, or the number of rounds played, should be stored as instance variables. They shouldn't be stored as global variables.\n\nIt's okay to use global variables for the game moves \"rock\", \"paper\", and \"scissors\".",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:13:03.146Z",
          "updated_at": "2018-07-03T20:12:08.469Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The code uses classes and objects to store game data, rather than global variables.",
          "exceedable": false
        },
        {
          "id": 12020,
          "section_id": 4117,
          "passed_description": "Each computer player strategy should be a subclass of the `Player` base class, as should the `Human` player. ",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:15:14.112Z",
          "updated_at": "2018-07-03T20:12:08.476Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The code uses subclasses appropriately.",
          "exceedable": false
        }
      ]
    },
    {
      "id": 4118,
      "name": "Code Style",
      "created_at": "2018-06-15T17:04:02.291Z",
      "updated_at": "2018-06-15T17:05:38.579Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 1956,
      "rubric_items": [
        {
          "id": 12021,
          "section_id": 4118,
          "passed_description": "The `pycodestyle` tool should report zero errors and zero warnings.\n\nIf the program is called `rps.py`, the command to test it is `pycodestyle rps.py`.",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:15:39.623Z",
          "updated_at": "2018-07-03T20:12:08.482Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The code style follows the standard Python style guide.",
          "exceedable": false
        },
        {
          "id": 12022,
          "section_id": 4118,
          "passed_description": "The code should be thoroughly tested.\n\nInvalid moves should not make the program crash. _(See the next item!)_",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:16:14.160Z",
          "updated_at": "2018-06-25T17:21:43.573Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The program does not crash or display any error messages.",
          "exceedable": false
        },
        {
          "id": 12023,
          "section_id": 4118,
          "passed_description": "If the player enters a move that is not valid, the game should give them the chance to retry that move until they enter a valid move.\n\nThe game should not crash, and it should not treat invalid input as a valid move.\n\n**Example:**\nIf the player enters \"roxk\" instead of \"rock\", the game should let them try again; it should not crash, and it should not assume they meant \"rock\".\n",
          "exceeded_description": null,
          "created_at": "2018-06-15T17:17:54.042Z",
          "updated_at": "2018-06-25T17:21:43.578Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "The program checks the validity of user input.",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 493,
    "name": "Rock Paper Scissors",
    "nanodegree_key": "nd000",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": 1144,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 12,
    "created_at": "2018-06-19T20:02:38.634Z",
    "updated_at": "2020-06-11T08:08:03.761Z",
    "price": "5.0",
    "ungradeable_price": "3.0",
    "audit_price": "0.0"
  }
}