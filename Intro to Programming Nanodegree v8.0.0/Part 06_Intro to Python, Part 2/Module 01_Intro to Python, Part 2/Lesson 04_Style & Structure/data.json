{
  "data": {
    "lesson": {
      "id": 817319,
      "key": "416eb942-71fe-446d-9887-b79952e0c6ac",
      "title": "Style & Structure",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Get practice writing longer programs, and improving their structure and style.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/416eb942-71fe-446d-9887-b79952e0c6ac/817319/1549164335451/Style+%26+Structure+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/416eb942-71fe-446d-9887-b79952e0c6ac/817319/1549164331966/Style+%26+Structure+Subtitles.zip"
          },
          {
            "name": "Ipnd-Reference-Sheet-Elevator-Code",
            "uri": "https://video.udacity-data.com/topher/2019/March/5c9162d8_ipnd-reference-sheet-elevator-code/ipnd-reference-sheet-elevator-code.pdf"
          },
          {
            "name": "Ipnd-Reference-Sheet-Breakfast-Bot-Code",
            "uri": "https://video.udacity-data.com/topher/2019/March/5c9162e9_ipnd-reference-sheet-breakfast-bot-code/ipnd-reference-sheet-breakfast-bot-code.pdf"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 801124,
          "key": "da7fdf56-e910-46b1-b708-2225d6fcdce1",
          "title": "Welcome!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "da7fdf56-e910-46b1-b708-2225d6fcdce1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801516,
              "key": "5d7b411c-3105-45ad-a336-0f1785bfd77f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome!\n\nBy now, you've learned how to use a bunch of different tools—like variables, functions, strings, lists, and loops, just to name a few.\n\nAt this stage you're likely to start running into a new challenge. Although you know how to use each of these tools individually, it can be difficult to put them together to create longer, more complex programs.\n\nFor example, although you may know how to write a function, it can be hard to know *when* to write one, or how to combine multiple functions to produce a well-structured program.\n\nIn this lesson, we'll work on some slightly longer programs, and we'll spend some times considering how we can best structure and style our code.",
              "instructor_notes": ""
            },
            {
              "id": 801517,
              "key": "72183a1a-a779-476a-806a-87eda9a24371",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The goal\n\nWe'll spend this whole lesson just building a few programs, so that we can really spend time working on each of them, understanding them, and refining them.\n\nFor each program, we'll first show you what the finished program should look like—and then you'll get some practice trying to replicate it for yourself.\n\nAll of the programs are centered around:\n1. Getting some text input from the user\n2. Having something different happen depending on what the user types\n\nBy the end of the lesson, you'll have the skills you need to build the exercise that immediately follows—a simple version of an old-fashioned, text-based adventure game.\n\nYou can interact with an example in the workspace below. Just run `python3 adventure_game.py`.",
              "instructor_notes": ""
            },
            {
              "id": 801519,
              "key": "0d1d08c1-2cde-44aa-b22a-380aeb2fc8b9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c796969xREPLbmrg5qfu",
              "pool_id": "webterminal",
              "view_id": "repl-8bvgw",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "bash",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 806301,
              "key": "eb02053b-6071-48fa-bf17-03fc0d7d8cbd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As we go through this lesson, we'll go over many of the tools that you'll need to build this—so keep it in mind as you work on the coming exercises.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671545,
          "key": "af53ba9d-4a0b-49f3-b5ad-66268fbb29e0",
          "title": "Pycodestyle",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "af53ba9d-4a0b-49f3-b5ad-66268fbb29e0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Spin",
                "uri": "https://video.udacity-data.com/topher/2018/July/5b3e793b_spin/spin.py"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 673794,
              "key": "640dddc0-664d-4848-b2b7-8d95db1da48d",
              "title": "Python: Pycodestyle",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LZnjWP9EF6w",
                "china_cdn_id": "LZnjWP9EF6w.mp4"
              }
            },
            {
              "id": 787517,
              "key": "e98e2c70-e4d2-469a-b602-5594914856e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The `pycodestyle` tool helps you write Python code that will be easier to read for other Python programmers — including your project reviewers. It checks your code using many of the rules from the [Python style guide](https://www.python.org/dev/peps/pep-0008/).",
              "instructor_notes": ""
            },
            {
              "id": 671547,
              "key": "9c4a82ac-99d1-4249-a934-75fd30968ebe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Install `pycodestyle` using the `pip` or `pip3` command in the shell, in your terminal:\n\n```python\n# If your Python is called \"python\"\n$ pip install pycodestyle\n```\n```python\n# if your Python is called \"python3\"\n$ pip3 install pycodestyle\n```\n\nTry running `pycodestyle` on some of your existing Python source code files, and look into what sorts of messages it displays. Here's a real example, pasted in fresh from my terminal:\n\n```text\n$ ls\nspin.py\n$ cat spin.py\nimport time\n\n\ndef spin():\n    for _ in range( 100 ):\n        for ch in '-\\\\|/':\n            print(ch, end='', flush=True)\n            time.sleep(0.1)\n            print('\\b', end='', flush=True)\n\n\nif __name__ == '__main__':\n  spin()\n\n$ pycodestyle spin.py\nspin.py:5:20: E201 whitespace after '('\nspin.py:5:24: E202 whitespace before ')'\nspin.py:13:3: E111 indentation is not a multiple of four\nspin.py:14:1: W391 blank line at end of file\n```",
              "instructor_notes": ""
            },
            {
              "id": 671549,
              "key": "886295f8-bda5-4e70-995e-eaa954f971c0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "886295f8-bda5-4e70-995e-eaa954f971c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the above output from `pycodestyle`, which line has an indentation problem?",
                "answers": [
                  {
                    "id": "a1530820608533",
                    "text": "Line 5, `    for _ in range( 100 ):`",
                    "is_correct": false
                  },
                  {
                    "id": "a1530820643521",
                    "text": "Line 13, `  spin()`",
                    "is_correct": true
                  },
                  {
                    "id": "a1530820646628",
                    "text": "Line 14, which is an empty line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1530820650726",
                    "text": "There is no indentation problem.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 671551,
              "key": "4d7e23f7-61cd-4d91-b5fc-d367b56f89a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can download the [spin.py code here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/July/5b3e793b_spin/spin.py). Try running `pycodestyle` on it, on your own computer. You should see the same error messages that are displayed above. Try editing the code so that `pycodestyle` no longer gives any error messages.\n\nLater in the course, you'll submit a project to demonstrate your new Python coding skills—and when you do, one of the things you'll demonstrate is your ability to write code that follows style guidelines. You'll need to test your code using `pycodestyle` and correct any style errors it finds. You can start practicing this now, so you will be very used to it by the time you get to that project!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 805893,
          "key": "5de50003-959b-4920-afca-0cf752b319ad",
          "title": "Multi-line strings (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5de50003-959b-4920-afca-0cf752b319ad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 805894,
              "key": "2b18eb71-a385-4112-8d38-34ba0233d6ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Multi-line strings (1/2)",
              "instructor_notes": ""
            },
            {
              "id": 806267,
              "key": "7b8b682d-e91e-4704-ba3c-a086e8c68e8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Sometimes we end up wanting to use very long strings, and this can cause some problems.\n\nFor example, suppose we have this code:\n\n```python\nstory =  \"Once upon a time there was a very long string that was over 100 characters long and could not all fit on the screen at once.\"\nprint(story)\n```\n\nIf you run `pycodestyle` on this, you'll get the following message:\n\n```text\nsome_script.py:1:80: E501 line too long (134 > 79 characters)\n```\n\nThis `line too long` message is telling us that the line should be **79** characters or less in length, but that it is actually **134** characters.\n\n## Why is that a problem?\n\nIn some cases, long lines work just fine. If you have a very large monitor and are looking at your code fullscreen, even a line that is 100 or 200 characters long may fit on the screen.\n\nBut more often, long lines cause problems. You may be working on a small screen, or want to have your code editor take up only half the screen (so that, say, you can have your terminal running in the other half).\n\nFor such reasons, the Python style guide recommends keeping all lines of code to a maximum of 79 characters in length—or even 72 characters, in some cases.\n\nIf you're curious, you can read more in [the style guide section on maximum line length](https://www.python.org/dev/peps/pep-0008/#maximum-line-length).\n\nThe example string above is well over the recommended 72-79 characters. So to make the code more readable, we need a way of splitting it to multiple lines.\n\nLet's play around and see what we can do.",
              "instructor_notes": ""
            },
            {
              "id": 806269,
              "key": "1b82bdfd-bf7f-47c0-a9bb-99e13881821d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1b82bdfd-bf7f-47c0-a9bb-99e13881821d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's one way we might want to do it:\n\n```python\nstory =  \"Once upon a time there was a very long string that was \n          over 100 characters long and could not all fit on the \n          screen at once.\"\nprint(story)\n```\n\nGive this code a try in the terminal below (or in the code editor on your own computer).\n\nWhat happens when you run it?",
                "answers": [
                  {
                    "id": "a1546740655001",
                    "text": "It prints the string perfectly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546741801070",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words",
                    "is_correct": false
                  },
                  {
                    "id": "a1546741838896",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546744514061",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806268,
              "key": "39437bc3-376d-4a19-b75c-c6f156b063fb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c805893xGENERIC8643zr4g",
              "pool_id": "webterminal",
              "view_id": "generic-2ooec",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/strings.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 806270,
              "key": "a2d6065d-4ed3-4488-943d-9839ac5023b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**EOL** stands for **End Of Line**. And a key thing to understand is that this is actually a character in your code editor—it's just an invisible one. In some code editors, there's an option to make these visible. For example, here they are in the Atom editor:",
              "instructor_notes": ""
            },
            {
              "id": 806271,
              "key": "48a49e67-034c-4d63-b7ef-50e8b2d566de",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c316f35_eol-characters/eol-characters.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/48a49e67-034c-4d63-b7ef-50e8b2d566de",
              "caption": "",
              "alt": "Block of code showing end-of-line arrow characters.",
              "width": 711,
              "height": 86,
              "instructor_notes": null
            },
            {
              "id": 806272,
              "key": "52ea8cff-ed2f-46d9-9472-91077d79f508",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "See those symbols at the end of each line? Those are the end-of-line characters, which get inserted each time you hit the *Enter* (a.k.a. *Return*) key. When Python encounters one of those, it understands it has hit the end of a line, and it expects our string to be closed before that point!\n\nSo how can we split a string across multiple lines if those EOL characters are in there?",
              "instructor_notes": ""
            },
            {
              "id": 806273,
              "key": "d2d6cb46-e2d9-44a2-a262-09f7364b84a1",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d2d6cb46-e2d9-44a2-a262-09f7364b84a1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Give this variation a try:\n\n```python\nstory =  \"Once upon a time there was a very long string that was \\\n          over 100 characters long and could not all fit on the \\\n          screen at once.\"\nprint(story)\n```\nWhat happens?\n",
                "answers": [
                  {
                    "id": "a1546743799321",
                    "text": "It prints the string perfectly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546743828486",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546743879749",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744492933",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806274,
              "key": "16dc64c0-5632-4676-8636-732bcff6813e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you recall, the backslash `\\` is an *escape character*. It tells Python that whatever character comes immediately after should be treated differently in some way. In this case, it causes Python to ignore the EOL characters. Great!\n\n... except that then we have another problem. Python treats all three lines as if they were one long line—including the indentation! It treats the spaces at the beginning of the second and third lines as if they were part of the string. That's not what we want.\n\nOne option would be to simply remove the indentation:\n\n```python\nstory =  \"Once upon a time there was a very long string that was \\\nover 100 characters long and could not all fit on the \\\nscreen at once.\"\nprint(story)\n```\n\nThis would work, but it makes the code harder to read. We need a better solution.",
              "instructor_notes": ""
            },
            {
              "id": 806275,
              "key": "0797bb49-0278-4d67-b11a-944ceb964d70",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0797bb49-0278-4d67-b11a-944ceb964d70",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Instead of the escape character, how about if we use triple quotes?\n\n```python\nstory =  \"\"\"Once upon a time there was a very long string that was\n            over 100 characters long and could not all fit on the \n            screen at once.\"\"\"\nprint(story)\n```",
                "answers": [
                  {
                    "id": "a1546744213260",
                    "text": "It prints the string perfectly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744303042",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546744304514",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744521597",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806276,
              "key": "ebe90d93-19d2-400e-a5cc-955531f96d7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Seems like triple quotes are a good alternative to the escape character in the sense that they also cause Python to ignore the EOL characters.\n\nBut they have the same issue  with including the indentation in the string.",
              "instructor_notes": ""
            },
            {
              "id": 806277,
              "key": "345fa7be-9c01-4a42-a3ff-7339b181ef9b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "345fa7be-9c01-4a42-a3ff-7339b181ef9b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What if we try using multiple strings, and using the `+` operator to concatenate them? Like this:'\n\n```python\nstory =  \"Once upon a time there was a very long string that was \" +\n         \"over 100 characters long and could not all fit on the \" +\n         \"screen at once.\"\nprint(story)\n```\nWhat happens?",
                "answers": [
                  {
                    "id": "a1546744376526",
                    "text": "It prints the string perfectly.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744527117",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744527645",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546744527973",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 806278,
              "key": "aff02fb8-b2d0-4c19-a9c9-f30be0b3f0be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The trouble is with those EOL characters again! Python thinks we are trying to concatenate a string with the end of the line—which doesn't really make much sense.",
              "instructor_notes": ""
            },
            {
              "id": 806279,
              "key": "a074c905-d86b-42ff-a9d7-8be0cfb80ce5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a074c905-d86b-42ff-a9d7-8be0cfb80ce5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What if we try both concatenation *and* the escape character?\n\n```python\nstory =  \"Once upon a time there was a very long string that was \" + \\\n         \"over 100 characters long and could not all fit on the \" + \\\n         \"screen at once.\"\nprint(story)\n```\n\nTry it. What result do you get?",
                "answers": [
                  {
                    "id": "a1546745835922",
                    "text": "It prints the string perfectly.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546745875015",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546745881719",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546745882191",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806280,
              "key": "a4975c45-03c0-4741-802d-4fbf695ab18c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The escape character takes care of the issue with the EOL character, and because we're treating these as separate strings, the indentation does not get included as whitespace in the string. Great!\n\nStill, it is kind of a pain having to type `+ \\` at the end of every line—and it makes our code look a bit messy. It's not too bad, but maybe we could do better.",
              "instructor_notes": ""
            },
            {
              "id": 806281,
              "key": "43313d43-d579-4e21-a4e7-600b9f8e19e3",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "43313d43-d579-4e21-a4e7-600b9f8e19e3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's something rather different:\n```python\nstory =  (\"Once upon a time there was a very long string that was \"\n          \"over 100 characters long and could not all fit on the \"\n          \"screen at once.\")\nprint(story)\n```\nGive this a try. What do you get?",
                "answers": [
                  {
                    "id": "a1546746120382",
                    "text": "It prints the string perfectly.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546746154410",
                    "text": "It prints the string, but there are a bunch of extra spaces between some of the words.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546746154963",
                    "text": "It throws the error `EOL while scanning string literal`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546746155410",
                    "text": "It throws the error `Invalid syntax`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806282,
              "key": "1d827c7e-7a20-42f6-a38e-bb574aaae732",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This should be a bit surprising. Why would this work?\n\nThe reason is a combination of two lesser-known Python features:  **Implicit line-joining** and **automatic string-literal concatenation**. We'll explain both of these on the next page.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 806285,
          "key": "26decfc9-d5bc-4f0c-95e2-c0708fcaf260",
          "title": "Multi-line strings (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "26decfc9-d5bc-4f0c-95e2-c0708fcaf260",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806286,
              "key": "19fad984-1fd2-4a16-afd2-9d5d0155a5a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Multi-line strings (2/2)\nWhen we have separate lines of code in our code editor, Python treats them as exactly that—as separate lines of code.\n\nAs we saw, it knows to do this because of the EOL character. In other words, when Python hits an EOL, it knows that the one line has ended and the next is about to begin.\n\n## Explicit line-joining\n\nBut we also saw we can get around that. One way to do it was using the escape character:\n\n```python\nstory =  \"Once upon a time there was a very long string that was \\\n          over 100 characters long and could not all fit on the \\\n          screen at once.\"\nprint(story)\n```\n\nThis is called [explicit line joining](https://docs.python.org/3.7/reference/lexical_analysis.html#explicit-line-joining).\n\n## Implicit line-joining\n\nThere's also another type of line-joining that doesn't require the backslash. In Python, any expressions inside parentheses `( )` ,  square brackets `[ ]`, or curly braces `{ }` can be split over more than one line. For example, if we have a long list, we can do this:\n\n```python\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n           29, 30, 31, 32, 33, 34, 35, 36, 38, 29, 40, 41, 42]\n```\n\nThere's no problem here; despite the EOL characters at the end of each line, Python will essentially treat these three lines the same as if they were a single line.\n\nThis is called [implicit line joining](https://docs.python.org/3.7/reference/lexical_analysis.html#implicit-line-joining).\n\nNow, if we go back to our very long string, this helps explain why the parentheses help solve our problem:\n\n```python\nstory =  (\"Once upon a time there was a very long string that was \"\n          \"over 100 characters long and could not all fit on the \"\n          \"screen at once.\")\n```\n\nBecause of implicit line joining, this is basically the same as:\n\n```python\nstory =  \"Once upon a time there was a very long string that was \" \"over 100 characters long and could not all fit on the \" \"screen at once.\"\n```",
              "instructor_notes": ""
            },
            {
              "id": 806287,
              "key": "a2f8d45f-ca1a-4213-a493-0966cdc8064d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Automatic string literal concatenation\n\nThe final piece of the puzzle here is that Python automatically [concatenates any adjacent string literals](https://docs.python.org/3.7/reference/lexical_analysis.html#string-literal-concatenation), even if the concatenation operator `+` isn't there.\n\nYou can try this for yourself in the interactive interpreter. For example, we can do this:\n\n```text\n>>> \"foo\" + \"bar\"\n'foobar'\n```\nThat is what we expect. But we can also leave the `+` out, and it will have the exact same results:\n\n```text\n>>> \"foo\" \"bar\"\n'foobar'\n```\n\nSo in combination, we can use these two features to handle multi-line strings while still formatting everything nicely.\n\n```python\nstory =  (\"Once upon a time there was a very long string that was \"\n          \"over 100 characters long and could not all fit on the \"\n          \"screen at once.\")\n```\n\nThis also works if the string is inside a function call—for example, if we wanted to directly print the above string, we could do that the same way:\n\n```python\nprint(\"Once upon a time there was a very long string that was \"\n      \"over 100 characters long and could not all fit on the \"\n      \"screen at once.\")\n```\nAgain, this works because Python does implicit line continuation with anything inside parentheses, brackets, or braces.",
              "instructor_notes": ""
            },
            {
              "id": 806291,
              "key": "b7ceb3e4-291f-457e-a5d7-54702c631b70",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Going forward, we'll sometimes need to be printing a lot of very long strings—so this will be our go-to way of handling that.\n\nThis may all seem a bit odd, and we'd agree—it *is* a little weird to have to give so much thought to something as simple as how to get a sentence split across multiple lines. But it'll be important if we want to keep our code from getting horribly messy and impossible to read!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801125,
          "key": "433bedb7-c413-4935-bd7c-fefe64e52d0e",
          "title": "Breakfast bot — Specifications",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "433bedb7-c413-4935-bd7c-fefe64e52d0e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801128,
              "key": "5e69bf9d-d72c-4ced-9f41-2fd9a2900cc6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Specifications",
              "instructor_notes": ""
            },
            {
              "id": 801129,
              "key": "261f61f7-fb51-4fd0-afcf-f7d594e538d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Over the next several pages, our goal will be to create a simple program for ordering breakfast. In the workspace below, you can interact with the finished program to see how it works. To run the program, enter `python3 order_breakfast.py` into the terminal.",
              "instructor_notes": ""
            },
            {
              "id": 801130,
              "key": "b4b4df7f-afae-4368-b18d-d0830576025d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801125xREPL4wi67ey3",
              "pool_id": "webterminal",
              "view_id": "repl-g0j12",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "bash",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801131,
              "key": "2e70ff5e-e4a0-4cfe-ac05-70c66454d70b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When you're posed with a problem or coding challenge, it's tempting to jump right in and starting writing code immediately. But it's important to first get a clear idea of what it is you're trying to build.",
              "instructor_notes": ""
            },
            {
              "id": 801132,
              "key": "55f5e82c-b214-40ef-8f4b-6b4316213530",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "55f5e82c-b214-40ef-8f4b-6b4316213530",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the example program above, messages are printed to the terminal for the user to see.\n\nNotice that it pauses for a couple of seconds between each message. Is this how the `print` function normally behaves?",
                "answers": [
                  {
                    "id": "a1545607235043",
                    "text": "Yes—there is always a 2-second delay between messages when  we use the `print` function.",
                    "is_correct": false
                  },
                  {
                    "id": "a1545607360485",
                    "text": "No—usually the `print` function outputs the messages so fast you can't even see any delay at all.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 801133,
              "key": "480728be-11d6-45bc-a4e1-95fcb6014b3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so that's definitely a feature we should take note of! We will need to be sure to include that in our code.",
              "instructor_notes": ""
            },
            {
              "id": 801134,
              "key": "55bb40f5-a2cc-43cd-9c3d-b2c38d4285c9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "55bb40f5-a2cc-43cd-9c3d-b2c38d4285c9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The bot seems to only have two things available for breakfast: `waffles` and `pancakes`.\n\nWhat happens if you enter some other input, like `crepes`  or `blargh!!!`?",
                "answers": [
                  {
                    "id": "a1545607824387",
                    "text": "The program crashes with a `TypeError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545607932507",
                    "text": "The program exits (but does not display any errors).",
                    "is_correct": false
                  },
                  {
                    "id": "a1545607958896",
                    "text": "The program politely informs you that it does not understand the input.",
                    "is_correct": true
                  },
                  {
                    "id": "a1545608511053",
                    "text": "The program responds with `Pancakes it is!`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801135,
              "key": "8fbdb996-be54-4980-9bdb-2463e31aab04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Interesting! When we write our version of the program, we should make sure it has a way to handle bad input like this.",
              "instructor_notes": ""
            },
            {
              "id": 801136,
              "key": "d49bc1fa-64e2-4f22-8b16-fab7272447de",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d49bc1fa-64e2-4f22-8b16-fab7272447de",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OK, so the bot can understand `pancakes`. But what if you give it this response:\n\n`I totally want pAnCAkES!!!`",
                "answers": [
                  {
                    "id": "a1545608342305",
                    "text": "The program crashes with a `TypeError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545608450571",
                    "text": "The program exits (but does not display any errors).",
                    "is_correct": false
                  },
                  {
                    "id": "a1545608456665",
                    "text": "The program politely informs you that your choice isn't on the menu.",
                    "is_correct": false
                  },
                  {
                    "id": "a1545608478829",
                    "text": "The program responds with `Pancakes it is!`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 801137,
              "key": "b254a8b9-f7ab-4067-9c4b-cf59f99c7ab4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Looks like another feature we need to include!",
              "instructor_notes": ""
            },
            {
              "id": 801138,
              "key": "4949b302-26b9-48b6-aef3-c380322d2cd6",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4949b302-26b9-48b6-aef3-c380322d2cd6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Finally, what happens after you order?",
                "answers": [
                  {
                    "id": "a1545608735140",
                    "text": "The program immediately exits and returns you to the BASH prompt.",
                    "is_correct": false
                  },
                  {
                    "id": "a1545608760892",
                    "text": "The program asks if you would like to order again.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 805705,
              "key": "c3bc352f-745b-46a5-baf3-24dc4e50ea5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so if we want to build this program, here are some of the things we will need to be sure it does:\n* Get input and use it to determine what happens next\n* Handle bad input without crashing\n* Be flexible with the input the user can enter\n* Print messages to the console, with a short pause after each one\n* Allow the player to order again if they like\n",
              "instructor_notes": ""
            },
            {
              "id": 801139,
              "key": "b5ecd8bc-7188-4a7a-8dd5-a567e3048557",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we have a better idea of the specifications for the program, we can start putting it together.",
              "instructor_notes": ""
            },
            {
              "id": 805712,
              "key": "510e1bdb-774d-4dae-aa4b-945ac437a805",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## All the code!\n\nThis lesson is going to involve quite a bit of code. We'll provide solutions after each exercise as usual, but we've also provided the full (completed) code for the two main programs we'll be building as downloadable PDFs, so you can have them at hand whenever needed. To download them, simply go to the **Resources** section of the left-hand menu. You may even find it useful to print them out and write notes on them!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801140,
          "key": "77c43e21-0003-43a3-a3de-f6fd031be69e",
          "title": "Breakfast bot — Input and conditionals",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "77c43e21-0003-43a3-a3de-f6fd031be69e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801141,
              "key": "46bdd922-6c82-4928-a07d-7c6a324e0256",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Input and conditionals",
              "instructor_notes": ""
            },
            {
              "id": 805706,
              "key": "bb7403d9-f673-49e4-987d-3c5cde655395",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Alright, let's get started with the first thing on our list!\n\n* **Get input and use it to determine what happens next**\n* Handle bad input without crashing\n* Be flexible with the input the user can enter\n* Print messages to the console, with a short pause after each one\n* Allow the player to order again if they like",
              "instructor_notes": ""
            },
            {
              "id": 801520,
              "key": "f8e83d59-d0b5-4f0c-bfc4-c73159820c21",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f8e83d59-d0b5-4f0c-bfc4-c73159820c21",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "We'll need to use the `input` function a lot in this lesson, so let's check that we have the correct syntax for it in mind.\n\nBelow are some attempts to get the user's name and then greet them, like this:\n```text\nWhat's your name?\nAbe\nHi Abe!\n```\n\nSome of these attempts work and some do not. Can you tell which are which?"
                },
                "concepts_label": "Attempt",
                "answers_label": "Does it work?",
                "concepts": [
                  {
                    "text": "```python\ninput(\"What's your name?\\n\")\nprint(\"Hello \" + input + \"!\")\n```",
                    "correct_answer": {
                      "id": "a1546035257577",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nname = input(\"What's your name?\\n\")\nprint(\"Hello \" + name + \"!\")\n```",
                    "correct_answer": {
                      "id": "a1546035472591",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nname = input(\"What's your name?\\n\")\nprint(f\"Hello {input}!\")\n```",
                    "correct_answer": {
                      "id": "a1546035509560",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nname = input(\"What's your name?\\n\")\nprint(f\"Hello {name}!\")\n```",
                    "correct_answer": {
                      "id": "a1546035662170",
                      "text": "Works"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546035509560",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1546035472591",
                    "text": "Works"
                  },
                  {
                    "id": "a1546035662170",
                    "text": "Works"
                  },
                  {
                    "id": "a1546035257577",
                    "text": "Doesn't work"
                  }
                ]
              }
            },
            {
              "id": 801522,
              "key": "cdf48d90-2b50-4352-883b-c13fc57c1bb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note the newline escape sequence, `\\n`, at the end of the `input` message. This causes the user's input prompt to go to the next line (which doesn't affect how the program runs, but it looks a bit nicer).\n\nIf we didn't add the `\\n`, this is what it would look like when the user responds:\n\n```text\nWhat's your name?Abe\n```",
              "instructor_notes": ""
            },
            {
              "id": 801521,
              "key": "38654e5e-e792-4969-842a-7f132a450ed4",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "38654e5e-e792-4969-842a-7f132a450ed4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some attempts to get this result:\n\n```text\nWhat's your favorite number?\n7\nMine too!\n```\n\nSome of the attempts work, so that when the user enters `7`, it prints out `Mine too!`. Others don't print anything in response to the user's input. Which are which?"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\nn = input(\"What's your favorite number?\\n\")\nif n == 7:\n    print(\"Mine too!\")\n```",
                    "correct_answer": {
                      "id": "a1546036096114",
                      "text": "Nothing"
                    }
                  },
                  {
                    "text": "```python\nn = input(\"What's your favorite number?\\n\")\nif n == '7':\n    print(\"Mine too!\")\n```",
                    "correct_answer": {
                      "id": "a1546036242644",
                      "text": "`Mine too!`"
                    }
                  },
                  {
                    "text": "```python\nn = input(\"What's your favorite number?\\n\")\nif int(n) == 7:\n    print(\"Mine too!\")\n```",
                    "correct_answer": {
                      "id": "a1546036286441",
                      "text": "`Mine too!`"
                    }
                  },
                  {
                    "text": "```python\nn = input(\"What's your favorite number?\\n\")\nif int(n) == '7':\n    print(\"Mine too!\")\n```",
                    "correct_answer": {
                      "id": "a1546036334755",
                      "text": "Nothing"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546036242644",
                    "text": "`Mine too!`"
                  },
                  {
                    "id": "a1546036096114",
                    "text": "Nothing"
                  },
                  {
                    "id": "a1546036334755",
                    "text": "Nothing"
                  },
                  {
                    "id": "a1546036286441",
                    "text": "`Mine too!`"
                  }
                ]
              }
            },
            {
              "id": 801523,
              "key": "d29b2d0a-9866-4365-8809-862fa52fc654",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It's important to remember that the `input` function always returns a string. If we're asking for a number and need the result as an integer, we can convert it using the `int` function. (And conversely, if we have a number that we need to manipulate as a string, we can convert it using the `str` function.)",
              "instructor_notes": ""
            },
            {
              "id": 801146,
              "key": "a0da3da5-51d1-407d-bc2f-3c7a076e914a",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a0da3da5-51d1-407d-bc2f-3c7a076e914a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Use the `input` function to get the user's choice.",
                "If the user chooses `waffles`, print `Waffles it is!`",
                "Otherwise, if the user chooses `pancakes`, print `Pancakes it is!`"
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "OK, let's get back to the *breakfast bot* program. At the core of the program, we can see that it:\n1. Gets input from the user\n2. Responds differently depending on what that input is\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nwaffles\nWaffles it is!\n```\n\nIn the workspace below, see if you can write code that replicates this behavior."
            },
            {
              "id": 801144,
              "key": "71cab1ac-a955-47a9-a371-e1b6f6690c41",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801140xGENERIC1j5jxkjl",
              "pool_id": "webterminal",
              "view_id": "generic-4lt5m",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801147,
              "key": "f9b75715-9290-4ea6-a716-c0c6357ef3e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nresponse = input(\"Please place your order. Would you like waffles or pancakes?\\n\")\nif response == \"waffles\":\n    print(\"Waffles it is!\")\nelif response == \"pancakes\":\n    print(\"Pancakes it is!\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 801148,
              "key": "9db9a34f-70ad-4a4e-9e04-5c9f568804cb",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9db9a34f-70ad-4a4e-9e04-5c9f568804cb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "With the program so far (as shown in the solution above), it works if the user gives this input:\n```text\nwaffles\n```\nBut what if they give this input (with a capital `W`)?\n```text\nWaffles\n```\n",
                "answers": [
                  {
                    "id": "a1545627418103",
                    "text": "It still prints the same message: `Waffles it is!`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545627827944",
                    "text": "It doesn't print anything (it just finishes running and exits back to the shell).",
                    "is_correct": true
                  },
                  {
                    "id": "a1545627836521",
                    "text": "It throws an error.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801149,
              "key": "8a463fae-d850-4209-a23c-b57570901a8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "That's not very desirable behavior. It would be better if the user could use whatever capitalization they like and still be understood.",
              "instructor_notes": ""
            },
            {
              "id": 801150,
              "key": "ca883de7-bd40-4c9a-a724-635f96aeebb2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `lower` to the rescue\n\nFortunately, Python has a handy string method we can use, called `lower`.\n\nWe can call it on a string, and it will return a copy of the string with all characters converted to lowercase. You can try it in the Python interpreter to see for yourself:\n\n```python\n>>> \"Hello World!\".lower()\n'hello world!'\n>>> message = \"ALL CAPS!!!\"\n>>> message.lower()\n'all caps!!!'\n```\n\nSee if you can figure out a way to use `lower` in the code so that the program will work the same way no matter how the user capitalizes their response.",
              "instructor_notes": ""
            },
            {
              "id": 801151,
              "key": "6489fc36-b6e7-4a7a-98aa-31409052a405",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6489fc36-b6e7-4a7a-98aa-31409052a405",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Take a shot at using the `lower` method to improve the program"
              ],
              "positive_feedback": "**good!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801152,
              "key": "529c4e25-34b3-46ab-9965-603e8bc43ef2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nresponse = input(\"Please place your order. Would you like waffles or pancakes?\\n\")\nif response.lower() == \"waffles\":\n    print(\"Waffles it is!\")\nelif response.lower() == \"pancakes\":\n    print(\"Pancakes it is!\")\n```\nThis solution requires that we use the method in two places. If we'd prefer, we can use it only once, directly on the *function call* for the `input` function, like this:\n\n```python\nresponse = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\nif response == \"waffles\":\n    print(\"Waffles it is!\")\nelif response == \"pancakes\":\n    print(\"Pancakes it is!\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801524,
          "key": "0524a914-6fc1-4da5-a2e0-ddbc9e76bc31",
          "title": "Breakfast bot — Getting valid input (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0524a914-6fc1-4da5-a2e0-ddbc9e76bc31",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801525,
              "key": "bb03c2d5-d332-4c91-9bcf-bbc3fa5eed09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Getting valid input (1/2)",
              "instructor_notes": ""
            },
            {
              "id": 805707,
              "key": "79274d0e-04af-4331-86e2-dab92a200829",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "What's next on our list?\n* Get input and use it to determine what happens next\n* **Handle bad input without crashing**\n* Be flexible with the input the user can enter\n* Print messages to the console, with a short pause after each one\n* Allow the player to order again if they like",
              "instructor_notes": ""
            },
            {
              "id": 801526,
              "key": "836ef2e1-75be-4916-9018-5cb1b10a8d38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Currently, if the user gives any input other than `'waffles'` or `'pancakes'`, our program has no conditions for handling this and it simply exits.\n\nOne thing we could do is add an `else` block to our code, like this:\n\n```python\nelse:\n    print(\"Sorry, I don't understand.\")\n```\n\nGive this a try in the workspace below, and see if it works.",
              "instructor_notes": ""
            },
            {
              "id": 801527,
              "key": "ee814758-f3b9-4cf5-9d92-463f8a0c6645",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We need a way of handling invalid input.\n\nOne thing we could do is add an `else` block to our code, like this:\n\n```python\nelse:\n    print(\"Sorry, I don't understand.\")\n```\n\nGive this a try in the workspace below, and see if it works.",
              "instructor_notes": ""
            },
            {
              "id": 801528,
              "key": "c59b44dd-2029-46ab-8401-290882a3bd9e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801524xGENERIC5tp9a4ke",
              "pool_id": "webterminal",
              "view_id": "generic-iw7s4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801530,
              "key": "e48acc13-26f5-4842-84c3-f5d938691f38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nresponse = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\nif response == \"waffles\":\n    print(\"Waffles it is!\")\nelif response == \"pancakes\":\n    print(\"Pancakes it is!\")\nelse:\n    print(\"Sorry, I don't understand.\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 801531,
              "key": "25591cc1-a8ca-4173-856c-4b54e4f59d34",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25591cc1-a8ca-4173-856c-4b54e4f59d34",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that you've added the `else` statement, what happens when the user enters invalid input?",
                "answers": [
                  {
                    "id": "a1546041824893",
                    "text": "It prints `\"Sorry, I don't understand.\"`, and then gives the user a chance to try again.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546041871746",
                    "text": "It prints `\"Sorry, I don't understand.\"`, and then immediately exits back to the shell.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 801142,
          "key": "99b74be1-e639-4556-a88b-d387b16c2862",
          "title": "Breakfast bot — Getting valid input (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "99b74be1-e639-4556-a88b-d387b16c2862",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801143,
              "key": "83ba47de-300e-4726-94d4-fa432d71b987",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Getting valid input (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 801153,
              "key": "caffd78c-8ad8-43b9-b4a8-a15fb4ec70e5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So the `else` statement helps by displaying a message to the user, but it doesn't fully solve the problem. It will print `Sorry, I don't understand.`, but then it will simply quit (because it has reached the end of the code).\n\nWhat we *want* is for the program to go back up and ask for the input again:\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nspam\nSorry, I don't understand\nPlease place your order. Would you like waffles or pancakes?\nscrambled eggs\nSorry, I don't understand\nPlease place your order. Would you like waffles or pancakes?\ngreen eggs and ham\nSorry, I don't understand\nPlease place your order. Would you like waffles or pancakes?\n```\n\n... and so on, for as long as the user continues to give invalid input.\n\nThis sounds like a job for a `while` loop.",
              "instructor_notes": ""
            },
            {
              "id": 801532,
              "key": "00717f2a-ba36-4445-8141-405ed104086f",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "00717f2a-ba36-4445-8141-405ed104086f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Let's refresh our basic syntax for `while` loops.\n\nHere are some different examples. Which of them are infinite loops (i.e., they run forever), and which will stop at some point?\n\n(Feel free to try them for yourself!)"
                },
                "concepts_label": "Loop",
                "answers_label": "Runs forever?",
                "concepts": [
                  {
                    "text": "```python\nn = 0\nwhile 10 > n:\n    print(\"Weeee!\")\n```",
                    "correct_answer": {
                      "id": "a1546044010827",
                      "text": "Runs forever"
                    }
                  },
                  {
                    "text": "```python\nn = 0\nwhile 10 > n:\n    print(\"Weeee!\")\n    n += 1\n```",
                    "correct_answer": {
                      "id": "a1546044227812",
                      "text": "Stops"
                    }
                  },
                  {
                    "text": "```python\nn = \"\"\nwhile n != \"foo\":\n    print(\"Weeee!\")\n    n = \"foo\"\n```",
                    "correct_answer": {
                      "id": "a1546044241633",
                      "text": "Stops"
                    }
                  },
                  {
                    "text": "```python\nn = \"\"\nwhile n != \"foo\":\n    print(\"Weeee!\")\n```",
                    "correct_answer": {
                      "id": "a1546044358876",
                      "text": "Runs forever"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546044227812",
                    "text": "Stops"
                  },
                  {
                    "id": "a1546044358876",
                    "text": "Runs forever"
                  },
                  {
                    "id": "a1546044010827",
                    "text": "Runs forever"
                  },
                  {
                    "id": "a1546044241633",
                    "text": "Stops"
                  }
                ]
              }
            },
            {
              "id": 801533,
              "key": "1f30ea6b-f745-45dc-bbde-332aaa1b1f6d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1f30ea6b-f745-45dc-bbde-332aaa1b1f6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some more. Again, do these run forever or stop at some point?"
                },
                "concepts_label": "Loop",
                "answers_label": "Run forever?",
                "concepts": [
                  {
                    "text": "```python\nwhile True:\n    print(\"Weeee!\")\n```",
                    "correct_answer": {
                      "id": "a1546044434089",
                      "text": "Runs forever"
                    }
                  },
                  {
                    "text": "```python\nwhile True:\n    print(\"Weeee!\")\n    break\n```",
                    "correct_answer": {
                      "id": "a1546044556267",
                      "text": "Stops"
                    }
                  },
                  {
                    "text": "```python\nwhile True:\n    name = \"Abe\"\n    if name == \"Abe\":\n        break\n```",
                    "correct_answer": {
                      "id": "a1546044578473",
                      "text": "Stops"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546044556267",
                    "text": "Stops"
                  },
                  {
                    "id": "a1546044434089",
                    "text": "Runs forever"
                  },
                  {
                    "id": "a1546044809932",
                    "text": "Runs forever"
                  },
                  {
                    "id": "a1546044578473",
                    "text": "Stops"
                  }
                ]
              }
            },
            {
              "id": 801193,
              "key": "027f1942-fded-4e70-b187-e6266a41f2f1",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "027f1942-fded-4e70-b187-e6266a41f2f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Use a `while` loop to achieve the results shown above."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "We need the code to loop, asking the user for input over and over, unless and until the user enters one of the answers we are looking for.\n\nSee if you can figure out a way to use a `while` loop  to achieve this goal.\n(There's definitely more than one way to get the desired results!)"
            },
            {
              "id": 801192,
              "key": "c87f42f9-e54d-4b01-be3a-fb21d0793802",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801142xGENERICc7okrxdl",
              "pool_id": "webterminal",
              "view_id": "generic-7fdvj",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801194,
              "key": "ca59981d-63ea-4db8-ac08-13c1fa369bcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way:\n\n```python\nwhile True:\n    response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n    if response == \"waffles\":\n        print(\"Waffles it is!\")\n        break\n    elif response == \"pancakes\":\n        print(\"Pancakes it is!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")\n```\n\nAnd here's another:\n\n```python\nresponse = \"\"\nwhile response != \"waffles\" and response != \"pancakes\":\n    response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n    if response == \"waffles\":\n        print(\"Waffles it is!\")\n    elif response == \"pancakes\":\n        print(\"Pancakes it is!\")\n    else:\n        print(\"Sorry, I don't understand.\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801195,
          "key": "1f6c2b24-3e97-44fb-8281-bcbe02f665a7",
          "title": "Breakfast bot — More flexible input",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f6c2b24-3e97-44fb-8281-bcbe02f665a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801196,
              "key": "e0963906-0d38-44a6-a046-83efe214ff49",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞",
              "instructor_notes": ""
            },
            {
              "id": 805708,
              "key": "4dd089cc-5a61-4c79-9b5a-90985b97cf98",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's the next thing we'll tackle:\n* Get input and use it to determine what happens next\n* Handle bad input without crashing\n* **Be flexible with the input the user can enter**\n* Print messages to the console, with a short pause after each one\n* Allow the player to order again if they like",
              "instructor_notes": ""
            },
            {
              "id": 801197,
              "key": "ae4f91fa-c8ce-4089-846b-28c1f609d1cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Suppose that instead of typing `waffles`, the user inputs something like, `I would like waffles, please!`\n\nWith our current code, this is what will happen:\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nI would like waffles, please!\nSorry, I don't understand.\nPlease place your order. Would you like waffles or pancakes?\n```\n\nThe trouble is that we are checking if the user's choice is *equal* to `\"waffles\"` or `\"pancakes\"`:\n\n```python\nif response == \"waffles\":\n    ...\nelif response == \"pancakes\":\n    ...\n```\n\nAn alternative would be to check if these strings are *anywhere in the user's response*—in other words, to see if these are *substrings* of their response. We can do this with the `in` operator.",
              "instructor_notes": ""
            },
            {
              "id": 801534,
              "key": "414f70fb-e3ca-4157-a248-69b28653023c",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "414f70fb-e3ca-4157-a248-69b28653023c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's a brief refresher on the `in` operator.\n\nWhat will each of these evaluate to?\n(Feel free to try them out in the Python interpreter on your computer.)"
                },
                "concepts_label": "Expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n'oo' in 'book'\n```",
                    "correct_answer": {
                      "id": "a1546048457908",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n'bk' in 'book'\n```",
                    "correct_answer": {
                      "id": "a1546048637540",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n'oo' in ['book', 'book', 'book']\n```",
                    "correct_answer": {
                      "id": "a1546048652341",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n'book' in ['book', 'book', 'book']\n```",
                    "correct_answer": {
                      "id": "a1546048667933",
                      "text": "`True`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546048457908",
                    "text": "`True`"
                  },
                  {
                    "id": "a1546048667933",
                    "text": "`True`"
                  },
                  {
                    "id": "a1546048637540",
                    "text": "`False`"
                  },
                  {
                    "id": "a1546048652341",
                    "text": "`False`"
                  }
                ]
              }
            },
            {
              "id": 801198,
              "key": "0843f156-f734-4991-965a-1d03b50a0659",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0843f156-f734-4991-965a-1d03b50a0659",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modify the code below so that it uses the `in` operator to check whether the substrings `\"waffles\"` or `\"pancakes\"` are substrings of the user's response."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801199,
              "key": "a77c5cb1-69e5-4ed1-82e1-64c50651a531",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801195xGENERIC1ufs657b",
              "pool_id": "webterminal",
              "view_id": "generic-cywjp",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801200,
              "key": "4b852596-6a7e-4000-92e5-94e66b771fd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nwhile True:\n    response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n    if \"waffles\" in response:\n        print(\"Waffles it is!\")\n        break\n    elif \"pancakes\" in response:\n        print(\"Pancakes it is!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 801206,
              "key": "22c81d6d-3d41-409b-a529-710aaa60239e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The user can now enter pretty much any crazy answer they would like, and as long as it includes `waffles` or `pancakes` somewhere in their response, the program will recognize this:\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nI would like pAncAKes please! I love them SOOOO MUCH!!!\nPancakes it is!\nYour order will be ready shortly.\n```\n\nNow, this isn't a *perfect* solution ...\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nUgh, I HATE pancakes.\nPancakes it is!\nYour order will be ready shortly.\n```\n\nIf we really wanted to avoid issues like this, we could keep getting into more sophisticated ways of processing the input. In fact, you could easily build a whole career around these kinds of issues in [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing). But that's a bit beyond the scope of this course!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801537,
          "key": "59e0ba7c-5241-4783-bd7b-23074f8c9992",
          "title": "Breakfast bot — Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59e0ba7c-5241-4783-bd7b-23074f8c9992",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801538,
              "key": "b22f0f0f-c71d-438a-be0c-2e7a5bddc970",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Intro",
              "instructor_notes": ""
            },
            {
              "id": 805709,
              "key": "5dff6b60-9ae6-4e5c-955f-ff26b63fb4f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next up, let's work on the messages we want to print:\n* Get input and use it to determine what happens next\n* Handle bad input without crashing\n* Be flexible with the input the user can enter\n* **Print messages to the console, with a short pause after each one**\n* Allow the player to order again if they like",
              "instructor_notes": ""
            },
            {
              "id": 801539,
              "key": "53022689-401c-4181-8016-728c07ca00d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "First, you may remember that the example program that we are trying to reproduce has an intro:\n\n```text\nHello! I am Bob, the Breakfast Bot.\nToday we have two breakfasts available.\nThe first is waffles with strawberries and whipped cream.\nThe second is sweet potato pancakes with butter and syrup.\n```\n\nAnd then there's also this line, which is printed after they order:\n\n```text\nYour order will be ready shortly.\n```\n\nLet's go ahead and add these to our program.",
              "instructor_notes": ""
            },
            {
              "id": 801540,
              "key": "34ea2b43-e9ca-4a61-ab36-549d1f7d55b8",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "34ea2b43-e9ca-4a61-ab36-549d1f7d55b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "In the workspace below, add `print` statements to display the above messages.",
                "Be sure that the intro is only displayed when the program first starts—not every time the bot asks for an order."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801541,
              "key": "8c24584c-5fce-4a9d-850b-9e9baeb29597",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801537xGENERIC4bofo9cv",
              "pool_id": "webterminal",
              "view_id": "generic-8kqvk",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801556,
              "key": "8dc739b4-d000-4ec8-802d-0fabf6db60b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nNote that all of the `print` statements we added are *outside* of the loop. If they were inside, then every time the user enters bad input, all of these would be printed again.\n\n```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\") # All of these are outside the loop.\nprint(\"Today we have two breakfasts available.\")\nprint(\"The first is waffles with strawberries and whipped cream.\")\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\nwhile True:\n    response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n    if \"waffles\" in response:\n        print(\"Waffles it is!\")\n        break\n    elif \"pancakes\" in response:\n        print(\"Pancakes it is!\")\n        break\n    else:\n        print(\"Sorry, I don't understand.\")\nprint(\"Your order will be ready shortly.\") # This one is also outside the loop!\n```\nThis last `print` is also outside the loop. If it were inside, then the user might see, `Sorry, I don't understand.` followed by `Your order will be ready shortly.`. That wouldn't make much sense.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801535,
          "key": "3b2e7bd2-cd81-4f14-a47e-f87c3e6f4e7b",
          "title": "Breakfast bot — Pausing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3b2e7bd2-cd81-4f14-a47e-f87c3e6f4e7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801536,
              "key": "61298521-5339-4ec5-8d9d-d6f968d01476",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Pausing",
              "instructor_notes": ""
            },
            {
              "id": 801557,
              "key": "c9c3c7af-0dc3-4cd6-a829-9af55218a5b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Thinking back to the example program, one observation we made was that the program paused briefly after printing each message. But in our version, this doesn't happen.\n\nWhen we have a series of `print` statements, they execute so quickly that it usually just looks like they're being displayed all together at the same time. That's not what we want.\n\n## The `time` module\n\nIn an earlier lesson, we saw that we can have our programs pause briefly by using Python's `time` module. Specifically, we need the `sleep` function from this module.\n\nIf you're curious, you can see the official Python documentation for it [here](https://docs.python.org/3/library/time.html#time.sleep).\n\nHere's an example to refresh your memory on the syntax:\n\n```python\nimport time\n\nprint(\"Hello\")\ntime.sleep(2)\nprint(\"world!\")\n```\n\nThe argument given to the `sleep` function is the number of seconds to pause. So the above code will pause for two seconds between the `print` statements.",
              "instructor_notes": ""
            },
            {
              "id": 801558,
              "key": "150426d7-fb60-49d6-8899-47d810d7c1be",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "150426d7-fb60-49d6-8899-47d810d7c1be",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add pauses after each `print` statement."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "To get our code to behave like the example, we need one call to `time.sleep` after every `print` statement in the program!"
            },
            {
              "id": 801559,
              "key": "c4cc10e0-c0d2-4105-b661-d646a4df7287",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801535xGENERICirhm82tl",
              "pool_id": "webterminal",
              "view_id": "generic-9n41w",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801560,
              "key": "88fb4e65-64b1-42cd-ab0d-eae288208f04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n\nwhile True:\n    response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n    if \"waffles\" in response:\n        print(\"Waffles it is!\")\n        time.sleep(2)\n        break\n    elif \"pancakes\" in response:\n        print(\"Pancakes it is!\")\n        time.sleep(2)\n        break\n    else:\n        print(\"Sorry, I don't understand.\")\n        time.sleep(2)\nprint(\"Your order will be ready shortly.\")\ntime.sleep(2)\n```",
              "instructor_notes": ""
            },
            {
              "id": 806303,
              "key": "d1586a28-c23e-4cd1-b7b1-41b8a581df70",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## I feel like I could be replaced by a machine ...\n\nAs you were putting in all of those `time.sleep(2)` calls, it may have started to feel rather repetitive. When you find yourself typing in the same code over and over, this can be a sign that it's time to rethink the structure of your program. We won't do that yet, but keep this in mind and we'll revisit the issue shortly!\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801561,
          "key": "e0620d6f-cc07-47d4-a497-2bcc3447bb3c",
          "title": "Breakfast bot — Order again",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0620d6f-cc07-47d4-a497-2bcc3447bb3c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801562,
              "key": "6e8a8b42-0170-41eb-b587-d37f7e6f5794",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Order again",
              "instructor_notes": ""
            },
            {
              "id": 805711,
              "key": "3f963383-e617-4c47-8102-48382e6baf6c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There's one last feature of the program we haven't yet implemented.",
              "instructor_notes": ""
            },
            {
              "id": 805710,
              "key": "447bf4e5-4f8c-4d27-99d9-603db963838d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Get input and use it to determine what happens next\n* Handle bad input without crashing\n* Be flexible with the input the user can enter\n* Print messages to the console, with a short pause after each one\n* **Allow the player to order again if they like**",
              "instructor_notes": ""
            },
            {
              "id": 801563,
              "key": "96457177-96b4-4f7e-bd5f-82212267d0a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "After the user makes an order, the program should not exit immediately. Instead, it should ask them if they would like to order again.\n\nIf they say `yes`, it should ask them for their order again. And if they say `no`, it should print a goodbye message and exit.\n\nHere's some example output showing the behavior we want:\n\n```text\nPlease place your order. Would you like waffles or pancakes?\nwaffles\nWaffles it is!\nYour order will be ready shortly.\nWould you like to place another order? Please say 'yes' or 'no'.\nyes\nVery good, I'm happy to take another order.\nPlease place your order. Would you like waffles or pancakes?\npancakes\nPancakes it is!\nYour order will be ready shortly.\nWould you like to place another order? Please say 'yes' or 'no'.\nno\nOK, goodbye!\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 801564,
              "key": "aca3830c-1582-4649-afd6-1397991dbdcb",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aca3830c-1582-4649-afd6-1397991dbdcb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modify the code so that it gives the user a chance to order again (instead of just exiting the program)."
              ],
              "positive_feedback": "**Awesome!!**",
              "video_feedback": null,
              "description": "We can get this behavior using the same tools we've already used in the program—things like the `input` function, a `while` loop, and an `if` test. \n\nSee if you can figure out how!\n\n**Note:** Don't feel bad if you find this exercise difficult—it's intended to be more challenging. Remember that you can find the solution code below any time you need it!"
            },
            {
              "id": 801565,
              "key": "b0aceb95-0fad-4416-b561-2e3008a6798b",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801561xGENERICddq7956g",
              "pool_id": "webterminal",
              "view_id": "generic-jyeuh",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801566,
              "key": "2fa76a25-6e42-4a20-afbc-e7e33e3d5cb1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n\nwhile True:\n    while True:\n        response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n        if \"waffles\" in response:\n            print(\"Waffles it is!\")\n            time.sleep(2)\n            break\n        elif \"pancakes\" in response:\n            print(\"Pancakes it is!\")\n            time.sleep(2)\n            break\n        else:\n            print(\"Sorry, I don't understand.\")\n            time.sleep(2)\n    print(\"Your order will be ready shortly.\")\n    time.sleep(2)\n    order_again = input(\"Would you like to place another order? \"\n                        \"Please say 'yes' or 'no'.\\n\").lower()\n    if 'no' in order_again:\n        print(\"OK, goodbye!\")\n        time.sleep(2)\n        break\n    elif 'yes' in order_again:\n        print(\"Very good, I'm happy to take another order.\")\n        time.sleep(2)\n```\n\nNote the use of the `lower` method just like before (so that if the user enters something like `'Yes'` or `'NO'`, it will still work.",
              "instructor_notes": ""
            },
            {
              "id": 801567,
              "key": "d930f3a8-b63a-45d9-b2b8-ee07ceb2114a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Getting valid input\n\nBecause we just added code that asks the user for input, there's again the possibility that the user will enter invalid input. Instead of `yes` or `no`, they might enter something like `I don't want to order again` or simply slip and hit a random key on their keyboard.",
              "instructor_notes": ""
            },
            {
              "id": 801568,
              "key": "2e3a116c-cd1c-417c-9947-76b9d5b5a9f5",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2e3a116c-cd1c-417c-9947-76b9d5b5a9f5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add an `else` block with a message saying `\"Sorry, I don't understand.\"`",
                "Wrap the code in a `while` loop so that the user gets prompted repeatedly until they enter one of the desired responses.",
                "If they enter `no`, the code should `break` out of *all* loops. This may require an additional `if` statement and a second `break`."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "So just like before, we should really make sure that the user is entering a valid response.\n\nUsing the same approach we took earlier, modify the code (in the workspace above) so that it can handle bad input."
            },
            {
              "id": 801569,
              "key": "bc0fb9d4-9010-4839-9359-0f23cc24bcb9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nThere's more than one way to do this. Here's how we set it up:\n\n(Note the comments about the break statements.)\n\n```python\nimport time\n\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n\nwhile True:\n    while True:\n        response = input(\"Please place your order. Would you like waffles or pancakes?\\n\").lower()\n        if \"waffles\" in response:\n            print(\"Waffles it is!\")\n            time.sleep(2)\n            break\n        elif \"pancakes\" in response:\n            print(\"Pancakes it is!\")\n            time.sleep(2)\n            break\n        else:\n            print(\"Sorry, I don't understand.\")\n            time.sleep(2)\n    print(\"Your order will be ready shortly.\")\n    time.sleep(2)\n    while True: # We want to loop until they enter a valid response.\n        order_again = input(\"Would you like to place another order? Please say 'yes' or 'no'.\\n\").lower()\n        if 'no' in order_again:\n            print(\"OK, goodbye!\")\n            time.sleep(2)\n            break # Note that this will only break out of the inner loop.\n        elif 'yes' in order_again:\n            print(\"Very good, I'm happy to take another order.\")\n            time.sleep(2)\n            break # Again, this only breaks out of the inner loop.\n        else:\n            print(\"Sorry, I don't understand.\")\n            time.sleep(2)\n    if 'no' in order_again: \n        break # We need this last break statement to exit the outer loop.\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801209,
          "key": "babdfe28-5c7e-408c-998d-38ed320e7231",
          "title": "Breakfast bot — Refactoring (1/5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "babdfe28-5c7e-408c-998d-38ed320e7231",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801210,
              "key": "160eacaa-8286-4e4c-b7ed-b3b9555a9deb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Refactoring (1/5)",
              "instructor_notes": ""
            },
            {
              "id": 801211,
              "key": "49189944-c3d7-4459-aae4-e932a37766d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our program now does everything that we observed in the example—we've achieved all of the specifications we noted!\n\nHowever, it is not yet finished.\n\nThere are often many ways to make code simpler, better organized, more readable, or easier to maintain.\n\nWhen we restructure code in a way that improves it—but doesn't change it's outwardly observable behavior—we are **refactoring** the code.\n\n> **Vocabulary:** **Refactoring** is the process of restructuring code without changing its outwardly observable behavior—in order to improve it in some way, such as by making it simpler, better organized, more readable, or easier to maintain.",
              "instructor_notes": ""
            },
            {
              "id": 801570,
              "key": "8c47549e-d8a6-43ac-a7c8-78f5f580a70c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## When to refactor\n\nThere are many reasons to refactor—and also times when there's no need for it. Learning *when* to refactor is itself an important skill.\n\nHere are some examples of things you might see in your code, and that should cause you to consider refactoring:\n* The code is more repetitive than it needs to be\n* The code is overly complex or difficult to read\n* The code is hard to maintain or modify\n* The code is hard to re-use",
              "instructor_notes": ""
            },
            {
              "id": 801212,
              "key": "452b9915-da52-40a8-9215-4e0aa8d69e53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Unnecessary repetition\n\nLet's look at the first idea from the above list—the idea of unnecessarily repetitive code. Seeing something more than once in your code is not by itself a sign that something is wrong. You will see many of the same tools used throughout a program, and that's to be expected.\n\nBut sometimes we see multiple blocks of code that both 1) *have the same structure* and 2) *do the same thing*. Let's see if we can find some code like this in our program.",
              "instructor_notes": ""
            },
            {
              "id": 801571,
              "key": "7a0d0009-6eeb-4622-b6c6-38c35ba1e30e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7a0d0009-6eeb-4622-b6c6-38c35ba1e30e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's some code from our program:\n\n```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\n```\nThe general purpose of this code is to **output a message to the console, and then pause for a couple seconds**. Do we have any other code in this program that does this same thing?",
                "answers": [
                  {
                    "id": "a1546190943191",
                    "text": "Yes, there is other code that duplicates what this code does",
                    "is_correct": true
                  },
                  {
                    "id": "a1546191011214",
                    "text": "No, there's no other code that does the same thing",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801572,
              "key": "00f57a86-3b2f-4d0a-bc69-bb1fc4a2f7a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You may have noticed as you were writing the program that we have a lot of code like this:\n\n```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n```\nWe keep writing `print`, `sleep`, `print`, `sleep`, `print`, `sleep`,  over and over ...\n\nNot only is this a lot of typing, but it also makes the code harder to modify. Suppose that we decided that instead of pausing for two seconds each time, we would like to pause for three. Currently, we would have to make that change in dozens of places. That's extra work and it also makes it more likely we'll make a mistake—like forgetting to change the number somewhere.\n\nBut how can we improve this?",
              "instructor_notes": ""
            },
            {
              "id": 801574,
              "key": "c6583bdf-6de1-4aad-a854-9d2e23b713de",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6583bdf-6de1-4aad-a854-9d2e23b713de",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\n```\nWhich parts of this code are repetitive (we keep typing those parts over and over) and which parts are unique (we change them each time)?"
                },
                "concepts_label": "Code",
                "answers_label": "Repetitive or unique?",
                "concepts": [
                  {
                    "text": "```python\nprint()\n```",
                    "correct_answer": {
                      "id": "a1546191686287",
                      "text": "Repetitive"
                    }
                  },
                  {
                    "text": "```python\ntime.sleep()\n```",
                    "correct_answer": {
                      "id": "a1546192285758",
                      "text": "Repetitive"
                    }
                  },
                  {
                    "text": "`2`",
                    "correct_answer": {
                      "id": "a1546192286590",
                      "text": "Repetitive"
                    }
                  },
                  {
                    "text": "`\"Hello! I am Bob, the Breakfast Bot.\"`",
                    "correct_answer": {
                      "id": "a1546192287284",
                      "text": "Unique"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546192287284",
                    "text": "Unique"
                  },
                  {
                    "id": "a1546192286590",
                    "text": "Repetitive"
                  },
                  {
                    "id": "a1546192285758",
                    "text": "Repetitive"
                  },
                  {
                    "id": "a1546191686287",
                    "text": "Repetitive"
                  }
                ]
              }
            },
            {
              "id": 801575,
              "key": "c6564a51-c359-4f7a-ac4d-b10d50bb8e62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so what we want to do is take the repetitive parts and find a way to only write them **once** in our program.\n\nOne way we can do that is by defining a function and putting those repetitive parts inside that function. That way, we write the code **one time, in one place**. Then, we can simply *call* that code when we need to use it.\n\nWe might call our function `print_pause`, since that's what it does.\n\nThe goal is that instead of having code like this:\n\n```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\n```\n\nWe can have code like this:\n```python\nprint_pause(\"Hello! I am Bob, the Breakfast Bot.\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 801214,
              "key": "f0747c11-1196-451d-a749-a0f3e0a91389",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f0747c11-1196-451d-a749-a0f3e0a91389",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define the `print_pause` function.",
                "Replace all of the `print` and `time.sleep` calls with `print_pause` calls."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, see if you can define (and call) the `print_pause` function."
            },
            {
              "id": 801215,
              "key": "a563631f-676a-4d5d-8607-32a4bd96f5cf",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801209xGENERIC8lyggyzd",
              "pool_id": "webterminal",
              "view_id": "generic-82sao",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801216,
              "key": "b88b137f-8c4a-45f6-9fff-71387428fbbd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\nprint_pause(\"Hello! I am Bob, the Breakfast Bot.\")\nprint_pause(\"Today we have two breakfasts available.\")\nprint_pause(\"The first is waffles with strawberries and whipped cream.\")\nprint_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n\n\nwhile True:\n    while True:\n        response = input(\"Please place your order.  Would you like waffles or pancakes?\\n\").lower()\n        if \"waffles\" in response:\n            print_pause(\"Waffles it is!\")\n            break\n        elif \"pancakes\" in response:\n            print_pause(\"Pancakes it is!\")\n            break\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n    print_pause(\"Your order will be ready shortly.\")\n    while True:\n        order_again = input(\"Would you like to place another order? Please say 'yes' or 'no'.\\n\").lower()\n        if \"no\" in order_again:\n            print_pause(\"OK, goodbye!\")\n            break\n        elif \"yes\" in order_again:\n            print_pause(\"Very good, I'm happy to take another order.\")\n            break\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n    if \"no\" in order_again:\n        break\n```",
              "instructor_notes": ""
            },
            {
              "id": 801576,
              "key": "9051704d-8c00-4c3a-81cb-77ea2c73f400",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "What we did here may seem like an insignificant change, but consider that we've substantially simplified our code. In fact, we took blocks like this:\n\n```python\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n```\nAnd cut them down to about half the length:\n```python\nprint_pause(\"Hello! I am Bob, the Breakfast Bot.\")\nprint_pause(\"Today we have two breakfasts available.\")\nprint_pause(\"The first is waffles with strawberries and whipped cream.\")\nprint_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n```\n\nBut more importantly, did you notice how much work it was to replace all those lines of code with the `print_pause` function call? By putting the code in a function, we can now change it in just *one place*. So any future changes—like changing the length of the pause—can be done easily in the single function definition, rather than in several dozen different places throughout the code.\n\nThis is less work and reduces the chances of making a mistake.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801577,
          "key": "0921d480-575a-4685-a7d7-012465c4e0b5",
          "title": "Breakfast bot — Refactoring (2/5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0921d480-575a-4685-a7d7-012465c4e0b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801578,
              "key": "60477265-f192-4d83-9305-48d502354a8c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Refactoring (2/5)",
              "instructor_notes": ""
            },
            {
              "id": 801579,
              "key": "bbf7b397-dfa8-4b86-9cac-af66cc3cd579",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's have a look at this part of our program:\n\n```python\nwhile True:\n    response = input(\"Please place your order. \"\n                     \"Would you like waffles or pancakes?\\n\").lower()\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n        break\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n        break\n    else:\n        print_pause(\"Sorry, I don't understand.\")\nprint_pause(\"Your order will be ready shortly.\")\nwhile True:\n    order_again = input(\"Would you like to place another order? \"\n                        \"Please say 'yes' or 'no'.\\n\").lower()\n    if \"no\" in order_again:\n        print_pause(\"OK, goodbye!\")\n        break\n    elif \"yes\" in order_again:\n        print_pause(\"Very good, I'm happy to take another order.\")\n        break\n    else:\n        print_pause(\"Sorry, I don't understand.\")\n```\n\nNotice anything about this code? ",
              "instructor_notes": ""
            },
            {
              "id": 801580,
              "key": "87a4d924-ba00-47a7-8db9-94e1d5bb02ae",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "87a4d924-ba00-47a7-8db9-94e1d5bb02ae",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here are some possible observations about this block of code. Which is the most accurate?",
                "answers": [
                  {
                    "id": "a1546206719043",
                    "text": "The top half does something very similar to the bottom half.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546206761927",
                    "text": "The code is incredibly messy and disorganized.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546206762678",
                    "text": "The code would be cleaner if we didn't use any `else` statements.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801581,
              "key": "28d59e7c-8340-490b-8995-d21e37d99ce7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One main thing that we are doing in this code is *getting input from the user and checking if it is valid*. This happens in the top `while` loop and then again in the bottom `while` loop.\n\nSuppose that we came up with a new, better way to check for valid input. We would have to modify the code in two different places—this is extra work, and makes it more likely we'll introduce an error.\n\nOr imagine that we expanded our program. We might want to get more input from the user, and validate that input as well. We could potentially end up with more and more duplicated code.\n\nThis is a very similar situation to the one with `print` and `sleep` that we just looked at. And the solution is the same—define a function to carry out this task for us.",
              "instructor_notes": ""
            },
            {
              "id": 801583,
              "key": "4fe52215-be61-4930-86aa-26adf919d83f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Defining a `valid_input` function\n\nThis will definitely be trickier than the `print_pause` function we just wrote. Before we start writing it, let's analyze the current code a little. Here is one of the blocks of code where we're getting (and checking) the user's input:\n\n```python\nwhile True:\n    response = input(\"Please place your order. \"\n                     \"Would you like waffles or pancakes?\\n\").lower()\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n        break\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n        break\n    else:\n        print_pause(\"Sorry, I don't understand.\")\n```\n\nOne issue is that not all of this code has to do with getting and validating input—some of it has to do with what we want to happen after we've gotten the input. \n\n> **Key idea:** When defining a function, it should have *one purpose*. A single function should generally not do multiple unrelated things.\n\nWe want this to be a `valid_input` function—so we only want to put the code in this function that is directly related to getting and validating input. The rest of the code should not be in the function, since it serves a different purpose.",
              "instructor_notes": ""
            },
            {
              "id": 801585,
              "key": "19c82a13-ab8b-42fb-8943-ad8f5f4d1f07",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "19c82a13-ab8b-42fb-8943-ad8f5f4d1f07",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are pieces from the above code. Which of them are directly related to *getting valid input*?"
                },
                "concepts_label": "Code",
                "answers_label": "Related/unrelated to valid input",
                "concepts": [
                  {
                    "text": "```python\nresponse = input(\"...\").lower()\n```",
                    "correct_answer": {
                      "id": "a1546209466525",
                      "text": "Related"
                    }
                  },
                  {
                    "text": "```python\nprint_pause(\"Pancakes it is!\")\n```",
                    "correct_answer": {
                      "id": "a1546209803997",
                      "text": "Unrelated"
                    }
                  },
                  {
                    "text": "```python\nprint_pause(\"Waffles it is!\")\n```",
                    "correct_answer": {
                      "id": "a1546209830805",
                      "text": "Unrelated"
                    }
                  },
                  {
                    "text": "```python\nif \"waffles\" in response:\n```",
                    "correct_answer": {
                      "id": "a1546209831732",
                      "text": "Related"
                    }
                  },
                  {
                    "text": "```python\nelse:\n    print_pause(\"Sorry ... \")\n```",
                    "correct_answer": {
                      "id": "a1546209948990",
                      "text": "Related"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546209466525",
                    "text": "Related"
                  },
                  {
                    "id": "a1546209803997",
                    "text": "Unrelated"
                  },
                  {
                    "id": "a1546209830805",
                    "text": "Unrelated"
                  },
                  {
                    "id": "a1546209831732",
                    "text": "Related"
                  },
                  {
                    "id": "a1546209948990",
                    "text": "Related"
                  }
                ]
              }
            },
            {
              "id": 801586,
              "key": "4a187e74-c7e6-427b-a836-9203756d16ff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's another issue we need to consider: Some of the code is the *same* every time we validate input, and some of it can be *different* each time. For the function, we need to only use the code that is the *same* each time (the code that has to do with validating input *in general*).\n\nThe rest of the code—the specific things that change each time we validate input—will become the arguments and parameters of the function.\n\nThis will probably make more sense if we look at it in concrete terms...",
              "instructor_notes": ""
            },
            {
              "id": 801587,
              "key": "6e4af094-75fa-4105-be54-42da61cadda7",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e4af094-75fa-4105-be54-42da61cadda7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Again, here are some pieces of our current code (from the block above). Which of these are the same each time we validate input, and which of them can be different each time?"
                },
                "concepts_label": "Code",
                "answers_label": "Always the same / Can be different",
                "concepts": [
                  {
                    "text": "```python\nresponse = input().lower()\n```",
                    "correct_answer": {
                      "id": "a1546210770466",
                      "text": "Always the same"
                    }
                  },
                  {
                    "text": "```python\n\"Would you like waffles or pancakes?\"\n```",
                    "correct_answer": {
                      "id": "a1546210885290",
                      "text": "Can be different"
                    }
                  },
                  {
                    "text": "```python\nif ... in response:\n        break\n```",
                    "correct_answer": {
                      "id": "a1546210910203",
                      "text": "Always the same"
                    }
                  },
                  {
                    "text": "```python\n\"waffles\"\n```",
                    "correct_answer": {
                      "id": "a1546210961991",
                      "text": "Can be different"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1546210910203",
                    "text": "Always the same"
                  },
                  {
                    "id": "a1546210885290",
                    "text": "Can be different"
                  },
                  {
                    "id": "a1546210770466",
                    "text": "Always the same"
                  },
                  {
                    "id": "a1546210961991",
                    "text": "Can be different"
                  }
                ]
              }
            },
            {
              "id": 801582,
              "key": "be29eba8-71a3-48cf-86ff-51c2080469f3",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "be29eba8-71a3-48cf-86ff-51c2080469f3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "The function will need to have a parameter for the message to display to the user (we called our parameter `prompt`).",
                "The function will need two parameters for the options to be considered valid. We called ours `option1` and `option2`.",
                "Once you confirm that the user's response contains one of the valid options, you can `return` the response."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "See if you can figure out how to write the `valid_input` function.\n\nThen modify the original code to use this function in both of the places where we currently check the user's input.\n\nThis exercise is on the challenging side. If you get stuck, don't drive yourself too crazy—just take a peek at the solution for ideas."
            },
            {
              "id": 801588,
              "key": "82fb48fb-5379-40b2-bcd3-eb66d4c177c6",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801577xGENERICxu2nva98",
              "pool_id": "webterminal",
              "view_id": "generic-cdzt4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801589,
              "key": "d9d40a82-7f7d-4f60-8531-31a4eec7f97e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\ndef valid_input(prompt, option1, option2):\n    while True:\n        response = input(prompt).lower()\n        if option1 in response:\n            return response\n        elif option2 in response:\n            return response\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n\n\nprint_pause(\"Hello! I am Bob, the Breakfast Bot.\")\nprint_pause(\"Today we have two breakfasts available.\")\nprint_pause(\"The first is waffles with strawberries and whipped cream.\")\nprint_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n\n\nwhile True:\n    \n    response = valid_input(\"Please place your order. \"\n                           \"Would you like waffles or pancakes?\\n\",\n                           \"waffles\", \"pancakes\")\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n\n    print_pause(\"Your order will be ready shortly.\")\n\n    order_again = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in order_again:\n        print_pause(\"OK, goodbye!\")\n    elif \"yes\" in order_again:\n        print_pause(\"Very good, I'm happy to take another order.\")\n\n````",
              "instructor_notes": ""
            },
            {
              "id": 805702,
              "key": "e2da3393-f853-44fd-b7d4-50cbbef02f66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Making it more flexible\n\nThe `valid_input` function we wrote above works just fine for this program, but it's not very flexible at all. It can only be passed exactly two options—if we pass it any more or any less, we'll get an error saying that we tried to call a function with the wrong number of arguments. \n\nFor example, if we decided to also offer crêpes for breakfast...\n\n```python\nresponse = valid_input(\"Please place your order. \"\n                       \"Would you like waffles, pancakes, or crêpes?\\n\",\n                       \"waffles\", \"pancakes\", \"crêpes\")\n```\n\nThen this would happen:\n\n```text\nTypeError: valid_input() takes 3 positional arguments but 4 were given\n```\n\nClearly, any code that cannot be modified to include crêpes is significantly flawed. Let's fix this.",
              "instructor_notes": ""
            },
            {
              "id": 805703,
              "key": "52767eb6-dbfd-464f-85b3-3921a4f5c6a9",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "52767eb6-dbfd-464f-85b3-3921a4f5c6a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modify the *function calls* so that they pass a single list of options, rather than two separate strings.",
                "Replace the `option1` and `option2` parameters with a single `options` parameter, for the list of options.",
                "Modify the body of the function to use a `for` loop with the `options` list."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Go back up to the workspace and see if you can re-write the `valid_input` function so that it can deal with **any** number of options.\n\nOne way to do this would be to pass the function a **list** containing all valid options. For example:\n\n`[\"waffles\", \"pancakes\"]`\n\nThen you can use a `for` loop to go over each option and check if the user's input contains that option."
            },
            {
              "id": 805704,
              "key": "f5e67688-3773-4a49-b7da-53d1b78fe6ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\ndef valid_input(prompt, options):\n    while True:\n        response = input(prompt).lower()\n        for option in options:\n            if option in response:\n                return response\n        print_pause(\"Sorry, I don't understand.\")\n```\n\nThe `for` loop goes over each option. If one of them is `in` the response, then it immediately `return`s the response (and doesn't run any more code inside the function). But if the `for` loop goes over all the options and doesn't find any of them in the input, then Python will finish with the loop and run the line right after the end of the loop—which is the one that prints  `\"Sorry, I don't understand.\"`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801590,
          "key": "bd4c2fb7-7348-4829-b84d-447b72d0c2dc",
          "title": "Breakfast bot — Refactoring (3/5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd4c2fb7-7348-4829-b84d-447b72d0c2dc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801592,
              "key": "ff63f179-5cf3-43f9-87ff-ba588bac15b1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Refactoring (3/5)",
              "instructor_notes": ""
            },
            {
              "id": 801591,
              "key": "d9a28353-837e-4a73-a4fb-c875daa74cab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## More functions\n\nIt can be hard to decide when a particular block of code should be moved off to its own separate function. There are a number of different things that you may see that indicate it's time to consider this.\n\nOne signal is seeing code that is being repeated in multiple places in the program. This is what led us to create the `print_pause` and `valid_input` functions.\n\nAnother signal is when there's a block of code that has a distinct purpose and is easily separated from the code around it.\n\nThere are a couple of places in our program where this is the case.\n\nLet's look at some blocks of code from our program and see if we can identify the main, overall purpose of each one.",
              "instructor_notes": ""
            },
            {
              "id": 801593,
              "key": "d639d7cf-19fc-44e5-991a-3aee8db011c8",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d639d7cf-19fc-44e5-991a-3aee8db011c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's the first one:\n\n```python\nprint_pause(\"Hello! I am Bob, the Breakfast Bot.\")\nprint_pause(\"Today we have two breakfasts available.\")\nprint_pause(\"The first is waffles with strawberries and whipped cream.\")\nprint_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n```\n\nWhat's the general purpose of this code?",
                "answers": [
                  {
                    "id": "a1546216775890",
                    "text": "Display the introduction.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546216817462",
                    "text": "Get the user's order.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546216818766",
                    "text": "Check for valid input.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801594,
              "key": "8b691490-5467-4fb5-9015-4a613d063acf",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8b691490-5467-4fb5-9015-4a613d063acf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's another one:\n\n```python\nresponse = valid_input(\"Please place your order. \"\n                       \"Would you like waffles or pancakes?\\n\",\n                       \"waffles\", \"pancakes\")\nif \"waffles\" in response:\n    print_pause(\"Waffles it is!\")\nelif \"pancakes\" in response:\n    print_pause(\"Pancakes it is!\")\n```\n\nWhat's the general purpose of this code?",
                "answers": [
                  {
                    "id": "a1546217006563",
                    "text": "Display the introduction.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546217106475",
                    "text": "Get the user's order.",
                    "is_correct": true
                  },
                  {
                    "id": "a1546217108154",
                    "text": "Check for valid input.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801595,
              "key": "b30a2d8a-460e-4c80-b58a-ae4c9b401684",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If we want to further improve the structure of our program, one option is to turn each of the above blocks into its own function.\n\nThe first block of code has to do with displaying messages during the introduction, so we might call it `intro`.\n\nThe second block of code has to do with getting the user's order, so we might call it `get_order`.",
              "instructor_notes": ""
            },
            {
              "id": 801596,
              "key": "0728baae-9163-402c-ad0a-aa5751c8d841",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0728baae-9163-402c-ad0a-aa5751c8d841",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define and call the `intro` function.",
                "Define and call the `get_order` function."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Go ahead and define the `intro` and `get_order` functions.\n\nBoth of these are pretty straightforward, because they do not require and input, nor return any values when called. We're basically just wrapping the code that we already have up in function definitions to help organize it better."
            },
            {
              "id": 801597,
              "key": "4f039cf3-0826-49f2-832c-1733703963f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\ndef valid_input(prompt, option1, option2):\n    while True:\n        response = input(prompt).lower()\n        if option1 in response:\n            break\n        elif option2 in response:\n            break\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n    return response\n\ndef intro():\n    print_pause(\"Hello! I am Bob, the Breakfast Bot.\")\n    print_pause(\"Today we have two breakfasts available.\")\n    print_pause(\"The first is waffles with strawberries and whipped cream.\")\n    print_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n\ndef get_order():\n    response = valid_input(\"Please place your order. \"\n                           \"Would you like waffles or pancakes?\\n\",\n                           \"waffles\", \"pancakes\")\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n\nintro()\nwhile True:\n    \n    get_order()\n    print_pause(\"Your order will be ready shortly.\")\n    order_again = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in order_again:\n        print_pause(\"OK, goodbye!\")\n        break\n    elif \"yes\" in order_again:\n        print_pause(\"Very good, I'm happy to take another order.\")\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 806329,
          "key": "d9d16502-d215-4cef-a355-cc50301db1f0",
          "title": "Breakfast bot — Refactoring (4/5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9d16502-d215-4cef-a355-cc50301db1f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806336,
              "key": "11860b84-c740-4dda-8e69-5356d02a4f86",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Refactoring (4/5)",
              "instructor_notes": ""
            },
            {
              "id": 806330,
              "key": "a6f3bd8f-0e3e-4f93-b9bf-6925ec6a7229",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's the remaining code (at the bottom of our program) that we haven't yet refactored:\n\n```python\nintro()\nwhile True:\n\n    get_order()\n    order_again = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in order_again:\n        print_pause(\"OK, goodbye!\")\n        break\n    elif \"yes\" in order_again:\n        print_pause(\"Very good, I'm happy to take another order.\")\n```\n\nThere are a few improvements we can still make here.",
              "instructor_notes": ""
            },
            {
              "id": 806331,
              "key": "897515f3-49e5-4fab-b550-b5ca20cf2348",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "897515f3-49e5-4fab-b550-b5ca20cf2348",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's zoom in on these lines in particular:\n\n```python\norder_again = valid_input(\"Would you like to place another order? \"\n                          \"Please say 'yes' or 'no'.\\n\",\n                          \"yes\", \"no\")\nif \"no\" in order_again:\n    print_pause(\"OK, goodbye!\")\n    break\nelif \"yes\" in order_again:\n    print_pause(\"Very good, I'm happy to take another order.\")\n```\nWhat are they for?",
                "answers": [
                  {
                    "id": "a1546868538261",
                    "text": "Displaying the introduction.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546868681428",
                    "text": "Getting the user's order.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546868682363",
                    "text": "Checking if the user wants to order again.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 806333,
              "key": "1414beef-94dd-4088-a134-a7cc91b8f30c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1414beef-94dd-4088-a134-a7cc91b8f30c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Move the code (the same lines as shown in the exercise above) into a separate `order_again` function.",
                "In the place where these lines used to be located, call the `order_again` function."
              ],
              "positive_feedback": "**Excellent!**",
              "video_feedback": null,
              "description": "It looks like we could create a function for checking if the user wants to order again—we might call it the `order_again` function. Give this a try in the workspace below.\n\n**Note:** Creating this function is going to create a new problem for us, but we'll deal with that in a minute!"
            },
            {
              "id": 806332,
              "key": "6f5a86e6-90c4-43e3-ab5d-3ccf032e539c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c806329xGENERICh62rt1w1",
              "pool_id": "webterminal",
              "view_id": "generic-xufiz",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 806334,
              "key": "09a8dde4-3857-45d9-b4d9-f4e4caaf321f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\ndef order_again():\n    response = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in response:\n        print_pause(\"OK, goodbye!\")\n        break\n    elif \"yes\" in response:\n        print_pause(\"Very good, I'm happy to take another order.\")\n\nintro()\nwhile True:\n    get_order()\n    order_again()\n```\n\n**Note:** In our solution, we also changed the name of the variable from `order_again` to `response`, just to avoid confusing the variable with the name of the function (which is also called `order_again`). This isn't strictly necessary, and doesn't affect how the code runs.",
              "instructor_notes": ""
            },
            {
              "id": 806335,
              "key": "3e9ff8e8-3270-41a6-ac30-70bcda0fe37b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e9ff8e8-3270-41a6-ac30-70bcda0fe37b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Try running the new code. What result do you get?",
                "answers": [
                  {
                    "id": "a1546869982384",
                    "text": "It works perfectly, just like it did before creating the `order_again` function.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546870003710",
                    "text": "`SyntaxError: 'break' outside loop`",
                    "is_correct": true
                  },
                  {
                    "id": "a1546870023014",
                    "text": "`SyntaxError: EOL while scanning string literal`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 806337,
              "key": "36da4cd8-6425-4019-9ce2-96f93d88ea91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we've moved this code to its own function, the `break` is no longer really inside the `while` loop. So, how can we fix this?\n\nOne possibility would be to keep the `while` loop where it is and make some modifications to the code to exit the loop without using that original `break.\n\nBut there's an easier way to handle this that doesn't require the `while` loop at all. Whenever the user wants to order again, we can simply call the `get_order` function.",
              "instructor_notes": ""
            },
            {
              "id": 806338,
              "key": "a6f23dd6-49d3-4877-828c-c13780004b95",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a6f23dd6-49d3-4877-828c-c13780004b95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "In the `order_again` function, remove the `break`.",
                "Also in the `order_again` function, if the user says they want to order again, it should call the `get_order` function.",
                "Remove the `while` loop and un-indent the code that used to be inside of it."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Go back up to the workspace and modify the code to fix the problem with the `while` loop."
            },
            {
              "id": 809542,
              "key": "c837599b-863c-4ccf-b9ac-47d98d129bff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\ndef valid_input(prompt, option1, option2):\n    while True:\n        response = input(prompt).lower()\n        if option1 in response:\n            break\n        elif option2 in response:\n            break\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n    return response\n\n\ndef intro():\n    print_pause(\"Hello! I am Bob, the Breakfast Bot.\")\n    print_pause(\"Today we have two breakfasts available.\")\n    print_pause(\"The first is waffles with strawberries and whipped cream.\")\n    print_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n\n\ndef get_order():\n    response = valid_input(\"Please place your order. \"\n                           \"Would you like waffles or pancakes?\\n\",\n                           \"waffles\", \"pancakes\")\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n    print_pause(\"Your order will be ready shortly.\")\n\n\ndef order_again():\n    response = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in response:\n        print_pause(\"OK, goodbye!\")\n    elif \"yes\" in response:\n        print_pause(\"Very good, I'm happy to take another order.\")\n        get_order()\n\n\nintro()\nget_order()\norder_again()\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 809543,
          "key": "6d347469-7173-4ef6-a31e-5b13cdd6e2a9",
          "title": "Breakfast bot — Refactoring (5/5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6d347469-7173-4ef6-a31e-5b13cdd6e2a9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 809544,
              "key": "74b22fb6-97c6-421b-8b9e-3071bf261173",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Breakfast bot 🤖🥞 — Refactoring (5/5)",
              "instructor_notes": ""
            },
            {
              "id": 809545,
              "key": "7cf9ba4d-1393-474c-9c04-42f91e3f6021",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Other than the `import` statement at the top, there are now only a few lines of code that are not inside functions:\n\n```python\nintro()\nget_order()\norder_again()\n```\n\nIf you think about it, these are the lines that are responsible for running the entire rest of the program. Nothing will happen until these lines are executed.",
              "instructor_notes": ""
            },
            {
              "id": 809550,
              "key": "c0990110-bd92-44d7-bb82-9df8b535cf92",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c0990110-bd92-44d7-bb82-9df8b535cf92",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a function called `order_breakfast`.",
                "Move the three function calls inside the `order_breakfast` function.",
                "At the very end of the program, add a call for the `order_breakfast` function."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "We can actually wrap these last three lines up in a function as well!\n\nSince they are responsible for running the rest of the program—and the purpose of the program is to *order breakfast*—we might call it the `order_breakfast` function."
            },
            {
              "id": 809549,
              "key": "263d7f9d-b215-4d6e-8aa1-47505ea96a4a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c809543xGENERICgxc0fhh3",
              "pool_id": "webterminal",
              "view_id": "generic-mrejg",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/order_breakfast.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 809552,
              "key": "99e694c4-c27f-49f8-aa05-d3420408136c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\ndef order_breakfast():\n    intro()\n    get_order()\n    order_again()\n\n\norder_breakfast()\n```",
              "instructor_notes": ""
            },
            {
              "id": 809556,
              "key": "abae363f-083d-48ca-a8a2-287d0d5d748f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A single entry point\n\nWe have now moved almost everything line of code inside of a function. And remember, the code inside of a function does not run until it is called.\n\nThat means that there is only *one line* that controls whether the entire rest of the program will run:\n\n```python\norder_breakfast()\n```\n\nWe can think of this as the \"entry point\"—the place in the code that gets everything else started.\n\nLater in the course, we will see that this is extremely helpful for when we want to create a program and then import it as a module into other programs. When we import a module, we need to control whether that module runs, and what parts of it run. Having everything controlled from a single point like this makes that possible.",
              "instructor_notes": ""
            },
            {
              "id": 809551,
              "key": "8b545d19-a570-471d-8a85-d78352652a69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Comparing the two versions\n\nNow that we've finished refactoring our code, it's worth taking a moment to compare the two versions, from before and after refactoring.\n\nRemember, these two versions have exactly the same outward behavior—they do exactly the same thing. However, notice that the refactored version:\n* Has code that is easily re-used\n* Is less repetitive\n* Has a clearer structure and is more readable\n* Is easier to update or expand upon in the future\n\nRefactoring the code was a significant amount of work, but it's something that will get easier the more you do it—and it's an absolutely essential skill to develop if you want to become an effective programmer.",
              "instructor_notes": ""
            },
            {
              "id": 809559,
              "key": "f233dfb8-e371-47c5-98fd-d86613231db8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Before refactoring\n\nHere's our original code, before we did any refactoring:\n\n\n```python\nimport time\n\nprint(\"Hello! I am Bob, the Breakfast Bot.\")\ntime.sleep(2)\nprint(\"Today we have two breakfasts available.\")\ntime.sleep(2)\nprint(\"The first is waffles with strawberries and whipped cream.\")\ntime.sleep(2)\nprint(\"The second is sweet potato pancakes with butter and syrup.\")\ntime.sleep(2)\n\nwhile True:\n    while True:\n        response = input(\"Please place your order. \"\n                         \"Would you like waffles or pancakes?\\n\").lower()\n        if \"waffles\" in response:\n            print(\"Waffles it is!\")\n            time.sleep(2)\n            break\n        elif \"pancakes\" in response:\n            print(\"Pancakes it is!\")\n            time.sleep(2)\n            break\n        else:\n            print(\"Sorry, I don't understand.\")\n            time.sleep(2)\n    print(\"Your order will be ready shortly.\")\n    time.sleep(2)\n    while True:\n        order_again = input(\"Would you like to place another order? \"\n                            \"Please say 'yes' or 'no'.\\n\").lower()\n        if 'no' in order_again:\n            print(\"OK, goodbye!\")\n            time.sleep(2)\n            break\n        elif 'yes' in order_again:\n            print(\"Very good, I'm happy to take another order.\")\n            time.sleep(2)\n            break\n        else:\n            print(\"Sorry, I don't understand.\")\n            time.sleep(2)\n    if 'no' in order_again: \n        break\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 809560,
              "key": "1453d117-49ad-4ace-a650-520b3b26d751",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## After refactoring\n\nAnd here it is after:\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\ndef valid_input(prompt, option1, option2):\n    while True:\n        response = input(prompt).lower()\n        if option1 in response:\n            break\n        elif option2 in response:\n            break\n        else:\n            print_pause(\"Sorry, I don't understand.\")\n    return response\n\n\ndef intro():\n    print_pause(\"Hello! I am Bob, the Breakfast Bot.\")\n    print_pause(\"Today we have two breakfasts available.\")\n    print_pause(\"The first is waffles with strawberries and whipped cream.\")\n    print_pause(\"The second is sweet potato pancakes with butter and syrup.\")\n\n\ndef get_order():\n    response = valid_input(\"Please place your order. \"\n                           \"Would you like waffles or pancakes?\\n\",\n                           \"waffles\", \"pancakes\")\n    if \"waffles\" in response:\n        print_pause(\"Waffles it is!\")\n    elif \"pancakes\" in response:\n        print_pause(\"Pancakes it is!\")\n    print_pause(\"Your order will be ready shortly.\")\n    order_again()\n\ndef order_again():\n    response = valid_input(\"Would you like to place another order? \"\n                              \"Please say 'yes' or 'no'.\\n\",\n                              \"yes\", \"no\")\n    if \"no\" in response:\n        print_pause(\"OK, goodbye!\")\n    elif \"yes\" in response:\n        print_pause(\"Very good, I'm happy to take another order.\")\n        get_order()\n\n\ndef order_breakfast():\n    intro()\n    get_order()\n\n\norder_breakfast()\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 809685,
              "key": "d999cdb4-86b7-4c8a-b878-5a896be4d0a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Nice work! 💪\n\nIf you made it this far, and completed the *Breakfast Bot* exercise, you should know that this is quite an accomplishment! If you found it difficult, you should know that that is a normal experience at this point in your journey. For a beginner, this was a long and relatively complex piece of code, and it would be strange if it didn't stretch your brain a bit.\n\nThe skills you practiced here—especially refactoring the code—are foundational to your success as a developer. In fact, because they are so important (and because it takes some practice to get comfortable with them), we are going to do this whole thing all over again in the second half of this lesson!\n\nThis next exercise will be very similar in many ways. We'll look at a working example, build a program that produces the desired behavior, and then consider how that program can be improved by refactoring the code. It's going to be challenging, and that's intentional. The goal is to gradually build your skill until you are able to do all of this on your own, independently—just like a professional developer.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 810167,
          "key": "85436fb0-2bba-43b4-aa63-fd7bcf82dab1",
          "title": "Repeating with functions (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "85436fb0-2bba-43b4-aa63-fd7bcf82dab1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810783,
              "key": "a3b32710-f382-4007-8e20-0966a7686469",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Repeating with functions (1/2)\n\nA few pages back, we saw something pretty interesting: We were able to take code that used a `while` loop and replace it with code that had no loops at all—yet still had the same outward behavior!\n\nThis brings up an interesting general point, which is that **loops are not the only way to run some code repeatedly—functions can also be used to do this.** If we structure our functions correctly, we can often get essentially the same behavior as if we had a loop.\n\nLet's work through a couple examples.",
              "instructor_notes": ""
            },
            {
              "id": 810814,
              "key": "f5a6ad2f-e8e3-42f5-9182-5e977c25b871",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f5a6ad2f-e8e3-42f5-9182-5e977c25b871",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does this code do?\n\n```python\nwhile True:\n    response = input('Say \"foo\"!\\n')\n    if response == 'foo':\n        break\n```",
                "answers": [
                  {
                    "id": "a1547236932526",
                    "text": "Repeatedly prompts the user until they enter `foo`; then it exits.",
                    "is_correct": true
                  },
                  {
                    "id": "a1547236980403",
                    "text": "Repeatedly prompts the user and never exits (no matter what they enter).",
                    "is_correct": false
                  },
                  {
                    "id": "a1547237057285",
                    "text": "Prompts the user once, then exits (regardless of what they enter).",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 810815,
              "key": "94f3ca57-55b8-43f2-9cdc-67a42c20d50a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "94f3ca57-55b8-43f2-9cdc-67a42c20d50a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's that same code again:\n\n```python\nwhile True:\n    response = input('Say \"foo\"!\\n')\n    if response == 'foo':\n        break\n```\n\nBelow are some attempts to get the same results using a function. Which of these would produce the same outward behavior as the above code?\n\n(You may want to try pasting these examples into your code editor and running them for yourself!)"
                },
                "concepts_label": "Code",
                "answers_label": "Same or different behavior",
                "concepts": [
                  {
                    "text": "```python\ndef get_foo():\n    response = input('Say \"foo\"!\\n')\n    if response != 'foo':\n        get_foo()\n```",
                    "correct_answer": {
                      "id": "a1547237127872",
                      "text": "Different behavior"
                    }
                  },
                  {
                    "text": "```python\ndef get_foo():\n    response = input('Say \"foo\"!\\n')\n    if response != 'foo':\n\nget_foo()\n```",
                    "correct_answer": {
                      "id": "a1547237177205",
                      "text": "Different behavior"
                    }
                  },
                  {
                    "text": "```python\ndef get_foo():\n    response = input('Say \"foo\"!\\n')\n    if response != 'foo':\n        get_foo()\n\nget_foo()\n```",
                    "correct_answer": {
                      "id": "a1547237178165",
                      "text": "Same behavior"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1547237178165",
                    "text": "Same behavior"
                  },
                  {
                    "id": "a1547237177205",
                    "text": "Different behavior"
                  },
                  {
                    "id": "a1547237127872",
                    "text": "Different behavior"
                  }
                ]
              }
            },
            {
              "id": 810809,
              "key": "74e2ae33-693f-4333-9562-29fb6ac4ca47",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "74e2ae33-693f-4333-9562-29fb6ac4ca47",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Read the code and run it, to see how it currently works.",
                "Delete the `while True` and `break`.",
                "Define (and call) a function so that the code gives the same result as before (but without using a loop)."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find the following code:\n\n```python\nwhile True:\n    response = input(\"Can you guess what my favorite color is?\\n\")\n    if response == 'blue':\n        print(\"That's right! My favorite color is blue.\")\n        break\n    else:\n        print(\"Sorry, that's not my favorite color. Try again!\")\n```\nFirst, see what it does. Then see if you can modify the code so that it uses a function (instead of the `while` loop) to get the same result."
            },
            {
              "id": 810812,
              "key": "1f29d041-9fcf-47d2-8870-18e764213471",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c810167xGENERIC1bqitpem",
              "pool_id": "webterminal",
              "view_id": "generic-h3fo1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/repeat.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810813,
              "key": "74149940-23ee-4097-9687-9183bab03fac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\ndef guess_color():\n    response = input(\"Can you guess what my favorite color is?\\n\")\n    if response == 'blue':\n        print(\"That's right! My favorite color is blue.\")\n    else:\n        print(\"Sorry, that's not my favorite color. Try again!\")\n        guess_color()\n\nguess_color()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 810816,
          "key": "bd850035-e73e-494f-81f9-fe862602d7ac",
          "title": "Repeating with functions (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd850035-e73e-494f-81f9-fe862602d7ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810817,
              "key": "c9be6268-f434-42a5-9735-f6d3e4117314",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Repeating with functions (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 810818,
              "key": "92871df3-0cc5-4b36-8161-7f71500a22f8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's do one more example. Here's some code that uses a `while` loop to simulate going into two different rooms:\n\n```python\nwhile True:\n    choice = input(\"Would you like to go into the green room or the blue room?\\n\")\n    if choice == 'green':\n        print(\"You are in the green room.\")\n    elif choice == 'blue':\n        print(\"You are in the blue room.\")\n    else:\n        print(\"I don't know what that is.\")\n```\n\nIf the user enters `\"green\"`, they go to the green room, and if they enter `\"blue\"` they go to the blue room. And if they enter some other response, they get told `\"I don't know what that is\"`.\n\nRegardless, they are always asked again what room they want to go into (this keeps repeating indefinitely—it never exits).\n\n>**Note:** Feel free to copy and paste the above code into your code editor and try it for yourself!",
              "instructor_notes": ""
            },
            {
              "id": 810821,
              "key": "fcf0c34c-8c65-4ac1-b845-bc11f6a6845c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fcf0c34c-8c65-4ac1-b845-bc11f6a6845c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add code inside the three functions so that the program behaves the same as the example above."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find some starter code. Your job is to finish this code so that it produces the same results as the example above, but **without using any loops**."
            },
            {
              "id": 810819,
              "key": "a17a6325-2343-43e3-9b64-1c14b2c76413",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c810816xGENERICgzy7w8xf",
              "pool_id": "webterminal",
              "view_id": "generic-97jcs",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/rooms.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810820,
              "key": "e8f3601f-7edf-4f81-8b39-03da3c8be209",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution\n\nHere's one way to do it:\n\n```python\ndef green_room():\n    print(\"You are in the green room.\")\n    choose_room()\n\ndef blue_room():\n    print(\"You are in the blue room.\")\n    choose_room()\n\ndef choose_room():\n    choice = input(\"Would you like to go to the green room or the blue room?\\n\")\n    if choice == 'green':\n        green_room()\n    elif choice == 'blue':\n        blue_room()\n    else:\n        print(\"I don't know what that is.\")\n        choose_room()\n\nchoose_room()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801127,
          "key": "90d58d11-21a5-47c4-81a3-5566afd0bb56",
          "title": "Elevator — Simple version (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "90d58d11-21a5-47c4-81a3-5566afd0bb56",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801269,
              "key": "06a96884-8e7a-4e34-8ce4-fac8b518cb08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Simple version (1/2)",
              "instructor_notes": ""
            },
            {
              "id": 801270,
              "key": "9c7aff0d-c9e7-4157-b6d1-277755d6ccf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this next exercise, we'll build a simple program that simulates riding an elevator. We'll start off with a version that does the bare minimum, and then we'll add some things to make it more interesting.\n\nThen, just like with the last exercise, we'll spend some time refactoring the code.\n\nIn the workspace below, you can interact with the basic version by running `python3 elevator.py`.",
              "instructor_notes": ""
            },
            {
              "id": 801271,
              "key": "2f2f698a-32b0-4c9f-9e6d-aac22a492959",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801127xREPLft6cdi1n",
              "pool_id": "webterminal",
              "view_id": "repl-ywiul",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "bash",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801272,
              "key": "41f46890-1592-4478-b626-80dfaac773ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here are some things to notice about the example:\n* It prints messages for the user, with a short pause between each message\n* It asks the user to make a choice (and handles invalid input without crashing)\n* Depending on what the user chooses, something different happens\n* It keeps running forever, letting you pick different floors over and over",
              "instructor_notes": ""
            },
            {
              "id": 801277,
              "key": "18143faf-a323-44a9-8ab4-d404e7a9ef4d",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "18143faf-a323-44a9-8ab4-d404e7a9ef4d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Write down (or mentally note) what tools you might want to use for each of the above specifications."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "Before going on to the next page, can you think of some tools (e.g., functions, loops, statements, operators, etc.) that would help you achieve the above results?\n\nTake at most a minute to think about it."
            },
            {
              "id": 801278,
              "key": "50dbf800-65e8-40ee-87ce-9f9c379806cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you get more experienced as a programmer, this type of mental practice will become more and more useful to you.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801274,
          "key": "eb04b152-157c-4be5-a168-78ef3b034897",
          "title": "Elevator — Simple version (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eb04b152-157c-4be5-a168-78ef3b034897",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801275,
              "key": "8c7444d8-890c-4478-859e-4b67333e6927",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Simple version (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 801276,
              "key": "a4b0047f-b32e-4e84-9c9c-fc02b277fe2a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a4b0047f-b32e-4e84-9c9c-fc02b277fe2a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are the features we noted on the last page.\n\nSee if you can pair each of them with a tool you could use to achieve that feature."
                },
                "concepts_label": "Feature",
                "answers_label": "Tool",
                "concepts": [
                  {
                    "text": "It prints messages for the user, with a short pause between each message",
                    "correct_answer": {
                      "id": "a1545920831702",
                      "text": "`print` and `time.sleep`"
                    }
                  },
                  {
                    "text": "It asks the user to make a choice",
                    "correct_answer": {
                      "id": "a1545920868274",
                      "text": "`input`"
                    }
                  },
                  {
                    "text": "Depending on what the user chooses, something different happens",
                    "correct_answer": {
                      "id": "a1545920874938",
                      "text": "`if` and `elif`"
                    }
                  },
                  {
                    "text": "It keeps running forever, letting you pick different floors over and over",
                    "correct_answer": {
                      "id": "a1545920877515",
                      "text": "`while`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1545920900091",
                    "text": "`branch`"
                  },
                  {
                    "id": "a1545920897548",
                    "text": "`random.choice`"
                  },
                  {
                    "id": "a1545920894140",
                    "text": "`pause`"
                  },
                  {
                    "id": "a1545920874938",
                    "text": "`if` and `elif`"
                  },
                  {
                    "id": "a1545920868274",
                    "text": "`input`"
                  },
                  {
                    "id": "a1545920831702",
                    "text": "`print` and `time.sleep`"
                  },
                  {
                    "id": "a1545920877515",
                    "text": "`while`"
                  }
                ]
              }
            },
            {
              "id": 801280,
              "key": "f4e6dfa7-3dd6-4e9e-9391-8709d0ae1d3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Below, you'll find a workspace with an empty file. Using the tools you identified above, see if you can write code to replicate the features we observed in the example.\n\n> **Note:** Starting off with a blank file can be one of the most intimidating things in programming—getting started can seem impossible. In such cases, it can help to pick the simplest feature you see (something you already know how to do) and just code that first. Get _some_ kind of working program that does at least part of what you want it to—and then think about how you can get it one step closer.\n\nThere's also solution code below the workspace, so don't hesitate to peak at that if you really get stuck.",
              "instructor_notes": ""
            },
            {
              "id": 801281,
              "key": "4ce47cd1-cb12-4209-98c9-c15d7f903b3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example output\n\nHere is some example output from the finished program, for easy reference as you work (you can also go back to the last page and run the program in the workspace).\n\nWhen done, your code should produce similar results.\n\n```text\nYou have just arrived at your new job!\nYou are in the elevator.\nPlease enter the number for the floor you would like to visit:\n1. Lobby\n2. Human resources\n3. Engineering department\n1\nYou push the button for the first floor.\nAfter a few moments, you find yourself in the lobby.\nWhere would you like to go next?\nPlease enter the number for the floor you would like to visit:\n2\n1. Lobby\n2. Human resources\n3. Engineering department\nYou push the button for the second floor.\nAfter a few moments, you find yourself in the human resources department.\nWhere would you like to go next?\nPlease enter the number for the floor you would like to visit:\n1. Lobby\n2. Human resources\n3. Engineering department\n3\nYou push the button for the third floor.\nAfter a few moments, you find yourself in the engineering department.\nWhere would you like to go next?\nPlease enter the number for the floor you would like to visit:\n1. Lobby\n2. Human resources\n3. Engineering department\n```",
              "instructor_notes": ""
            },
            {
              "id": 801279,
              "key": "b3d624ef-5ec4-4615-a33f-bcd2d51dd0c4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801274xGENERICcq35h5d3",
              "pool_id": "webterminal",
              "view_id": "generic-hxrff",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801282,
              "key": "aecd141f-fab2-42d9-9c91-0bcb250c04d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way you could do it. Notice that we re-used our `print_pause` function from earlier. Again, this *reusability* is one reason why it can be so useful to refactor your code to make use of functions.\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\nwhile True:\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        print_pause(\"You push the button for the first floor.\")\n        print_pause(\"After a few moments, you find \"\n                    \"yourself in the lobby.\")\n    elif floor == '2':\n        print_pause(\"You push the button for the second floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the human resources department.\")\n    elif floor == '3':\n        print_pause(\"You push the button for the third floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the engineering department.\")\n\n    print_pause(\"Where would you like to go next?\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801283,
          "key": "c0fe48e2-8ab0-4e9f-9121-d51cc5bd8fcb",
          "title": "Elevator — Advanced version",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c0fe48e2-8ab0-4e9f-9121-d51cc5bd8fcb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801284,
              "key": "0dc3d525-807c-4c9c-9c50-bc4fc4ca117e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Advanced version",
              "instructor_notes": ""
            },
            {
              "id": 801285,
              "key": "5196f7a9-306b-4f06-97f5-ae319a1848d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we have the basic logic for the elevator program, we'll add some things to make it more interesting—with the goal of turning it into a very simple game.\n\nTo see an example of what we're going to build, run `python3 elevator.py` in the terminal below.\n\nThe goal of the game is to make your way to your new job as an engineer on the third floor.",
              "instructor_notes": ""
            },
            {
              "id": 801286,
              "key": "2b30f798-d828-401c-9335-b0a44e450c2c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801283xREPLu0wl0te2",
              "pool_id": "webterminal",
              "view_id": "repl-tjwxs",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "bash",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801287,
              "key": "0ecd190c-00a6-470b-aaf7-151adf66afc7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you can see, a lot more happens on each floor now:\n* On the first floor, you can pick up your ID card.\n* On the second floor, you can get the employee handbook, but only if you have the ID card.\n* On the third floor, you can get to your job, but only if you have both the ID card and handbook.\n\nLet's build the code for what happens to the player on each floor, starting with the first floor ...",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801289,
          "key": "428632af-2596-44c8-9517-60dfb5b8fa73",
          "title": "Elevator — First floor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "428632af-2596-44c8-9517-60dfb5b8fa73",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801290,
              "key": "f2a4fe92-32ed-4b4f-8614-479ba21daaf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — First floor",
              "instructor_notes": ""
            },
            {
              "id": 801291,
              "key": "77d497fa-9764-4702-a51c-d0845b0180ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here are our specifications. We'll start with the first one.\n\n* **On the first floor, you can pick up your ID card.**\n* On the second floor, you can get the employee handbook, but only if you have the ID card.\n* On the third floor, you can get to your job, but only if you have both the ID card and handbook.\n\n\nThe first floor is where the player can obtain the ID card.\n\nSo first, we need a way to keep track of the items the player has picked up.",
              "instructor_notes": ""
            },
            {
              "id": 801294,
              "key": "de0fa9da-394d-4334-ba4b-bc160a8ca522",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "de0fa9da-394d-4334-ba4b-bc160a8ca522",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "One easy way to do this is to use a list.\n\nSee if you can match each of the descriptions below with a piece of code that would carry out the described task."
                },
                "concepts_label": "Description",
                "answers_label": "Code",
                "concepts": [
                  {
                    "text": "Start off by creating an empty list.",
                    "correct_answer": {
                      "id": "a1545942096977",
                      "text": "`items = []`"
                    }
                  },
                  {
                    "text": "When the player gets a new item, add it to the list.\n",
                    "correct_answer": {
                      "id": "a1545942727079",
                      "text": "`items.append(\"ID card\")`"
                    }
                  },
                  {
                    "text": "Check whether the player has an item.",
                    "correct_answer": {
                      "id": "a1545942783759",
                      "text": "`if \"ID card\" in items:`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1545943117467",
                    "text": "`if items has \"ID card\":`"
                  },
                  {
                    "id": "a1545942096977",
                    "text": "`items = []`"
                  },
                  {
                    "id": "a1545942783759",
                    "text": "`if \"ID card\" in items:`"
                  },
                  {
                    "id": "a1545943130436",
                    "text": "`new_list(0)`"
                  },
                  {
                    "id": "a1545942727079",
                    "text": "`items.append(\"ID card\")`"
                  }
                ]
              }
            },
            {
              "id": 801301,
              "key": "53e08290-dd49-453a-a483-3489e4bd4246",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that we have in mind a way to keep track of the player's items, we should think about the rest of the code. If we look closely at the example from earlier, we can see that the logic works like this:\n\n> If they already have the ID card, print a message saying that there's nothing more to do here.\n\n```text\nThe clerk greets you, but she has already given you your \nID card, so there is nothing more to do here now.\n```\n\n> Otherwise (if they haven't gotten the ID card yet), add it to their items, and print a message saying they got the card:\n\n```text\nThe clerk greets you and gives you your ID card.\n```\n\nNotice the words **if** and **otherwise** in the above descriptions. This should put you in mind of an `if` ... `else` structure.\n",
              "instructor_notes": ""
            },
            {
              "id": 809835,
              "key": "c6bb8374-c98e-4530-8e81-dfbc9dc069c0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6bb8374-c98e-4530-8e81-dfbc9dc069c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "If the player already has the ID card in their `items` list, print a message saying there's nothing more to do here.",
                "Otherwise, append `\"ID card\"` to the `items` list and print a message telling them they got the card."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below is the code for the simple elevator program. See if you can expand the code for the *first floor* to behave in the way described above."
            },
            {
              "id": 801295,
              "key": "123dbd0e-e7f3-4f17-9c40-ca9fe8b1ac9d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801289xGENERICgurzrtzr",
              "pool_id": "webterminal",
              "view_id": "generic-iifhu",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801297,
              "key": "8e48f609-b56b-4619-90bb-61e0513cde9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\nwhile True:\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        print_pause(\"You push the button for the first floor.\")\n        print_pause(\"After a few moments, you find \"\n                    \"yourself in the lobby.\")\n        if \"ID card\" in items:\n            print_sleep(\"The clerk greets you, but she has already \"\n                        \"given you your ID card, so there is nothing \"\n                        \"more to do here now.\")\n        else:\n            print_sleep(\"The clerk greets you and gives you your ID \"\n                        \"card.\")\n            items.append(\"ID card\")\n    elif floor == '2':\n        print_pause(\"You push the button for the second floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the human resources department.\")\n    elif floor == '3':\n        print_pause(\"You push the button for the third floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the engineering department.\")\n        print_pause(\"Where would you like to go next?\")\n\n    print_pause(\"Where would you like to go next?\")\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801302,
          "key": "29a6c6cd-810d-41c8-a89f-19f4f35dce27",
          "title": "Elevator — Second floor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "29a6c6cd-810d-41c8-a89f-19f4f35dce27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801303,
              "key": "20cb703f-61ed-49df-9618-4b98b390ad2e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢",
              "instructor_notes": ""
            },
            {
              "id": 810138,
              "key": "6a7e48cc-591e-4643-86d0-e259d90f2e57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, let's see what we need to do next:\n\n* ~~On the first floor, you can pick up your ID card.~~\n* **On the second floor, you can get the employee handbook, but only if you have the ID card.**\n* On the third floor, you can get to your job, but only if you have both the ID card and handbook.",
              "instructor_notes": ""
            },
            {
              "id": 801304,
              "key": "3d737ab7-ac70-4581-a0dc-b398d103cd53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The second floor is where the player can get the employee handbook. But to get the handbook, they first have to have their ID.\n\nThe logic should work like this:\n\n> If the player already has the handbook, they should get a message saying there's nothing more to do here.\n\n```text\nThe HR folks are busy at their desks.\nThere doesn't seem to be much to do here.\n```\n\n> Otherwise (they don't yet have the handbook), the HR manager should approach them:\n\n```text\nThe head of HR greets you.\n```\n\n> And if they have their ID card, the HR manager should give them the handbook:\n\n```text\nHe looks at your ID card and then gives you a copy of the employee handbook.\n```\n\n> Otherwise, they should be told they first need the ID card:\n\n```text\nHe has something for you, but says he can't \ngive it to you until you go get your ID card.\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 810140,
              "key": "6bb9f784-8541-4709-91c9-9ee07851885e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So that describes what we want to do verbally, but it can be challenging to translate a description like this into actual code. As before, the words **if** and **otherwise** should make you consider an `if` ... `else` structure. But what exactly should that structure look like?",
              "instructor_notes": ""
            },
            {
              "id": 810136,
              "key": "a61f8dee-c8c5-461b-bcfa-a2a63f3137b9",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a61f8dee-c8c5-461b-bcfa-a2a63f3137b9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Before trying to write the actual code, it can sometimes help to write it out in plain English—but using a structure that is close to what you would do in the code.\n\nFor example, we can write the above description again, but try to give it some nesting. \n\nHere are a couple attempts at exactly that. Which of these has the correct nesting for what we want to do?"
                },
                "concepts_label": "Description",
                "answers_label": "Correct / incorrect",
                "concepts": [
                  {
                    "text": "```text\nif player has handbook\n    print \"nothing more here\"\notherwise\n    print \"HR approaches\"\n    if player has ID\n        give player handbook\n    otherwise\n        tell player \"need ID first\"\n```",
                    "correct_answer": {
                      "id": "a1547124234831",
                      "text": "Correct"
                    }
                  },
                  {
                    "text": "```text\nif player has handbook\n    print \"nothing more here\"\notherwise\n    print \"HR approaches\"\nif player has ID\n    give player handbook\notherwise\n    tell player \"need ID first\"\n```",
                    "correct_answer": {
                      "id": "a1547124526206",
                      "text": "Incorrect"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1547124234831",
                    "text": "Correct"
                  },
                  {
                    "id": "a1547124526206",
                    "text": "Incorrect"
                  }
                ]
              }
            },
            {
              "id": 810137,
              "key": "66dc1509-2630-414e-9cba-ebb5e345a2f3",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66dc1509-2630-414e-9cba-ebb5e345a2f3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modify the *second floor* code so that it produces the results outlined above."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801305,
              "key": "9427776a-db10-4055-ba8f-d31b50ff4ee0",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801302xGENERIC7nyffze9",
              "pool_id": "webterminal",
              "view_id": "generic-mvp78",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801306,
              "key": "c858c136-a098-4a15-acd0-e351d2d304b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our code. As usual, yours may look a bit different and still work just as well!\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(2)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\nwhile True:\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        print_pause(\"You push the button for the first floor.\")\n        print_pause(\"After a few moments, you find \"\n                    \"yourself in the lobby.\")\n        if \"ID card\" in items:\n            print_pause(\"The clerk greets you, but she has already \"\n                        \"given you your ID card, so there is nothing \"\n                        \"more to do here now.\")\n        else:\n            print_pause(\"The clerk greets you and gives you your ID \"\n                        \"card.\")\n            items.append(\"ID card\")\n    elif floor == '2':\n        print_pause(\"You push the button for the second floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the human resources department.\")\n        if \"handbook\" in items:\n            print_pause(\"The HR folks are busy at their desks.\")\n            print_pause(\"There doesn't seem to be much to do here.\")\n        else:\n            print_pause(\"The head of HR greets you.\")\n            if \"ID card\" in items:\n                print_pause(\"He looks at your ID card and then \"\n                            \"gives you a copy of the employee handbook.\")\n                items.append(\"handbook\")\n            else:\n                print_pause(\"He has something for you, but says he can't \"\n                            \"give it to you until you go get your ID card.\")\n        print_pause(\"You head back to the elevator.\")\n    elif floor == '3':\n        print_pause(\"You push the button for the third floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the engineering department.\")\n\n    print_pause(\"Where would you like to go next?\")\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801307,
          "key": "e0c3516a-5a9a-4f73-8fd0-ebfdc3e22805",
          "title": "Elevator — Third floor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0c3516a-5a9a-4f73-8fd0-ebfdc3e22805",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801308,
              "key": "5c8a71c4-a34a-4bcd-b274-6160a307a103",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢",
              "instructor_notes": ""
            },
            {
              "id": 810139,
              "key": "303df13c-35d7-45c8-8119-bb2838d8e730",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Only one left!\n\n* ~~On the first floor, you can pick up your ID card.~~\n* ~~On the second floor, you can get the employee handbook, but only if you have the ID card.~~\n* **On the third floor, you can get to your job, but only if you have both the ID card and handbook.**",
              "instructor_notes": ""
            },
            {
              "id": 801309,
              "key": "90ffba32-c98a-4af0-b388-def21279cfb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The third floor works similarly to the other two floors, but has the most complex logic.\n\n> If the player has the ID card, they should be able to open the door:\n\n```text\nYou use your ID card to open the door.\nYour program manager greets you and tells you that you need to have a copy of the \nemployee handbook in order to start work.\n```\n> Otherwise (they don't have the ID), they should get blocked at this point:\n\n```text\nUnfortunately, the door is locked and you can't get in.\nIt looks like you need some kind of key card to open the door.\nYou head back to the elevator.\n```\n\n> If the player did have the ID card and they also have the handbook, they should win the game:\n\n```text\nFortunately, you got that from HR!\nCongratulatons! You are ready to start your new job as vice president of engineering!\n```\n\n> Otherwise (they don't have the handbook), they should be sent back to the elevator:\n\n```text\nThey scowl when they see that you don't have it, and send you back to the elevator.\n```",
              "instructor_notes": ""
            },
            {
              "id": 801310,
              "key": "e99a6564-2365-4ae3-a3e5-b867e8871aa7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801307xGENERICxxqslbw7",
              "pool_id": "webterminal",
              "view_id": "generic-nic65",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801313,
              "key": "c73d73b1-f4f7-4b6f-bc14-a5f7addebd3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's the full code for the elevator game:\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\nwhile True:\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        print_pause(\"You push the button for the first floor.\")\n        print_pause(\"After a few moments, you find \"\n                    \"yourself in the lobby.\")\n        if \"ID card\" in items:\n            print_pause(\"The clerk greets you, but she has already \"\n                        \"given you your ID card, so there is nothing \"\n                        \"more to do here now.\")\n        else:\n            print_pause(\"The clerk greets you and gives you your ID \"\n                        \"card.\")\n            items.append(\"ID card\")\n    elif floor == '2':\n        print_pause(\"You push the button for the second floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the human resources department.\")\n        if \"handbook\" in items:\n            print_pause(\"The HR folks are busy at their desks.\")\n            print_pause(\"There doesn't seem to be much to do here.\")\n        else:\n            print_pause(\"The head of HR greets you.\")\n            if \"ID card\" in items:\n                print_pause(\"He looks at your ID card and then \"\n                            \"gives you a copy of the employee handbook.\")\n                items.append(\"handbook\")\n            else:\n                print_pause(\"He has something for you, but says he can't \"\n                            \"give it to you until you go get your ID card.\")\n        print_pause(\"You head back to the elevator.\")\n    elif floor == '3':\n        print_pause(\"You push the button for the third floor.\")\n        print_pause(\"After a few moments, you find yourself \"\n                    \"in the engineering department.\")\n        print_pause(\"This is where you work!\")\n        if \"ID card\" in items:\n            print_pause(\"You use your ID card to open the door.\")\n            print_pause(\"Your program manager greets you and tells \"\n                        \"you that you need to have a copy of the \"\n                        \"employee handbook in order to start work.\")\n            if \"handbook\" in items:\n                print_pause(\"Fortunately, you got that from HR!\")\n                print_pause(\"Congratulatons! You are ready to start your new job \"\n                            \"as vice president of engineering!\")\n                break\n            else:\n                print_pause(\"They scowl when they see that you don't have it, \"\n                            \"and send you back to the elevator.\")\n        else:\n            print_pause(\"Unfortunately, the door is locked \"\n                        \"and you can't get in.\")\n            print_pause(\"It looks like you need some kind of \"\n                        \"key card to open the door.\")\n            print_pause(\"You head back to the elevator.\")\n\n    print_pause(\"Where would you like to go next?\")\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 801314,
              "key": "ca65b356-9240-4957-884a-ee7b4a40fcc1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## That's messy!\n\nAt this point, the code replicates the behavior we observed in the example. It works fine and makes up a simple but playable game.\n\nBut it could still use a lot of work. On the next page, we'll look at what else we can do to improve this.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801311,
          "key": "41650348-a793-4334-a86c-aa98aaa729f0",
          "title": "Elevator — Refactoring (1/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "41650348-a793-4334-a86c-aa98aaa729f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801312,
              "key": "2db3ad33-8068-4021-8b4d-9b92f8f91182",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Refactoring (1/4)",
              "instructor_notes": ""
            },
            {
              "id": 801315,
              "key": "f8999c6f-806f-4195-860b-60698d30585a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's see if we can improve our *elevator* program by refactoring the code. We already re-used the `print_pause` function, so that's a step in the right direction. But the rest of the code is all just one big `while` loop with a bunch of nested `if` statements inside. We can do better than that!",
              "instructor_notes": ""
            },
            {
              "id": 801317,
              "key": "9223f08e-cdf2-4965-be37-e0490cecc411",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A function for each floor\n\nIn the *breakfast bot* program, we identified blocks of code that had a distinct purpose, and then we turned each of these blocks into its own separate function.\n\nThere are a number of places in the present program where we can do the same thing. In particular, it might be a good idea to split each of the \"floors\" to its own function.\n\nFor example, if we look at this code, we can see that everything under the first line is code for deciding what happens on the first floor:\n\n```python\nif floor == '1':\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n```\n\nWe could take all of this code and put it in its own function—we might call it `first_floor`. That would look something like this:\n\n```python\ndef first_floor():\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n```\n\nThe same can be said for the code dealing with the second and third floors. We can move each of those blocks to its own function, and then simply call the functions for each floor when needed:\n\n```python\nif floor == '1':\n    first_floor()\nelif floor == '2':\n    second_floor()\nelif floor == '3':\n    third_floor()\n```\n\nGo ahead and give it a try in the below workspace.\n\n**Note:** Creating these functions is going to temporarily break our code. For now, don't worry about that—we'll look at how to fix it shortly.",
              "instructor_notes": ""
            },
            {
              "id": 801318,
              "key": "2bd5f581-1c0a-4887-8891-d662639d20c4",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2bd5f581-1c0a-4887-8891-d662639d20c4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Move all the first floor code into a `first_floor` function, and put a function call where that code used to be.",
                "Repeat this process for the second and third floors.",
                "Be sure that your function definitions come *before* the function calls (because you can't call a function that hasn't been defined yet!)."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801316,
              "key": "b1664f79-32a1-4302-bc1e-8f9b04a2be01",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801311xGENERICu12kczcu",
              "pool_id": "webterminal",
              "view_id": "generic-1r6vl",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 801319,
              "key": "f3dbbfd5-6335-406b-b8f4-af15ad239dba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\n\ndef first_floor():\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n\n\ndef second_floor():\n    print_pause(\"You push the button for the second floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the human resources department.\")\n    if \"handbook\" in items:\n        print_pause(\"The HR folks are busy at their desks.\")\n        print_pause(\"There doesn't seem to be much to do here.\")\n    else:\n        print_pause(\"The head of HR greets you.\")\n        if \"ID card\" in items:\n            print_pause(\"He looks at your ID card and then \"\n                        \"gives you a copy of the employee handbook.\")\n            items.append(\"handbook\")\n        else:\n            print_pause(\"He has something for you, but says he can't \"\n                        \"give it to you until you go get your ID card.\")\n    print_pause(\"You head back to the elevator.\")\n\n\ndef third_floor():\n    print_pause(\"You push the button for the third floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the engineering department.\")\n    print_pause(\"This is where you work!\")\n    if \"ID card\" in items:\n        print_pause(\"You use your ID card to open the door.\")\n        print_pause(\"Your program manager greets you and tells \"\n                    \"you that you need to have a copy of the \"\n                    \"employee handbook in order to start work.\")\n        if \"handbook\" in items:\n            print_pause(\"Fortunately, you got that from HR!\")\n            print_pause(\"Congratulatons! You are ready to start your new job \"\n                        \"as vice president of engineering!\")\n            # break\n        else:\n            print_pause(\"They scowl when they see that you don't have it, \"\n                        \"and send you back to the elevator.\")\n    else:\n        print_pause(\"Unfortunately, the door is locked \"\n                    \"and you can't get in.\")\n        print_pause(\"It looks like you need some kind of \"\n                    \"key card to open the door.\")\n        print_pause(\"You head back to the elevator.\")\n\n\nwhile True:\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor()\n    elif floor == '2':\n        second_floor()\n    elif floor == '3':\n        third_floor()\n\n    print_pause(\"Where would you like to go next?\")\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 810145,
              "key": "98562b55-9ac6-41a1-bdb6-8acdd41aad8f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "98562b55-9ac6-41a1-bdb6-8acdd41aad8f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Try running this new version of our code.\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1547146141502",
                    "text": "It works perfectly, just like it did before refactoring.",
                    "is_correct": false
                  },
                  {
                    "id": "a1547146195259",
                    "text": "`SyntaxError: 'break' outside loop`",
                    "is_correct": true
                  },
                  {
                    "id": "a1547146198772",
                    "text": "`SyntaxError: EOL while scanning string literal`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 810146,
              "key": "dd42e8f9-09fb-4e14-9d2c-a36f7a635cdb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is exactly the same issue we dealt with earlier when refactoring the *breakfast bot* program. Because we moved the `break` statement off to a separate function, it is no longer seen by Python as being *inside* the `while` loop.\n\nWe'll look at how to fix this on the next page.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 810151,
          "key": "13a1d283-c136-4aef-b804-30b84768ee6a",
          "title": "Elevator — Refactoring (2/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "13a1d283-c136-4aef-b804-30b84768ee6a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810154,
              "key": "70ddc492-6005-4b7d-b063-91a04b23ff3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Refactoring (2/4)",
              "instructor_notes": ""
            },
            {
              "id": 810152,
              "key": "8d92e496-d111-4855-9087-30a49cd5c462",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so we need to fix the error we're getting with the `break` statement. Actually, the real problem is not the `break` statement, but the fact that the `while` loop now runs forever—there's nothing to break out of the loop, so it just keeps going and going.\n\nOne possibility would be to keep the loop and try to fix it. But actually, we will see that we don't really need it—we can get rid of the `while` loop and accomplish everything we need to do here using functions.",
              "instructor_notes": ""
            },
            {
              "id": 810156,
              "key": "3e2bf051-c4ea-4141-96f4-42aa98bcaeb7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A `ride_elevator` function\n\nLet's look at the code that's inside the `while` loop:\n\n```python\nprint_pause(\"Please enter the number for the \"\n            \"floor you would like to visit:\")\nfloor = input(\"1. Lobby\\n\"\n              \"2. Human resources\\n\"\n              \"3. Engineering department\\n\")\nif floor == '1':\n    first_floor()\nelif floor == '2':\n    second_floor()\nelif floor == '3':\n    third_floor()\n\nprint_pause(\"Where would you like to go next?\")\n```\n\nAll of this code is related to riding the elevator, so we might consider placing it in a `ride_elevator` function.",
              "instructor_notes": ""
            },
            {
              "id": 810160,
              "key": "c7957c12-1c96-454a-a7ef-44659b6de624",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c7957c12-1c96-454a-a7ef-44659b6de624",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Take the code that's currently inside the `while` loop and move it into a new function called `ride_elevator`.",
                "Get rid of both the `while` and the `break`—we don't need them anymore.",
                "In the location where the `while` loop used to be, call the `ride_elevator` function."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 810158,
              "key": "d06ffd43-b25a-412f-b466-668b92796ade",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c810151xGENERIC6l2idg0i",
              "pool_id": "webterminal",
              "view_id": "generic-hmavb",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810161,
              "key": "d967074f-ff36-4954-8b6c-1bed88f08982",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nThe end of your program should now look something like this:\n\n```python\ndef ride_elevator():\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor()\n    elif floor == '2':\n        second_floor()\n    elif floor == '3':\n        third_floor()\n\n    print_pause(\"Where would you like to go next?\")\n\n\nride_elevator()\n\n```",
              "instructor_notes": ""
            },
            {
              "id": 810162,
              "key": "3fcd359b-55bc-402d-8569-61954d402582",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3fcd359b-55bc-402d-8569-61954d402582",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add `ride_elevator()` calls where needed,"
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Now, each time we want the player to be able to ride the elevator again, we can simply call the `ride_elevator` function.\n\nLook through the code and see if you can find all the places where the player should be given the option to ride the elevator—then add a `ride_elevator()` call in each of those places."
            },
            {
              "id": 810163,
              "key": "918737e2-a0f4-4bd0-a91f-eb604a36c860",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nWe've added a comment in each of the locations to help show where the function calls have been added.\n\nBasically, we want to call `ride_elevator` in all of the spots where the player is told `\"You head back to the elevator.\"` Notice that we did *not* call this function when the player has won the game. That is how we \"break\" out of the loop that we've created with these functions.\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\nprint_pause(\"You have just arrived at your new job!\")\nprint_pause(\"You are in the elevator.\")\n\n\ndef first_floor():\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator() # Added a call here.\n\n\ndef second_floor():\n    print_pause(\"You push the button for the second floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the human resources department.\")\n    if \"handbook\" in items:\n        print_pause(\"The HR folks are busy at their desks.\")\n        print_pause(\"There doesn't seem to be much to do here.\")\n    else:\n        print_pause(\"The head of HR greets you.\")\n        if \"ID card\" in items:\n            print_pause(\"He looks at your ID card and then \"\n                        \"gives you a copy of the employee handbook.\")\n            items.append(\"handbook\")\n        else:\n            print_pause(\"He has something for you, but says he can't \"\n                        \"give it to you until you go get your ID card.\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator() # Added a call here.\n\n\ndef third_floor():\n    print_pause(\"You push the button for the third floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the engineering department.\")\n    print_pause(\"This is where you work!\")\n    if \"ID card\" in items:\n        print_pause(\"You use your ID card to open the door.\")\n        print_pause(\"Your program manager greets you and tells \"\n                    \"you that you need to have a copy of the \"\n                    \"employee handbook in order to start work.\")\n        if \"handbook\" in items:\n            print_pause(\"Fortunately, you got that from HR!\")\n            print_pause(\"Congratulatons! You are ready to start your new job \"\n                        \"as vice president of engineering!\")\n        else:\n            print_pause(\"They scowl when they see that you don't have it, \"\n                        \"and send you back to the elevator.\")\n            ride_elevator()\n    else:\n        print_pause(\"Unfortunately, the door is locked \"\n                    \"and you can't get in.\")\n        print_pause(\"It looks like you need some kind of \"\n                    \"key card to open the door.\")\n        print_pause(\"You head back to the elevator.\")\n        ride_elevator() # Added a call here.\n\n\ndef ride_elevator():\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor()\n    elif floor == '2':\n        second_floor()\n    elif floor == '3':\n        third_floor()\n\n\nride_elevator()\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801320,
          "key": "76260666-e515-4b10-8fa7-38e39505f11c",
          "title": "Elevator — Refactoring (3/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "76260666-e515-4b10-8fa7-38e39505f11c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801321,
              "key": "5f7d92e2-fabe-486a-b765-be64124734a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Refactoring (3/4)",
              "instructor_notes": ""
            },
            {
              "id": 810165,
              "key": "5c4792d0-344b-42f2-b89c-0df83f9472e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We still have a few stray bits of code that we could refactor. Let's take a look...",
              "instructor_notes": ""
            },
            {
              "id": 801322,
              "key": "57681d98-7a04-4e0e-acdb-33874b1cf339",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## An `intro` function\nFirst, we've got these lines floating out in the main body of our program:\n\n```python\nprint_sleep(\"You have just arrived at your new job!\", 2)\nprint_sleep(\"You are in the elevator.\", 2)\n```\n\nThis code has to do with the introduction to the game, so we could move it to a function called `intro` if we wanted to.\n\nAnd it's a pretty good idea to do this. Even though our intro code is very short and simple right now, we might decide to expand it later on. Or we might decide we want to replace it with a different intro. Or maybe in the future we might create multiple intros and present different ones each time the player starts a new game! Having the code in its own separate function makes all of these things possible.",
              "instructor_notes": ""
            },
            {
              "id": 810168,
              "key": "4c867d95-f74c-4144-9780-e50fbfeb9068",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c867d95-f74c-4144-9780-e50fbfeb9068",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define an `intro` function and add a function call in the appropriate location."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 801325,
              "key": "00bb028d-3683-47fb-a9f2-9c7c070a4b26",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801320xGENERICrh7ufdw9",
              "pool_id": "webterminal",
              "view_id": "generic-pg8r1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810169,
              "key": "6e781afa-34e0-4352-ad35-985949275096",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\nitems = []\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\ndef intro()\n    print_pause(\"You have just arrived at your new job!\")\n    print_pause(\"You are in the elevator.\")\n\n\ndef first_floor():\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator()\n\n\ndef second_floor():\n    print_pause(\"You push the button for the second floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the human resources department.\")\n    if \"handbook\" in items:\n        print_pause(\"The HR folks are busy at their desks.\")\n        print_pause(\"There doesn't seem to be much to do here.\")\n    else:\n        print_pause(\"The head of HR greets you.\")\n        if \"ID card\" in items:\n            print_pause(\"He looks at your ID card and then \"\n                        \"gives you a copy of the employee handbook.\")\n            items.append(\"handbook\")\n        else:\n            print_pause(\"He has something for you, but says he can't \"\n                        \"give it to you until you go get your ID card.\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator()\n\n\ndef third_floor():\n    print_pause(\"You push the button for the third floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the engineering department.\")\n    print_pause(\"This is where you work!\")\n    if \"ID card\" in items:\n        print_pause(\"You use your ID card to open the door.\")\n        print_pause(\"Your program manager greets you and tells \"\n                    \"you that you need to have a copy of the \"\n                    \"employee handbook in order to start work.\")\n        if \"handbook\" in items:\n            print_pause(\"Fortunately, you got that from HR!\")\n            print_pause(\"Congratulatons! You are ready to start your new job \"\n                        \"as vice president of engineering!\")\n        else:\n            print_pause(\"They scowl when they see that you don't have it, \"\n                        \"and send you back to the elevator.\")\n            ride_elevator()\n    else:\n        print_pause(\"Unfortunately, the door is locked \"\n                    \"and you can't get in.\")\n        print_pause(\"It looks like you need some kind of \"\n                    \"key card to open the door.\")\n        print_pause(\"You head back to the elevator.\")\n        ride_elevator()\n\n\ndef ride_elevator():\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor()\n    elif floor == '2':\n        second_floor()\n    elif floor == '3':\n        third_floor()\n\n\nintro()\nride_elevator()\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801511,
          "key": "6f9ff8eb-a138-4120-bdf1-692e68ab0421",
          "title": "Elevator — Refactoring (4/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6f9ff8eb-a138-4120-bdf1-692e68ab0421",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 801512,
              "key": "041c1c70-e614-46a2-9b6a-f3a66964b8d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Refactoring (4/4)",
              "instructor_notes": ""
            },
            {
              "id": 810166,
              "key": "ad493097-39be-4e69-b12e-5f51832cd928",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A `main` function\nAside from the `import` statement, there are now only three lines that are outside of function definitions. There's our assignment statement for the `items` list:\n\n```python\nitems = []\n```\n\nAnd there are the two function calls that kick everything off:\n\n```python\nintro()\nride_elevator()\n```\n\nThese handle the main tasks that get the game running—they are, in a sense the *entry point*, since nothing will happen until these lines run.\n\nSince these handle the main tasks for playing the game, it would be reasonable to put them in a `play_game` function.\n\nThen we can start the whole game off by simply calling this function. at the very bottom of the program:\n```python\nplay_game()\n```",
              "instructor_notes": ""
            },
            {
              "id": 810171,
              "key": "00f05003-ab14-4ccd-b65d-b0c663719a4c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "00f05003-ab14-4ccd-b65d-b0c663719a4c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define the `play_game` function and move those three lines inside of it.",
                "At the very end of the program, add a function call for `play_game`."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 810170,
              "key": "30ea88f7-0c54-4bdf-8cc6-2fee19a5f72c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c801511xGENERIClmrx3kbw",
              "pool_id": "webterminal",
              "view_id": "generic-bt72d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810174,
              "key": "c3cadb34-fd59-4149-a605-8da9b9d9d248",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\ndef intro():\n    print_pause(\"You have just arrived at your new job!\")\n    print_pause(\"You are in the elevator.\")\n\n\ndef first_floor():\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator()\n\n\ndef second_floor():\n    print_pause(\"You push the button for the second floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the human resources department.\")\n    if \"handbook\" in items:\n        print_pause(\"The HR folks are busy at their desks.\")\n        print_pause(\"There doesn't seem to be much to do here.\")\n    else:\n        print_pause(\"The head of HR greets you.\")\n        if \"ID card\" in items:\n            print_pause(\"He looks at your ID card and then \"\n                        \"gives you a copy of the employee handbook.\")\n            items.append(\"handbook\")\n        else:\n            print_pause(\"He has something for you, but says he can't \"\n                        \"give it to you until you go get your ID card.\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator()\n\n\ndef third_floor():\n    print_pause(\"You push the button for the third floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the engineering department.\")\n    print_pause(\"This is where you work!\")\n    if \"ID card\" in items:\n        print_pause(\"You use your ID card to open the door.\")\n        print_pause(\"Your program manager greets you and tells \"\n                    \"you that you need to have a copy of the \"\n                    \"employee handbook in order to start work.\")\n        if \"handbook\" in items:\n            print_pause(\"Fortunately, you got that from HR!\")\n            print_pause(\"Congratulatons! You are ready to start your new job \"\n                        \"as vice president of engineering!\")\n        else:\n            print_pause(\"They scowl when they see that you don't have it, \"\n                        \"and send you back to the elevator.\")\n            ride_elevator()\n    else:\n        print_pause(\"Unfortunately, the door is locked \"\n                    \"and you can't get in.\")\n        print_pause(\"It looks like you need some kind of \"\n                    \"key card to open the door.\")\n        print_pause(\"You head back to the elevator.\")\n        ride_elevator()\n\n\ndef ride_elevator():\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor()\n    elif floor == '2':\n        second_floor()\n    elif floor == '3':\n        third_floor()\n\n\ndef play_game():\n    items = []\n    intro()\n    ride_elevator()\n\n\nplay_game()\n```",
              "instructor_notes": ""
            },
            {
              "id": 801513,
              "key": "b77e2afc-9f19-4c56-9dda-3f68cdc15bbe",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b77e2afc-9f19-4c56-9dda-3f68cdc15bbe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you haven't already, go back up to the workspace and try running the refactored code. Try selecting one of the floors.\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1546014585976",
                    "text": "It works exactly the same as before we refactored the code.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546014644599",
                    "text": "It works fine, but the `print` messages are in a different order from before.",
                    "is_correct": false
                  },
                  {
                    "id": "a1546014688854",
                    "text": "It throws the error `NameError: name 'items' is not defined`",
                    "is_correct": true
                  },
                  {
                    "id": "a1546014726033",
                    "text": "It throws the error `TypeError: expected string, list found`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 810175,
              "key": "40a89758-6a36-420f-a5ac-9b652744bc11",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "On the next page, we'll look at what's causing this and how to fix it.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 810176,
          "key": "9b9cb3e5-97be-4d57-a424-a5da784a409a",
          "title": "Elevator — Scope",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9b9cb3e5-97be-4d57-a424-a5da784a409a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810177,
              "key": "fd4d62ed-ce65-41cd-86b1-abc2454eddc0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Elevator 🏢 — Scope",
              "instructor_notes": ""
            },
            {
              "id": 810179,
              "key": "cb163328-1252-49fc-b001-d12d132c3e81",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So we can see that when we created that last function, `play_game`, this created a problem. Every time we try to do something with the `items` list, we get an error:\n\n```text\nNameError: name 'items' is not defined\n```\n\nThis may seem odd, because we're certainly defining the variable. It's right here in our `play_game` function:\n\n```python\ndef play_game():\n    items = [] # Here it is!\n    intro()\n    ride_elevator()\n```\n\nSo why is Python not able to see that?\n\nThe reason is because of **scope**. You may remember that any variables we define inside of a function are only visible within that function. They are not accessible from elsewhere in the code.\n\nSo whenever we try to access `items` from one of the other functions, Python gives us this error saying it doesn't know what that name refers to.",
              "instructor_notes": ""
            },
            {
              "id": 810180,
              "key": "e1e60fda-d4a4-4a5e-b7d8-ce4f593a8fea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Passing it along\n\nOne way we can solve this issue is by passing the `items` list as an argument. Anytime we call a function that needs to have access to the `items` list, we can pass the list to that function.\n\nFor example, when we first call the `ride_elevator` function, we will need to change that as follow:\n\n```python\ndef play_game():\n    items = []\n    intro()\n    ride_elevator(items) # Pass the list to the ride_elevator function\n```\n\nThis means that, in turn, the `ride_elevator` function needs to have a corresponding parameter:\n\n```python\ndef ride_elevator(items):\n```\n\nWe need to continue passing this list along throughout the program, so that each function will have access to it.",
              "instructor_notes": ""
            },
            {
              "id": 810181,
              "key": "ca6eae18-601a-45f5-9ab4-b989a0e250df",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ca6eae18-601a-45f5-9ab4-b989a0e250df",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add `items` as an argument wherever the code is calling a function that needs access to the list.",
                "Add a corresponding `items` parameter in whatever function is being called.",
                "Run the game and test all three floors to make sure you're no longer getting the `'items' is not defined` error."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "To see where we need to add these arguments and parameters, you'll want to trace the flow of the program.  Start with `ride_elevator(items)` and see which line of code will run next. When does each function get called, and does the `items` list need to be passed in that call?\n\n**Hint:** It needs to be passed in almost all of the function calls, because almost all of the functions make use of the `items` list.\n\nIf you're feeling unsure about where it needs to be added, you can always try running the code and see where Python presents a `'items' not found` error."
            },
            {
              "id": 810178,
              "key": "0e15afbd-7902-410c-add1-61da66e0a022",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c810176xGENERICyzhle0ra",
              "pool_id": "webterminal",
              "view_id": "generic-zr0li",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/elevator.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 810182,
              "key": "a7527d1c-f9e9-4279-a64d-2bfc5db6ad56",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport time\n\n\ndef print_pause(message_to_print):\n    print(message_to_print)\n    time.sleep(1)\n\n\ndef intro():\n    print_pause(\"You have just arrived at your new job!\")\n    print_pause(\"You are in the elevator.\")\n\n\ndef first_floor(items):\n    print_pause(\"You push the button for the first floor.\")\n    print_pause(\"After a few moments, you find \"\n                \"yourself in the lobby.\")\n    if \"ID card\" in items:\n        print_pause(\"The clerk greets you, but she has already \"\n                    \"given you your ID card, so there is nothing \"\n                    \"more to do here now.\")\n    else:\n        print_pause(\"The clerk greets you and gives you your ID \"\n                    \"card.\")\n        items.append(\"ID card\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator(items)\n\n\ndef second_floor(items):\n    print_pause(\"You push the button for the second floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the human resources department.\")\n    if \"handbook\" in items:\n        print_pause(\"The HR folks are busy at their desks.\")\n        print_pause(\"There doesn't seem to be much to do here.\")\n    else:\n        print_pause(\"The head of HR greets you.\")\n        if \"ID card\" in items:\n            print_pause(\"He looks at your ID card and then \"\n                        \"gives you a copy of the employee handbook.\")\n            items.append(\"handbook\")\n        else:\n            print_pause(\"He has something for you, but says he can't \"\n                        \"give it to you until you go get your ID card.\")\n    print_pause(\"You head back to the elevator.\")\n    ride_elevator(items)\n\n\ndef third_floor(items):\n    print_pause(\"You push the button for the third floor.\")\n    print_pause(\"After a few moments, you find yourself \"\n                \"in the engineering department.\")\n    print_pause(\"This is where you work!\")\n    if \"ID card\" in items:\n        print_pause(\"You use your ID card to open the door.\")\n        print_pause(\"Your program manager greets you and tells \"\n                    \"you that you need to have a copy of the \"\n                    \"employee handbook in order to start work.\")\n        if \"handbook\" in items:\n            print_pause(\"Fortunately, you got that from HR!\")\n            print_pause(\"Congratulatons! You are ready to start your new job \"\n                        \"as vice president of engineering!\")\n        else:\n            print_pause(\"They scowl when they see that you don't have it, \"\n                        \"and send you back to the elevator.\")\n            ride_elevator(items)\n    else:\n        print_pause(\"Unfortunately, the door is locked \"\n                    \"and you can't get in.\")\n        print_pause(\"It looks like you need some kind of \"\n                    \"key card to open the door.\")\n        print_pause(\"You head back to the elevator.\")\n        ride_elevator(items)\n\n\ndef ride_elevator(items):\n    print_pause(\"Please enter the number for the \"\n                \"floor you would like to visit:\")\n    floor = input(\"1. Lobby\\n\"\n                  \"2. Human resources\\n\"\n                  \"3. Engineering department\\n\")\n    if floor == '1':\n        first_floor(items)\n    elif floor == '2':\n        second_floor(items)\n    elif floor == '3':\n        third_floor(items)\n\n\ndef play_game():\n    items = []\n    intro()\n    ride_elevator(items)\n\n\nplay_game()\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 810183,
          "key": "a399687e-d6ac-4039-9f28-a18d19fa2aa1",
          "title": "100 lines!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a399687e-d6ac-4039-9f28-a18d19fa2aa1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810184,
              "key": "5dfe0cf0-a4e7-4a9f-a127-0981a76db821",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 100 lines!📄📄📄 ✅\n\nYou just wrote—and refactored—two very substantial programs, the second of which was nearly 100 lines in length. This is a huge step on your path to gaining the skills that a professional developer would have!\n\n## What's next?\nThat really was a major accomplishment, but it's possible that you're thinking, \"Hey, I didn't *really* write all of that code ... I was guided through the process, and I'm not sure if I could do it on my own.\" \n\nThis is a legitimate concern. When you get to a job interview or are given a real-world problem to solve, you won't necessarily have step-by-step guidance. In fact, chances are that the only thing you'll have is a blank code editor and maybe access to a Web browser.\n\nSo it's important to gain the confidence that you can build out a program like this on your own—and that's exactly what you'll be doing in the project that follows this lesson. This will certainly be challenging, but the skills required for the project are *very* similar to what we covered here. So if you've made it this far, you're now ready to tackle the project and level up as a programmer!",
              "instructor_notes": ""
            },
            {
              "id": 810822,
              "key": "3603ec9e-2709-4328-bbe1-af37467ba4bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Feedback\n\nAs we mentioned earlier, this is a new lesson that we're trying out in your classroom. As such, we would be especially curious to hear about your experience with it! When you click the **Next** button, you'll have an opportunity to rate the lesson and leave us a note—please do tell us how things went for you!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}