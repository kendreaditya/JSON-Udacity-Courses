{
  "data": {
    "lesson": {
      "id": 817318,
      "key": "5b5ad2a4-1bd8-4723-b88d-a92b8cce945e",
      "title": "Strings & Lists, Part 1",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn to work with strings and lists in your Python code.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/5b5ad2a4-1bd8-4723-b88d-a92b8cce945e/817318/1549163869241/Strings+%26+Lists%2C+Part+1+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/5b5ad2a4-1bd8-4723-b88d-a92b8cce945e/817318/1549163865557/Strings+%26+Lists%2C+Part+1+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 518429,
          "key": "05272e90-3669-43e9-8c52-96557a895201",
          "title": "Welcome back!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "05272e90-3669-43e9-8c52-96557a895201",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674925,
              "key": "17483b12-dd72-4aaf-829a-04e4f6f32ad1",
              "title": "Python: Welcome to strings & lists",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wqlcbyo_2mk",
                "china_cdn_id": "wqlcbyo_2mk.mp4"
              }
            },
            {
              "id": 528049,
              "key": "d582a54b-cbc2-4fb1-a6bc-1f17fab4cb57",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view4a15fa3c",
              "pool_id": "webterminal",
              "view_id": "4a15fa3c-00a2-4580-89d5-6061b1d8bbda",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": true,
                    "replCommand": "cd /home/workspace; while true; do python3 mad.py; sleep 2; done",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 528056,
              "key": "d87b754e-fed4-4bf7-b9c4-220c5383c1a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is the actual output of a program that you will write at the end of this lesson.\n\nThis program has a collection of templates for building sentences, as well as collections of nouns (such as \"iceberg\" and \"snake\") and verbs (such as \"caught\" and \"hacked\"). The templates for sentences look like this:\n```\nThe {{noun}} {{verb}} the {{noun}}.\n```\nThen the program puts together a sentence by substituting random nouns and verbs into the template, creating masterpieces of modern English composition such as:\n```text\nThe iceberg hacked the snake.\n```\nHow will you do this? _With a heck of a lot of strings._",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 627429,
          "key": "ce0eba5a-b970-441e-8091-c44692ed1e8b",
          "title": "Variables vs. literals",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce0eba5a-b970-441e-8091-c44692ed1e8b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 778181,
              "key": "a777d05a-ee22-4659-8783-ccbf7ef7fced",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Variables vs. literals\n\nEarlier in the course, we pointed out how Python treats a piece of code like `\"blue\"` (with quotes) differently from a piece of code like `blue` (without quotes). Let's play around with this ...",
              "instructor_notes": ""
            },
            {
              "id": 778184,
              "key": "4ced5bae-8911-41de-b4f9-601884d23db9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ced5bae-8911-41de-b4f9-601884d23db9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Start up the Python interactive interpreter (a.k.a. Python interactive mode) in the terminal on your computer. Then, try simply entering the word *cake*:\n\n```bash\n>>> cake\n```\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1541109247965",
                    "text": "It displays `'cake'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541109429022",
                    "text": "It displays `'yummy'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541109935693",
                    "text": "It displays `NameError: name 'cake' is not defined`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541110500323",
                    "text": "It displays `SyntaxError: can't assign to literal`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778191,
              "key": "d99f2204-ea7b-4a7e-b714-add9eb739d66",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d99f2204-ea7b-4a7e-b714-add9eb739d66",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now, try it again, but put the word inside quotes:\n\n```bash\n>>> \"cake\"\n```\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1541110047600",
                    "text": "It displays `'cake'` on a new line.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541110091391",
                    "text": "It displays `'yummy'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110102696",
                    "text": "It displays `NameError: name 'cake' is not defined`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110506332",
                    "text": "It displays `SyntaxError: can't assign to literal`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 778190,
              "key": "3bf05e66-0979-4b17-b4bc-80412016f0e2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3bf05e66-0979-4b17-b4bc-80412016f0e2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now try running these two lines:\n\n```bash\n>>> cake = \"yummy\"\n>>> cake\n```\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1541109838492",
                    "text": "It displays `'cake'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541109905235",
                    "text": "It displays `'yummy'` on a new line.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541109927757",
                    "text": "It displays `NameError: name 'cake' is not defined`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110494380",
                    "text": "It displays `SyntaxError: can't assign to literal`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 676154,
              "key": "f1e93822-3ee4-4ca0-bc76-f1d885c6c04f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            },
            {
              "id": 778193,
              "key": "b6f54100-0acd-4e1a-925b-23f1f30ca7db",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b6f54100-0acd-4e1a-925b-23f1f30ca7db",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now try running this line:\n\n```bash\n>>> \"cake\" = \"yummy\"\n```\n\nWhat happens?\n",
                "answers": [
                  {
                    "id": "a1541110316690",
                    "text": "It displays `'cake'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110394530",
                    "text": "It displays `'yummy'` on a new line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110394977",
                    "text": "It displays `NameError: name 'cake' is not defined`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541110395890",
                    "text": "It displays `SyntaxError: can't assign to literal`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778203,
              "key": "f776b6be-5682-4d9a-8ddd-7524b6c67c26",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so what's going on here? Just looking at the code by itself, it's not clear how `cake` is different from `\"cake\"`—and that's because the difference has to do with stuff that is happening behind the scenes in memory, where you can't see it. Let's have a look ...",
              "instructor_notes": ""
            },
            {
              "id": 674926,
              "key": "487a8c2f-4a3c-47f0-a5a6-6bf720d8a1b6",
              "title": "Python: Variables vs literals",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vY2-hj-HvVs",
                "china_cdn_id": "vY2-hj-HvVs.mp4"
              }
            },
            {
              "id": 777989,
              "key": "edc4cca2-6f01-46cf-91b7-e33d130b840d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "edc4cca2-6f01-46cf-91b7-e33d130b840d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's some code:\n\n```python\namy = turtle.Turtle()\namy.color(\"blue\")\ndistance = 50\namy.forward(distance)\namy.right(90)\n```\n\nWhich of these pieces of the code are **variable names** (a.k.a. **identifiers**) and which are **literals**?"
                },
                "concepts_label": "Piece of code",
                "answers_label": "Literal or variable?",
                "concepts": [
                  {
                    "text": "`distance`",
                    "correct_answer": {
                      "id": "a1541107772329",
                      "text": "variable name"
                    }
                  },
                  {
                    "text": "`50`",
                    "correct_answer": {
                      "id": "a1541107795408",
                      "text": "literal"
                    }
                  },
                  {
                    "text": "`\"blue\"`",
                    "correct_answer": {
                      "id": "a1541107796009",
                      "text": "literal"
                    }
                  },
                  {
                    "text": "`amy`",
                    "correct_answer": {
                      "id": "a1541107796665",
                      "text": "variable name"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541107795408",
                    "text": "literal"
                  },
                  {
                    "id": "a1541107796009",
                    "text": "literal"
                  },
                  {
                    "id": "a1541107772329",
                    "text": "variable name"
                  },
                  {
                    "id": "a1541107796665",
                    "text": "variable name"
                  }
                ]
              }
            },
            {
              "id": 778206,
              "key": "9925f3c1-1b1c-4501-b8f6-4d1086191944",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One of the most important parts of learning to program, is learning how the words you see in your code are related to data in memory. Learning to recognize which pieces of code are *literals* and which are *variable names* is a good example of this—and a key skill that you're now developing!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 778213,
          "key": "73d48ec0-af6b-4ecb-ad75-08b8ec0f03b8",
          "title": "More complex strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "73d48ec0-af6b-4ecb-ad75-08b8ec0f03b8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 778219,
              "key": "134598dd-f359-4f05-ad72-d30826181981",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# More complex strings\n\nWe've seen how we can print out a simple string:\n\n```python\nprint(\"Hello world!\")\n```\n\nTo do this, we simply put the text we want to print inside quotes (to show Python that it is a *string*).\n\nBut what if we want to print something more interesting—like some text that already has quotes in it:\n\n```text\nTo quote my favorite author, \"let's go on an adventure!\"\n```",
              "instructor_notes": ""
            },
            {
              "id": 778225,
              "key": "34d416c4-97c0-40c8-bf26-419ba3ad3134",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "34d416c4-97c0-40c8-bf26-419ba3ad3134",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Would it work if we just took the whole thing and put it inside a `print` call? Go ahead and try it!\n\n```bash\n>>> print(To quote my favorite author, \"let's go on an adventure!\")\n```\n\nWhat happens?",
                "answers": [
                  {
                    "id": "a1541113542563",
                    "text": "It works and prints out the text without any problems.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541113857878",
                    "text": "It prints out the text, but in a mixed-up order.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541113880743",
                    "text": "It displays `SyntaxError: invalid syntax`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778226,
              "key": "9b404f55-d70f-4276-b235-d8b1533ebf41",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9b404f55-d70f-4276-b235-d8b1533ebf41",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OK, let's try putting the whole thing in quotes, to see if that fixes it!\n\n```bash\n>>> print(\"To quote my favorite author, \"let's go on an adventure!\"\")\n```\nWhat happens?",
                "answers": [
                  {
                    "id": "a1541113945473",
                    "text": "It works and prints out the text without any problems.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541113997649",
                    "text": "It prints out the text, but in a mixed-up order.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541114001865",
                    "text": "It displays `SyntaxError: invalid syntax`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778228,
              "key": "df656652-4ec3-4319-8b0f-24f670b1cee3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Clearly, if we want to be able to handle more interesting strings—like strings that have quotes in them—we're going to need some new tools!",
              "instructor_notes": ""
            },
            {
              "id": 778216,
              "key": "09208b50-16fc-41cd-9fea-70ed1168bd32",
              "title": "Python: Handling more complex strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qQj9ITD1Rh4",
                "china_cdn_id": "qQj9ITD1Rh4.mp4"
              }
            },
            {
              "id": 778249,
              "key": "c8cf152f-f9b6-460e-ae69-455b64e41bcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "That was a lot! Karl went over:\n\n* Single quotes `'` vs. double quotes `\"`\n* The newline character `\\n`\n* The escape character `\\`\n* Triple quotes `\"\"\"`\n\nLet's get some practice with all of these.",
              "instructor_notes": ""
            },
            {
              "id": 778334,
              "key": "7a165a58-1eaf-4eb3-9065-42c8a6b95db4",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7a165a58-1eaf-4eb3-9065-42c8a6b95db4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some different attempts at printing the following:\n\n> That's John's pizza.\n\nWhich of these would work, and which would give an error?"
                },
                "concepts_label": "Code",
                "answers_label": "Works or error?",
                "concepts": [
                  {
                    "text": "```python\nprint(\"That's John's pizza.\")\n```",
                    "correct_answer": {
                      "id": "a1541124540838",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nprint('That's John's pizza.')\n```",
                    "correct_answer": {
                      "id": "a1541124717509",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "```python\nprint('That\\'s John\\'s pizza.')\n```",
                    "correct_answer": {
                      "id": "a1541124749263",
                      "text": "Works"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541124787406",
                    "text": "Error"
                  },
                  {
                    "id": "a1541124717509",
                    "text": "Error"
                  },
                  {
                    "id": "a1541124540838",
                    "text": "Works"
                  },
                  {
                    "id": "a1541124749263",
                    "text": "Works"
                  }
                ]
              }
            },
            {
              "id": 778337,
              "key": "b0e3088b-f3e3-42a5-b49a-97f90266c63c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Hint:** If you look again at the code above, notice how the syntax highlighting can help you see where Python thinks a string begins and ends!",
              "instructor_notes": ""
            },
            {
              "id": 778333,
              "key": "0e122eee-e475-4cc9-a0e2-a37d3ab9bac8",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0e122eee-e475-4cc9-a0e2-a37d3ab9bac8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's another:\n\n> She said, \"It's lovely.\"\n\nWhich of these would work, and which would give an error?\n"
                },
                "concepts_label": "Code",
                "answers_label": "Works or error?",
                "concepts": [
                  {
                    "text": "```python\nprint(\"She said, \"It's lovely.\"\")\n```",
                    "correct_answer": {
                      "id": "a1541124064662",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "```python\nprint('She said, \"It\\'s lovely.\"')\n```",
                    "correct_answer": {
                      "id": "a1541124392450",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nprint('She said, \"It's lovely.\"')\n```",
                    "correct_answer": {
                      "id": "a1541124428492",
                      "text": "Error"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541124392450",
                    "text": "Works"
                  },
                  {
                    "id": "a1541124064662",
                    "text": "Error"
                  },
                  {
                    "id": "a1541124428492",
                    "text": "Error"
                  },
                  {
                    "id": "a1541124491842",
                    "text": "Works"
                  }
                ]
              }
            },
            {
              "id": 778335,
              "key": "93e3d951-5230-4a7c-96d9-6380000779ce",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93e3d951-5230-4a7c-96d9-6380000779ce",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "How about this one?\n\n>This message  \n>is on two lines!"
                },
                "concepts_label": "Code",
                "answers_label": "Works or error?",
                "concepts": [
                  {
                    "text": "```python\nprint(\"This message\\nis on two lines!\")\n```",
                    "correct_answer": {
                      "id": "a1541124833809",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nprint(\"This message\nis on two lines!\")\n```",
                    "correct_answer": {
                      "id": "a1541124937000",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "```python\nprint(\"\"\"This message\nis on two lines!\"\"\")\n```",
                    "correct_answer": {
                      "id": "a1541124960248",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nprint(\"This message\\is on two lines!\")\n```",
                    "correct_answer": {
                      "id": "a1541125001793",
                      "text": "Error"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541124960248",
                    "text": "Works"
                  },
                  {
                    "id": "a1541124937000",
                    "text": "Error"
                  },
                  {
                    "id": "a1541125001793",
                    "text": "Error"
                  },
                  {
                    "id": "a1541124833809",
                    "text": "Works"
                  }
                ]
              }
            },
            {
              "id": 778330,
              "key": "32ad3478-db65-4ad1-8da4-4bcf05eb3623",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32ad3478-db65-4ad1-8da4-4bcf05eb3623",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Be sure that it prints to multiple lines, just like the text shown above.",
                "Only use one `print` statement.",
                "Print the whole thing without any errors."
              ],
              "positive_feedback": "**Nice\nwork\nindeed!**",
              "video_feedback": null,
              "description": "In the terminal below, see if you can print the following:\n\n>\"Is it very long?\" Alice asked, for she had heard a good deal of poetry that day.\n>\n>\"It's long,\" said the Knight, \"but it's very, very beautiful.\"\n\nYou can do this using only *one* `print` statement.\n\nTo run your code, open a new terminal and enter:\n```bash\npython3 strings.py\n```"
            },
            {
              "id": 778244,
              "key": "0953a35e-09c6-42f5-8e1b-3ad207d1d8e2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r442402c778213xGENERICq0uq3ogl",
              "pool_id": "webterminal",
              "view_id": "generic-jkmtg",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/strings.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 778336,
              "key": "bfda32c3-a9f5-46a2-b69b-17999a8add52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div id=\"spoiler-alert\" style=\"background-color: #a4e4f5;\">\n<span style=\"padding-top: 8px; padding-left: 8px; padding-right: 8px; display: block;\"><h1 style=\"margin: 0;\"> ⚠️ Spoiler alert!</h1></span>\n<span style=\"padding: 8px; display: block;\">**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!</span>\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 778332,
              "key": "97a615c1-354e-4aa7-8057-b2395f97bf8d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nprint('\"Is it very long?\" Alice asked, for she had heard a good deal of poetry that day.\\n\\n\"It\\'s long,\" said the Knight, \"but it\\'s very, very beautiful.\"')\n```\n**Note:** The above line of code is very long, so you may need to scroll to the right to see the whole thing.\n\nNotice that this uses:\n* Single quotes to surround the whole string\n* The escape character `\\` to take care of the single quotes that are inside the string\n* The newline character `\\n` to break the story to multiple lines\n\nAnother approach would be to simply enclose the whole thing in triple quotes:\n\n```python\nprint(\"\"\"\n\"Is it very long?\" Alice asked, for she had heard a good deal of poetry that day.\n\n\"It's long,\" said the Knight, \"but it's very, very beautiful.\"\n\"\"\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 778673,
              "key": "c18f31f9-9ffa-41a8-814e-12ab2ea0c1d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Triple quotes`\"\"\"`, yes. Quadruple quotes `\"\"\"\"`, no!\nNotice that in our solution above, we put the triple quotes `\"\"\"` on separate lines from the rest of the string. We did that partly to make the code more readable, but also because we wanted to avoid a series of four quotes: `\"\"\"\"`.",
              "instructor_notes": ""
            },
            {
              "id": 778675,
              "key": "877130c9-237b-424a-9cdb-1ee92cf5d9fe",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "877130c9-237b-424a-9cdb-1ee92cf5d9fe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's another way we might have tried to do it:\n```python\nprint(\"\"\"\"Is it very long?\" Alice asked, for she had heard a good deal of poetry that day.\n\n\"It's long,\" said the Knight, \"but it's very, very beautiful.\"\"\"\")\n```\nCopy this into the workspace and see what happens when you run it!",
                "answers": [
                  {
                    "id": "a1541346126230",
                    "text": "It works fine, just like the other version.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541346214573",
                    "text": "It throws an error—`TypeError: Incorrect data type.`",
                    "is_correct": false
                  },
                  {
                    "id": "a1541346245868",
                    "text": "It throws an error—`SyntaxError: EOL while scanning string literal.`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 778674,
              "key": "2dd659b3-0636-4a16-87db-14ad6cc45b65",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The trouble is with the series of four quotes `\"\"\"\"` at the end of the string. Python sees the **first three of these** as a signal that it has reached the end of the string—so when it then runs into the fourth quote, it thinks we're starting a new string. But then we never close that new string, and that's what causes the error.\n\nIf you're curious, you can read more about this issue in [this Stack Overflow post](https://stackoverflow.com/questions/48631068/why-in-python-3-do-quadruple-quotes-produce-a-syntax-error).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 518440,
          "key": "131b001c-3db4-444d-b44d-2093a017e586",
          "title": "Length",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "131b001c-3db4-444d-b44d-2093a017e586",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674930,
              "key": "fe0aad1d-5c1b-4d5c-b92e-6a1ee5196943",
              "title": "Python: String length",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "y4Ba01FvExo",
                "china_cdn_id": "y4Ba01FvExo.mp4"
              }
            },
            {
              "id": 778726,
              "key": "9a4c9710-e936-499f-a3fa-c3d63086b610",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9a4c9710-e936-499f-a3fa-c3d63086b610",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some different things you can try in your terminal with the `len` function.\n\nAs you try them, keep these questions in mind:\n* Do spaces count when calculating length?\n* Can you assign a string to a variable, and then use `len` on the variable?\n* Can you get the length of an integer?"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> len(\"something\")\n```",
                    "correct_answer": {
                      "id": "a1541355334093",
                      "text": "9"
                    }
                  },
                  {
                    "text": "```text\n>>> len(\"some thing\")\n```",
                    "correct_answer": {
                      "id": "a1541355736625",
                      "text": "10"
                    }
                  },
                  {
                    "text": "```text\n>>> something = \"Yay!\"\n>>> len(something)\n```",
                    "correct_answer": {
                      "id": "a1541355782656",
                      "text": "4"
                    }
                  },
                  {
                    "text": "```text\n>>> len(4)\n```",
                    "correct_answer": {
                      "id": "a1541355927859",
                      "text": "Error"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541356282215",
                    "text": "2"
                  },
                  {
                    "id": "a1541355772644",
                    "text": "9"
                  },
                  {
                    "id": "a1541355782656",
                    "text": "4"
                  },
                  {
                    "id": "a1541355927859",
                    "text": "Error"
                  },
                  {
                    "id": "a1541355334093",
                    "text": "9"
                  },
                  {
                    "id": "a1541355736625",
                    "text": "10"
                  }
                ]
              }
            },
            {
              "id": 778731,
              "key": "c5377cf0-f442-4af4-bd35-f513031f49d4",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c5377cf0-f442-4af4-bd35-f513031f49d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Like Kelly mentioned, you can also use `len` with lists.\n\nGive these a try and see what you get:"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> len[1, 2, 3]\n```",
                    "correct_answer": {
                      "id": "a1541356370783",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "```text\n>>> len([1, 2, 3])\n```",
                    "correct_answer": {
                      "id": "a1541356452986",
                      "text": "3"
                    }
                  },
                  {
                    "text": "```text\n>>> len([10, 20, 30])\n```",
                    "correct_answer": {
                      "id": "a1541356463978",
                      "text": "3"
                    }
                  },
                  {
                    "text": "```text\n>>> my_colors = [\"red\", \"blue\"]\n>>> len(my_colors)\n```",
                    "correct_answer": {
                      "id": "a1541356501265",
                      "text": "2"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541356495241",
                    "text": "6"
                  },
                  {
                    "id": "a1541356571969",
                    "text": "9"
                  },
                  {
                    "id": "a1541356463978",
                    "text": "3"
                  },
                  {
                    "id": "a1541356452986",
                    "text": "3"
                  },
                  {
                    "id": "a1541356370783",
                    "text": "Error"
                  },
                  {
                    "id": "a1541356501265",
                    "text": "2"
                  }
                ]
              }
            },
            {
              "id": 778771,
              "key": "f25a5bdb-0b80-4035-85e0-3594d282edd0",
              "title": "Too long for SMS",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f25a5bdb-0b80-4035-85e0-3594d282edd0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add your code inside the `too_long` function definition.",
                "When you're ready to test it, open a new terminal and run `python3 toolong.py`.",
                "When you pass `too_long` a short string, it should return `False`.",
                "When you pass `too_long` a long string, it should return `True`"
              ],
              "positive_feedback": "**Nice work!**",
              "video_feedback": null,
              "description": "SMS messages (and old-school Twitter posts) are limited to 140 characters. In the workspace below (or in your own terminal, if you prefer), write a function called `too_long` that tells whether  a string is too long to be sent in a single SMS message.\n\nYou'll see that we added some code to help test your function (with a short string and a long string)."
            },
            {
              "id": 527374,
              "key": "dc53b425-103a-4b0d-bc89-dce5a4b0b23a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view3216203e",
              "pool_id": "webterminal",
              "view_id": "3216203e-eb20-45dd-8f76-3e171cdc0113",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/toolong.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 670921,
              "key": "c571bd57-ac1d-4e5b-98ee-f83679caac52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 670923,
              "key": "87950863-a3d3-4400-a96a-a881dccb07f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution: Too long for SMS\n\nHere's one way to do it:\n\n```python\ndef too_long(s):\n    length = len(s)\n    if length > 140:\n        return True\n    else:\n        return False\n```\n\nHere's another one:\n\n```python\ndef too_long(s):\n    return len(s) > 140\n```\n\nThis one may not be as intuitive yet. Consider that `len(s) > 140` is an expression that will evaluate to either `True` or `False`. So this one line of code does basically the same thing as the five lines you see in the other version!\n\n----",
              "instructor_notes": ""
            },
            {
              "id": 528006,
              "key": "617b0c10-34b5-4569-8fd7-204186715487",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 👾 Emoji in my strings?\n\n*It's more likely than you think.*\n\nPython strings aren't just limited to characters that appear on an English-language keyboard. Characters from other languages and writing systems can appear in Python strings. So can special symbols such as emoji:\n\n```python\n>>> print(\"Snakes! 🐍🐍🐍\")\nSnakes! 🐍🐍🐍\n```\nThere is a Python module called `unicodedata` that lets you look up characters by name, including emoji:\n\n```python\n>>> import unicodedata\n>>> unicodedata.lookup(\"snake\")\n'🐍'\n>>> unicodedata.lookup(\"cat\")\n'🐈'\n```\n\nEmoji are usually wider on screen than letters or numbers; in a monospaced font they usually take up the space of two characters. They also take up more computer memory. But the length of a Python string depends only on the number of characters in it, _not_ on what kind of characters they are:\n\n```python\n>>> len(\"🐍\")\n1\n>>> len(\"🐍🐍🐍\")\n3\n>>> len(\"蛇 = 🐍\")\n5\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 778820,
          "key": "e6858270-0236-40eb-be35-eb678d929924",
          "title": "Looping over things",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6858270-0236-40eb-be35-eb678d929924",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 778822,
              "key": "9a787c29-a46d-4c46-b4f4-ee0bb89159e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over lists\n\nWhen you were working with turtles, you used lists with `for` loops. To make sure the concept is fresh in your mind, here's an example you can try in your terminal:",
              "instructor_notes": ""
            },
            {
              "id": 779001,
              "key": "3702cc5b-9647-447d-b57d-2d0a734514a7",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3702cc5b-9647-447d-b57d-2d0a734514a7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Run this loop in the terminal."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "```text\n>>> for thing in [\"some\", \"list\", \"of\", \"things\"]:\n...     print(thing)\n... \n```"
            },
            {
              "id": 779002,
              "key": "fc34e5cc-833e-4467-b8aa-a57e5f661e17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Each time this loop runs, one of the items in the list will get assigned to the `thing` variable, and then printed out. So by the time the loop has finished running, you'll see each of the items from the list printed out:\n\n```text\nsome\nlist\nof\nthings\n```\n\nWhen we use a list with a loop, we refer to it as \"looping over a list\". But lists aren't the only thing you can loop over ...",
              "instructor_notes": ""
            },
            {
              "id": 778846,
              "key": "1c92fa03-6589-4e18-83e9-77682ffcdf65",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over strings",
              "instructor_notes": ""
            },
            {
              "id": 779004,
              "key": "b4608636-3ae4-480f-8ac5-59b65c7e42b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can also loop over strings, and you do so in exactly the same way. Here's an example you can try for yourself:",
              "instructor_notes": ""
            },
            {
              "id": 779006,
              "key": "0daa711a-453a-4901-84ae-81f05f04a9a2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0daa711a-453a-4901-84ae-81f05f04a9a2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Give this a try in your terminal, and see what gets printed out:\n\n```text\n>>> for thing in \"Hello!\":\n...     print(thing)\n... \n```\n\nBased on the results, how many times do you think the loop ran? (Put another way, how many times did the line `print(thing)` run?)",
                "answers": [
                  {
                    "id": "a1541387973232",
                    "text": "1 time.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541388048760",
                    "text": "3 times.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541388057952",
                    "text": "6 times.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 779007,
              "key": "ca0464d6-e351-4575-9df6-f31649d64b89",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When you ran the above loop, you should have seen this in your terminal:\n\n```text\nH\ne\nl\nl\no\n!\n```\n\nWhen we loop over a string, the loop runs one time for each character in that string. So this loop ran six times, and each time it ran, it assigned the next character in the string to the `thing` variable.\n\nActually, `thing` is not a great name for that variable. Since the variable gets assigned characters, we might call it `character` or maybe `ch` for short:\n\n```python\nfor ch in \"Hello!\":\n    print(ch)\n```\n\nThis ability to loop over the characters in a string is very handy. For example, if we combine this with an `if` test, we can check all of the letters in a string—and have a certain block of code only run when a particular character is detected.\n\nHere's a (silly) example:\n\n```python\nfor ch in \"Hello!\":\n    print(ch)\n    if ch == \"!\":\n        print(\"I'm excited too!!!\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 779034,
              "key": "176d0866-0462-4d45-92fd-06387c8437b4",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "176d0866-0462-4d45-92fd-06387c8437b4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "If there is a `?` in the `message`, then print `Sense much curiosity in you, I do.`",
                "If there is a `!` in the `message`, then print `Enthusiastic, you are.`",
                "To try it out, open a new terminal and run `python3 looping.py`."
              ],
              "positive_feedback": "The code is strong with this one.",
              "video_feedback": null,
              "description": "Here's another silly example—in the workspace below, you'll see there's code that gets input from the user and stores it in a variable called `message`.\n\nComplete the code so that it checks the `message` for exclamation marks `!` (like above) and also question marks `?`, and prints a different message depending on which one it finds."
            },
            {
              "id": 778930,
              "key": "600cf7a6-2c5b-4268-9929-88ab1178c1de",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c778820xGENERICm03jjj3w",
              "pool_id": "webterminal",
              "view_id": "generic-t9sum",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/looping.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 779037,
              "key": "dfe0adc8-898e-497e-acf6-fc0771524ad2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 779036,
              "key": "1cd072cc-cc96-49e1-af99-1f7f81cbc362",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nmessage = input(\"What do you have to say, hm?\\n\")\n\nfor ch in message:\n    if ch == \"?\":\n        print(\"Sense much curiosity in you, I do.\")\n    if ch == \"!\":\n        print(\"Enthusiastic, you are.\")\n```\n\n----",
              "instructor_notes": ""
            },
            {
              "id": 779457,
              "key": "1d06f4f1-339b-40c7-9d77-217271bc5ab0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, now let's look at some less silly examples!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 779455,
          "key": "a8a14b79-5e3f-4805-bf4c-56bdb858b9ab",
          "title": "Counting things (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a8a14b79-5e3f-4805-bf4c-56bdb858b9ab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 779456,
              "key": "c3583b64-ab67-4555-93ec-5a2e966ffbcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Counting things (1/2)\n\nHere's our goal on this page:\n> Write some code that takes a string and counts the number of times a particular character occurs in that string.\n\nFor example, if we picked the string `bonobos` and the letter `o`, then the result should be `3`.\n\nWe can accomplish this task using a `for` loop and an `if` test. It might look something like this:\n\n```python\nfor ch in \"bonobos\":\n    if ch == \"o\":\n        # Increase the count by one\n```\n\nWe loop over the string, checking each character. While we do this, we keep a running total, or count, of how many times we've seen the letter `o`. Or put another way, `if` we see an `o`, we increase the count by `1`.\n\nBut how do we do that?",
              "instructor_notes": ""
            },
            {
              "id": 779458,
              "key": "eaa0e44d-79ad-44a4-91ef-0266f13531dc",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eaa0e44d-79ad-44a4-91ef-0266f13531dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The trick is to use code that looks like this:\n\n```python\n>>> n = 1\n>>> n = n + 1\n>>> n\n```\n\nRun this in the Python interactive interpreter. What do you get?",
                "answers": [
                  {
                    "id": "a1541425947718",
                    "text": "`n` now has a value of `1`",
                    "is_correct": false
                  },
                  {
                    "id": "a1541426075389",
                    "text": "`n` now has a value of `2`",
                    "is_correct": true
                  },
                  {
                    "id": "a1541426078605",
                    "text": "`n` now has a value of `3`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 779459,
              "key": "f26771ae-9294-460f-bf7b-a9622e53fc18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So what exactly is happening with this code?\n\n```python\nn = n + 1\n```\nThe key thing to understand is that **the code on the right side of the assignment operator, `=`,  runs first**. So Python first evaluates `n + 1`. We assigned `n` a value of `1`, so `n + 1` is equivalent to `1 + 1`, or `2`.\n\nIt then assigns the `2` as the new value of `n`:\n\n```python\nn = 2\n```\n\nSo `n = n + 1` counts up by `1`!\n\nThis is an extremely common and useful technique that you will see used in programming all the time.",
              "instructor_notes": ""
            },
            {
              "id": 779488,
              "key": "95058f42-d91f-4e6c-823a-b15adf167d38",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "95058f42-d91f-4e6c-823a-b15adf167d38",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Let's make sure this idea is solid. For each of these blocks of code, see if you can figure out what the final value of the variable would be."
                },
                "concepts_label": "Code",
                "answers_label": "Value of the variable",
                "concepts": [
                  {
                    "text": "```python\nx = 0\nx = x + 2\nx = x + 3\n```",
                    "correct_answer": {
                      "id": "a1541439140207",
                      "text": "5"
                    }
                  },
                  {
                    "text": "```python\ncount = 1\ncount = count + 1\ncount = count + 1\ncount = count + 1\n```",
                    "correct_answer": {
                      "id": "a1541439393242",
                      "text": "4"
                    }
                  },
                  {
                    "text": "```python\ni = 2\ni = i + 2\ni = i + 2\n```",
                    "correct_answer": {
                      "id": "a1541439475048",
                      "text": "6"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541439140207",
                    "text": "5"
                  },
                  {
                    "id": "a1541439524209",
                    "text": "2"
                  },
                  {
                    "id": "a1541439475048",
                    "text": "6"
                  },
                  {
                    "id": "a1541439525498",
                    "text": "3"
                  },
                  {
                    "id": "a1541439520970",
                    "text": "1"
                  },
                  {
                    "id": "a1541439393242",
                    "text": "4"
                  }
                ]
              }
            },
            {
              "id": 779508,
              "key": "7f8c1995-f8ab-4492-8b67-3fbe18039b39",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, now we are ready to apply this to our goal—counting the number of times a given character appears in a given string.",
              "instructor_notes": ""
            },
            {
              "id": 779504,
              "key": "996d9794-5b54-4b37-989a-8f917a0f382b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "996d9794-5b54-4b37-989a-8f917a0f382b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Before we can start counting up, we have to assign the initial value of the `count` variable, like this:\n\n```python\ncount = 0\n```\nWhere do you think we should place that line in our code?\n\n```python\nfor ch in \"bonobos\":\n    if ch == \"o\":\n        # Increase the count by one\n```",
                "answers": [
                  {
                    "id": "a1541441340475",
                    "text": "Before the `for` loop.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541441435668",
                    "text": "Inside the `for` loop.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541441505724",
                    "text": "After the `for` loop.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 779515,
              "key": "f3cb2a3e-4df7-46dd-a81b-7e4de3d1b188",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f3cb2a3e-4df7-46dd-a81b-7e4de3d1b188",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Set the initial value of `count` to `0`.",
                "`if` the current character is an `o`, increase `count` by `1`.",
                "Finally, `print` the final value of `count`.",
                "To run your code, open a new terminal and run `python3 counting_characters.py`."
              ],
              "positive_feedback": "**Woohoo!**\n\nOn the next page, we'll see how we can improve on this.",
              "video_feedback": null,
              "description": "Below is the code we started with on this page. See if you can finish it off so that it counts the number of times `o` appears in the string `\"bonobos\"`.\n\nThe code you add should do the following things:"
            },
            {
              "id": 779492,
              "key": "493d9247-1acc-4604-8f49-23c84c8f2f24",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c779455xGENERICjcysn0i7",
              "pool_id": "webterminal",
              "view_id": "generic-05zh9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/counting_characters.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 779756,
              "key": "7ecc8cb9-10fe-4ce2-8e55-b49266deb198",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div id=\"spoiler-alert\" style=\"background-color: #a4e4f5;\">\n<span style=\"padding-top: 8px; padding-left: 8px; padding-right: 8px; display: block;\"><h1 style=\"margin: 0;\"> ⚠️ Spoiler alert!</h1></span>\n<span style=\"padding: 8px; display: block;\">**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!</span>\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 779755,
              "key": "0fb0399a-30cc-457d-ad65-112736e00992",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\ncount = 0\n\nfor ch in \"bonobos\":\n    if ch == \"o\":\n        count = count + 1\n        \nprint(count)\n```\n\n----",
              "instructor_notes": ""
            },
            {
              "id": 801118,
              "key": "ae05838b-2a00-498d-a1df-1724d9c2682f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ae05838b-2a00-498d-a1df-1724d9c2682f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "To get the above code to work, we had to have the line `count = 0`. But why?\n\nTry modifying the code to simply remove that line altogether:\n\n```python\nfor ch in \"bonobos\":\n    if ch == \"o\":\n        count = count + 1\nprint(count)\n```\n\nTry this in the workspace. What result do you get?",
                "answers": [
                  {
                    "id": "a1545593143720",
                    "text": "`0`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545593273109",
                    "text": "`6`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545593297580",
                    "text": "`NameError: name 'count' is not defined`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 801119,
              "key": "15e74f04-4728-4082-a35d-7b595af7e580",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Can you see why we get this error?\n\nIt's because of the line `count = count + 1` . Python tries to evaluate the right side, `count + 1`. But we haven't set `count` to refer to anything yet, so Python doesn't know what this means. We have to give the variable an initial value before we can add to that value.",
              "instructor_notes": ""
            },
            {
              "id": 801120,
              "key": "f8bad1ef-906d-434b-8a41-94c5378ee193",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f8bad1ef-906d-434b-8a41-94c5378ee193",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OK, that explains why we need the line `count = 0`. But why does this line have to go *before* the loop, rather than *inside* the loop?\n\nGo ahead and try putting it inside:\n\n```python\nfor ch in \"bonobos\":\n    count = 0\n    if ch == \"o\":\n        count = count + 1\nprint(count)\n```\n\nWhat result do you get now? (And can you guess at *why* this is happening?)",
                "answers": [
                  {
                    "id": "a1545593515646",
                    "text": "`0`",
                    "is_correct": true
                  },
                  {
                    "id": "a1545593594060",
                    "text": "`6`",
                    "is_correct": false
                  },
                  {
                    "id": "a1545593596656",
                    "text": "`NameError: name 'count' is not defined`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 801121,
              "key": "8d0dd597-e6c5-43d3-9b78-ab8e8192463b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So why does this happen?\n\nIt's because the line `count = 0` gets run *every time the loop runs*. So `count` keeps getting reset back to `0` over and over, rather than counting up like we want it to.\n\nThat is why we have to set the initial value of the `count` variable *before* the loop.\n\nThis is a common pattern that you will see in code, so keep it in mind!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 779759,
          "key": "181226b5-5776-4abc-ab76-69f364b5930a",
          "title": "Counting things (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "181226b5-5776-4abc-ab76-69f364b5930a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 779774,
              "key": "b272deac-dfdc-4107-8fa3-4e849a840ddb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Counting things (2/2)\n\nOur code from the last page works fine, but it's not very flexible—currently, it only checks for the letter `o` in a specific string (`\"bonobos\"`). If we wanted to check other characters and other strings, we would have to re-write the code each time.\n\nInstead, it would be good to modify it so that we can give it *any* character and *any* string.\n\nWe did something similar in an earlier lesson, when we created some specific code for drawing a square—but then decided it would be more useful if the code could draw any polygon. The solution in that case was to turn the code into a *function*—and that's the solution here as well.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 779783,
              "key": "31168778-542b-4db9-8dee-a115fb7aac08",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "31168778-542b-4db9-8dee-a115fb7aac08",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add a `def` statement for a function called `count_character`.",
                "Add parameters for the string to be searched, and the character to count.",
                "Use these parameters in the body of the function, in place of the hard-coded strings that are currently there.",
                "Test your function with the provided `print` statements (you can add your own too, if you like!)."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find the code from before. Your job is to turn it into a general function called `count_character`."
            },
            {
              "id": 779776,
              "key": "b7b6bc03-458b-4e58-810f-0024357cb058",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c779759xGENERICatfm4sjb",
              "pool_id": "webterminal",
              "view_id": "generic-uqhn0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/counting_characters.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 779796,
              "key": "98a52ee6-2dc9-4004-b80a-ea240248e23c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div id=\"spoiler-alert\" style=\"background-color: #a4e4f5;\">\n<span style=\"padding-top: 8px; padding-left: 8px; padding-right: 8px; display: block;\"><h1 style=\"margin: 0;\"> ⚠️ Spoiler alert!</h1></span>\n<span style=\"padding: 8px; display: block;\">**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!</span>\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 779785,
              "key": "e9222124-de48-46cd-9a01-43925f390058",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our code:\n\n```python\n\ndef count_character(string, target):\n    count = 0\n    for ch in string:\n        if ch == target:\n            count = count + 1\n    return count\n\n```\n\nYours may look different, such as if you chose different names for the function parameters.\n\n----",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 521399,
          "key": "32c890ac-b7ef-4a1c-aad9-0182b5c738f0",
          "title": "Indexing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32c890ac-b7ef-4a1c-aad9-0182b5c738f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 779886,
              "key": "651d1ec3-1f6d-4d5b-bbdb-cfa6495de572",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Indexing\n\nWe've seen that lists and strings have some things in common. Strings and lists both:\n* Have a *length*.\n* Are *sequences*.\n* Can be *looped over*.\n\nIn this next video, Kelly briefly reviews these ideas, and then adds another thing that strings and lists have in common—something called **indexing**.",
              "instructor_notes": ""
            },
            {
              "id": 674931,
              "key": "69bbd70a-7fb7-4778-8b3f-d9134880f5ec",
              "title": "Python: Indexing into strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HwHYv_qX3ps",
                "china_cdn_id": "HwHYv_qX3ps.mp4"
              }
            },
            {
              "id": 779896,
              "key": "bee80b09-6158-4870-b154-03b13fd99f7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There may be a lot of words to describe it, but the underlying idea of *indexing* is simple: It's just a way to give a number to each item in a sequence, so that you can tell Python which item you're referring to.\n\nIt's no different from saying something like, \"Hey Python, give me the fourth item in that list.\" or \"Hey Python, give me the second character in that string.\"\n\nNote that indexes start at `0`, not `1`. So the first item in a sequence would have an index of `0`, while the second would have an index of `1`, the third an index of `2`, and so on.",
              "instructor_notes": ""
            },
            {
              "id": 779889,
              "key": "02cf30a6-adaf-455b-8955-1568f37b1c86",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "02cf30a6-adaf-455b-8955-1568f37b1c86",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "The best way to get comfortable with indexing is just to play with it a lot. This is a great example of how *interactive mode* is useful for trying out short pieces of code to see what they evaluate to.\n\nHere are some examples you can try—fire up the Python interpreter and see what results you get."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> \"abc\"[0]\n```\n",
                    "correct_answer": {
                      "id": "a1541509807800",
                      "text": "`'a'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"abc\"[2]\n```",
                    "correct_answer": {
                      "id": "a1541510891748",
                      "text": "`'c'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"waffles\"[1]\n```",
                    "correct_answer": {
                      "id": "a1541510930076",
                      "text": "`'a'`"
                    }
                  },
                  {
                    "text": "```text\n>>> dinner = \"falafels\"\n>>> dinner[4]\n```",
                    "correct_answer": {
                      "id": "a1541511058820",
                      "text": "`'f'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541510930076",
                    "text": "`'a'`"
                  },
                  {
                    "id": "a1541510891748",
                    "text": "`'c'`"
                  },
                  {
                    "id": "a1541511058820",
                    "text": "`'f'`"
                  },
                  {
                    "id": "a1541509807800",
                    "text": "`'a'`"
                  }
                ]
              }
            },
            {
              "id": 779901,
              "key": "1bacc3b8-9d22-4411-b253-fdfa6c21d408",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1bacc3b8-9d22-4411-b253-fdfa6c21d408",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And here are some more—with lists this time, instead of strings.\n\n> **Note:** It can be a little confusing that lists **and** the indexing operator both use square brackets `[ ]`. But the indexing operator will always come at the end, so you can tell it apart from a list by the context."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> [\"a\", \"b\", \"c\"][2]\n```",
                    "correct_answer": {
                      "id": "a1541511713303",
                      "text": "`'c'`"
                    }
                  },
                  {
                    "text": "```text\n>>> [1, 2, 3, 4][0]\n```",
                    "correct_answer": {
                      "id": "a1541511943214",
                      "text": "`1`"
                    }
                  },
                  {
                    "text": "```text\n>>> colors = [\"red\", \"green\", \"blue\"]\n>>> colors[1]\n```",
                    "correct_answer": {
                      "id": "a1541512007393",
                      "text": "`'green'`"
                    }
                  },
                  {
                    "text": "```text\n>>> countdown = [3, 2, 1, \"blastoff!\"]\n>>> countdown[3]\n```",
                    "correct_answer": {
                      "id": "a1541512135481",
                      "text": "`'blastoff!'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541512074979",
                    "text": "`2`"
                  },
                  {
                    "id": "a1541512060283",
                    "text": "`\"red\"`"
                  },
                  {
                    "id": "a1541512090444",
                    "text": "`'b'`"
                  },
                  {
                    "id": "a1541511943214",
                    "text": "`1`"
                  },
                  {
                    "id": "a1541512135481",
                    "text": "`'blastoff!'`"
                  },
                  {
                    "id": "a1541512086721",
                    "text": "`0`"
                  },
                  {
                    "id": "a1541512067705",
                    "text": "`\"blue\"`"
                  },
                  {
                    "id": "a1541512007393",
                    "text": "`'green'`"
                  },
                  {
                    "id": "a1541511713303",
                    "text": "`'c'`"
                  }
                ]
              }
            },
            {
              "id": 527755,
              "key": "4d729907-3fb8-43d6-a4bf-13d2ef40be6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Negative indexes\n\nYou can also use negative numbers as indexes. If `word` is a string, then `word[-1]` is the _last_ character of that string, and `word[-2]` is the second-last, and so forth.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 527756,
              "key": "b084f724-79eb-496f-be7d-f4dd7a591e8e",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b084f724-79eb-496f-be7d-f4dd7a591e8e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you wanted to get the letter `\"s\"` from this string —\n```python\nword = \"Fish\"\n```\n— which expressions would do it?\n\nThere are **two** right answers here; mark **both** of them.",
                "answers": [
                  {
                    "id": "a1517352377174",
                    "text": "`word[3]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1517352453966",
                    "text": "`word[2]`",
                    "is_correct": true
                  },
                  {
                    "id": "a1517352460861",
                    "text": "`word[-1]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1517352465577",
                    "text": "`word[-2]`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 782639,
              "key": "92030e7d-de0f-478c-9037-170265360926",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Indexing with comparisons",
              "instructor_notes": ""
            },
            {
              "id": 782636,
              "key": "d97a96a7-58e7-41fd-b389-d7c0cff9d286",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d97a96a7-58e7-41fd-b389-d7c0cff9d286",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "There are all kinds of ways we can combine indexing with other tools we've already learned. For example, here are some snippets of code that use indexing with the equality operator `==` to give a boolean value (`True` or `False`).\n\n\nYou can try these for yourself in interactive mode."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> s = \"Karl\"\n>>> s[0] == \"K\"\n```",
                    "correct_answer": {
                      "id": "a1541982272373",
                      "text": "True"
                    }
                  },
                  {
                    "text": "```text\n>>> s = \"Abe\"\n>>> s[0] == \"K\"\n```",
                    "correct_answer": {
                      "id": "a1541982463165",
                      "text": "False"
                    }
                  },
                  {
                    "text": "```text\n>>> len(\"Karl\") == len(\"Kelly\")\n```",
                    "correct_answer": {
                      "id": "a1541982487040",
                      "text": "False"
                    }
                  },
                  {
                    "text": "```text\n>>> len(\"Karl\") + 1 == len(\"Kelly\")\n```",
                    "correct_answer": {
                      "id": "a1541982674216",
                      "text": "True"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541982463165",
                    "text": "False"
                  },
                  {
                    "id": "a1541982674216",
                    "text": "True"
                  },
                  {
                    "id": "a1541982272373",
                    "text": "True"
                  },
                  {
                    "id": "a1541982487040",
                    "text": "False"
                  }
                ]
              }
            },
            {
              "id": 782646,
              "key": "e0d366cb-02e0-4da5-900f-367a00cd3ba0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e0d366cb-02e0-4da5-900f-367a00cd3ba0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "If you `print` out `start_K(\"Kelly\")`, it should display `True`",
                "If you `print` out `start_K(\"Abe\")`, it should display `False`"
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below (or in your own code editor), write a function called `start_K` that checks whether a string starts with the letter `K`.\n\nIf the string starts with `K`, the function should return `True`. If it doesn't, the function should return `False`."
            },
            {
              "id": 782645,
              "key": "1d61b17a-5105-47e0-905a-dfc84f08e8c4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c521399xGENERIC5n4x90kx",
              "pool_id": "webterminal",
              "view_id": "generic-8l1do",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/starts_with.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 782649,
              "key": "852ded15-221e-4404-8505-af05c7634aef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div id=\"spoiler-alert\" style=\"background-color: #a4e4f5;\">\n<span style=\"padding-top: 8px; padding-left: 8px; padding-right: 8px; display: block;\"><h1 style=\"margin: 0;\"> ⚠️ Spoiler alert!</h1></span>\n<span style=\"padding: 8px; display: block;\">**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!</span>\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 782648,
              "key": "496907f1-43b0-474e-98b8-2e28f51e3afa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\ndef start_K(s):\n    if s[0] == \"K\":\n        return True\n    else:\n        return False\n```\n\nAnd here's another that's quite a bit shorter:\n\n```python\ndef start_K(s):\n    return s[0] == \"K\"\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 780319,
          "key": "21044ee4-7217-492e-9d95-118236749e6d",
          "title": "The range function, revisited",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "21044ee4-7217-492e-9d95-118236749e6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 780321,
              "key": "5fb5c2cb-5391-4ba3-96f8-7c9613616f55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The range function, revisited",
              "instructor_notes": ""
            },
            {
              "id": 780323,
              "key": "ba7f179a-ae51-4f28-946c-f35d2374bc33",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Earlier, we used the `range` function with `for` loops. We saw that instead of using a list like this:\n\n```python\nfor side in [0, 1, 2, 3]:\n    amy.forward(100)\n    amy.right(90)\n```\n\nWe could use `range`:\n\n```python\nfor side in range(4):\n    amy.forward(100)\n    amy.right(90)\n```\n\nThere are a few things that the `range` function can do that we haven't explored—let's check them out now.",
              "instructor_notes": ""
            },
            {
              "id": 780327,
              "key": "d3bfe6d8-7159-443b-9353-201dc75f867e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d3bfe6d8-7159-443b-9353-201dc75f867e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that we can print things to the terminal, we can print out the values that the range function is giving us. Go ahead and give this a try in your terminal:\n\n```text\n>>> for n in range(4):\n...     print(n)\n```\n\nWhat do you see when you run the code?",
                "answers": [
                  {
                    "id": "a1541544926200",
                    "text": "It prints the numbers `0`, `1`, `2`, and `3`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1541545205594",
                    "text": "It prints the numbers `1`, `2`, `3`, and `4`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541545206256",
                    "text": "It prints the numbers `4`, `4`, `4`, and `4`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 780329,
              "key": "ec05dfbc-5185-4df0-b31b-3e6d6b65a5d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A key thing to remember about `range` is that when you pass it a number, it gives you back a sequence that goes **up to but does not include the number**. So `range(4)` provides a sequence that goes up to—but does not include—`4`. You'll sometimes hear this described as an **exclusive** range, because the number you give is *excluded*.\n\nAnother thing you may remember about range is that it starts at `0`, not `1`. So `range[4]` is equivalent to `[0, 1, 2, 3]`.\n\nOr at least, that's the default behavior ...",
              "instructor_notes": ""
            },
            {
              "id": 780330,
              "key": "14ce629c-ef6d-444c-8486-c38544ee116b",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14ce629c-ef6d-444c-8486-c38544ee116b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "So far, we have only ever passed the `range` function *one* argument. But it turns out that it can accept up to *three* arguments. We'll talk about what each one does in a moment, but first, give them a try just to see what happens.\n\nHere are some bits of code that you can try. What result do you get for each?"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> for n in range(1, 4):\n...     print(n)\n```",
                    "correct_answer": {
                      "id": "a1541545679810",
                      "text": "1  \n2  \n3  "
                    }
                  },
                  {
                    "text": "```text\n>>> for n in range(97, 101):\n...     print(n)\n```",
                    "correct_answer": {
                      "id": "a1541545786761",
                      "text": "97  \n98  \n99  \n100"
                    }
                  },
                  {
                    "text": "```text\n>>> for n in range(0, 10, 2):\n...     print(n)\n```",
                    "correct_answer": {
                      "id": "a1541545834594",
                      "text": "0  \n2  \n4  \n6  \n8"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541545679810",
                    "text": "1  \n2  \n3  "
                  },
                  {
                    "id": "a1541547037937",
                    "text": "97  \n98  \n99  \n100  \n101"
                  },
                  {
                    "id": "a1541545786761",
                    "text": "97  \n98  \n99  \n100"
                  },
                  {
                    "id": "a1541547021713",
                    "text": "1  \n2  \n3  \n4"
                  },
                  {
                    "id": "a1541545834594",
                    "text": "0  \n2  \n4  \n6  \n8"
                  }
                ]
              }
            },
            {
              "id": 780333,
              "key": "2fc62591-b9d4-45d8-9210-4f5c6fed5ab2",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2fc62591-b9d4-45d8-9210-4f5c6fed5ab2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "So we can pass `range` up to three arguments, like in the example we just tried:\n\n```python\nrange(0, 10, 2)\n```\n\nBased on the results you got for this example, take a guess at what each of the three arguments is telling the `range` function to do."
                },
                "concepts_label": "What it does",
                "answers_label": "Which parameter?",
                "concepts": [
                  {
                    "text": "`0`",
                    "correct_answer": {
                      "id": "a1541546459052",
                      "text": "Start with this number."
                    }
                  },
                  {
                    "text": "`10`",
                    "correct_answer": {
                      "id": "a1541546540002",
                      "text": "Go up to (but don't include) this number."
                    }
                  },
                  {
                    "text": "`2`",
                    "correct_answer": {
                      "id": "a1541546585924",
                      "text": "Count up by this number."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541546459052",
                    "text": "Start with this number."
                  },
                  {
                    "id": "a1541546540002",
                    "text": "Go up to (but don't include) this number."
                  },
                  {
                    "id": "a1541546585924",
                    "text": "Count up by this number."
                  }
                ]
              }
            },
            {
              "id": 780337,
              "key": "50b0c562-c8b7-44ef-aae5-d1f8bc0b1e38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Hopefully that gave you a feeling for what the three `range` parameters do:\n* The first parameter is the number to **start** with.\n* The second parameter is the number to **stop** at (or rather, to stop *before*, since it's excluded).\n* The third parameter is the **step** size (i.e., how large a step to take when counting up).\n\nNotice that **start** and **step** are optional—if you leave either (or both) out, the function will just go with the defaults—a start of `0` and a step of `1`.",
              "instructor_notes": ""
            },
            {
              "id": 780340,
              "key": "fd3a3a20-7d22-4958-89e9-696140a482f8",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fd3a3a20-7d22-4958-89e9-696140a482f8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here is a set of `range` calls. For each, match it with an equivalent call—that is, one that looks different but would do the same thing."
                },
                "concepts_label": "This ...",
                "answers_label": "Is equivalent to ...",
                "concepts": [
                  {
                    "text": "`range(5)`",
                    "correct_answer": {
                      "id": "a1541547464624",
                      "text": "`range(0, 5)`"
                    }
                  },
                  {
                    "text": "`range(4)`",
                    "correct_answer": {
                      "id": "a1541547680026",
                      "text": "`range(0, 4, 1)`"
                    }
                  },
                  {
                    "text": "`range(2, 5)`",
                    "correct_answer": {
                      "id": "a1541547713834",
                      "text": "`range(2, 5, 1)`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541547713834",
                    "text": "`range(2, 5, 1)`"
                  },
                  {
                    "id": "a1541547464624",
                    "text": "`range(0, 5)`"
                  },
                  {
                    "id": "a1541547680026",
                    "text": "`range(0, 4, 1)`"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 780257,
          "key": "84d1bf9e-5f6c-444d-ab1c-a338cd2a78b9",
          "title": "Length and indexing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84d1bf9e-5f6c-444d-ab1c-a338cd2a78b9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 780266,
              "key": "9cb5348b-f05b-43db-ac6a-83f7674dc3d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Length and indexing",
              "instructor_notes": ""
            },
            {
              "id": 780290,
              "key": "1f4be2cc-cd8c-41eb-8535-a39ae413dd38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We just learned about *indexing*, and also about how to get the length of a string using the `len` function. And previously, we used the `range` function with `for` loops. You've used each of these things separately, but it turns out that there are some things you can do by using them together. Let's play around and see what we can get...",
              "instructor_notes": ""
            },
            {
              "id": 782687,
              "key": "4b2695b9-d2d8-4bb8-bd89-280962d7c035",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4b2695b9-d2d8-4bb8-bd89-280962d7c035",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some different bits of code. Go ahead and try them (in the order shown here) in your own terminal.\n\nAs usual, it tends to help if you try to *predict* what each will do before you run it."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> range(3)\n```",
                    "correct_answer": {
                      "id": "a1542038123339",
                      "text": "range(0, 3)"
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> len(word)\n```",
                    "correct_answer": {
                      "id": "a1542038136514",
                      "text": "3"
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> range(len(word))\n```",
                    "correct_answer": {
                      "id": "a1542038145946",
                      "text": "range(0, 3)"
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> length = len(word)\n>>> range(length)\n```",
                    "correct_answer": {
                      "id": "a1542038170241",
                      "text": "range(0, 3)"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542038170241",
                    "text": "range(0, 3)"
                  },
                  {
                    "id": "a1542038123339",
                    "text": "range(0, 3)"
                  },
                  {
                    "id": "a1542038136514",
                    "text": "3"
                  },
                  {
                    "id": "a1542038145946",
                    "text": "range(0, 3)"
                  }
                ]
              }
            },
            {
              "id": 782691,
              "key": "05edc0a5-2e82-43e6-8e4c-d66aac31cc13",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you can see, some of these bits of code seem to have the same result. For example, `range(3)` and `range(length(word))` did the same thing.\n\nAt this moment, this might seem kind of pointless. Why would we ever want to do `range(length(word))` instead of `range(3)`?\n\nWhen we just look at these pieces of code by themselves, there is no reason for it. But we'll start putting these things together to form more complex code later.\n\nIf we just jumped directly into those more complex pieces of code, it might get confusing very quickly. So that's why it's important to look at these short snippets and get practice mentally recognizing what they do.",
              "instructor_notes": ""
            },
            {
              "id": 780342,
              "key": "834878cd-2d56-4621-bfd9-882856ca3914",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "834878cd-2d56-4621-bfd9-882856ca3914",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And here are some more. As you can see, these are a little more complex."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> for n in range(len(word)):\n...     print(n)\n```",
                    "correct_answer": {
                      "id": "a1541547937151",
                      "text": "0  \n1  \n2  "
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> length = len(word)\n>>> for n in range(length):\n...     print(n)\n```",
                    "correct_answer": {
                      "id": "a1541547969772",
                      "text": "0  \n1  \n2  "
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"yay\"\n>>> length = len(word)\n>>> for n in range(length):\n...     print(word[n])\n```",
                    "correct_answer": {
                      "id": "a1541548025412",
                      "text": "y  \na    \ny "
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1541547937151",
                    "text": "0  \n1  \n2  "
                  },
                  {
                    "id": "a1541548243295",
                    "text": "2"
                  },
                  {
                    "id": "a1541547969772",
                    "text": "0  \n1  \n2  "
                  },
                  {
                    "id": "a1541548248047",
                    "text": "range(1, 4)"
                  },
                  {
                    "id": "a1541548025412",
                    "text": "y  \na    \ny "
                  }
                ]
              }
            },
            {
              "id": 780347,
              "key": "a65ba185-3ed4-4dbf-9c98-8ee357cb7913",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a65ba185-3ed4-4dbf-9c98-8ee357cb7913",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now give this a try:\n\n```python\n>>> word = \"happy\"\n>>> for n in range(len(word)):\n...    print(n, word[n])\n```",
                "answers": [
                  {
                    "id": "a1541548601702",
                    "text": "Printed out the word `happy`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541548651405",
                    "text": "Printed the numbers `1` through `5`, each number on its own line.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541548663108",
                    "text": "Printed `0 h`, then `1 a`, `2 p`, and so forth: five lines, each with a number and letter.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 783901,
              "key": "e0a2015a-7a90-4a3e-83ba-fb4f21689d12",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Can you now see what `range(len(word))` does? It gives us a sequence of numbers that is exactly the same as the **index numbers** for the string. In other words, it gives us a way to loop over the index numbers of a string. This may not seem useful yet, but we will put it to use later in this lesson!",
              "instructor_notes": ""
            },
            {
              "id": 783900,
              "key": "a83c0d4f-ffe9-4a68-a9f0-8dc484f166bd",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a83c0d4f-ffe9-4a68-a9f0-8dc484f166bd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "The key idea here is this: When we are using a string with a loop, *we can loop over two different things.* We can loop over the **characters** themselves, or we can loop over the **index numbers** for those characters.\n\nSee if you can match each of these pieces of code with what it is looping over."
                },
                "concepts_label": "Code",
                "answers_label": "What does it do?",
                "concepts": [
                  {
                    "text": "```text\n>>> for e in range(len(\"foo\")):\n```",
                    "correct_answer": {
                      "id": "a1542319917088",
                      "text": "Loops over the **index positions**."
                    }
                  },
                  {
                    "text": "```text\n>>> for e in \"foo\":\n```",
                    "correct_answer": {
                      "id": "a1542319999671",
                      "text": "Loops over the **characters**."
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"foo\"\n>>> for e in word:\n```",
                    "correct_answer": {
                      "id": "a1542320362133",
                      "text": "Loops over the **characters**."
                    }
                  },
                  {
                    "text": "```text\n>>> word = \"foo\"\n>>> for e in range(len(word)):\n```",
                    "correct_answer": {
                      "id": "a1542320401318",
                      "text": "Loops over the **index positions**."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542319917088",
                    "text": "Loops over the **index positions**."
                  },
                  {
                    "id": "a1542320401318",
                    "text": "Loops over the **index positions**."
                  },
                  {
                    "id": "a1542320362133",
                    "text": "Loops over the **characters**."
                  },
                  {
                    "id": "a1542319999671",
                    "text": "Loops over the **characters**."
                  }
                ]
              }
            },
            {
              "id": 783904,
              "key": "1f5909c8-eeec-452c-a26a-a775761a0653",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1f5909c8-eeec-452c-a26a-a775761a0653",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's one loop:\n\n```text\n>>> word = \"yay\"\n>>> for n in range(len(word)):\n...     print(word[n])\n```\n\nAnd here's another:\n\n```text\n>>> word = \"yay\"\n>>> for ch in word:\n...     print(ch)\n```\n\nWould these print out the same thing? Or different things?",
                "answers": [
                  {
                    "id": "a1542320835661",
                    "text": "They print out the same thing.",
                    "is_correct": true
                  },
                  {
                    "id": "a1542321060397",
                    "text": "They print out different things.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 783905,
              "key": "27a5a363-1111-45d9-9efc-780d9522630a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Again, it may not be clear yet why it's useful to be able to loop over a string in these different ways. We'll come back to this a bit later in the lesson, and use it to do something more than simply print things.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 518443,
          "key": "57c60d83-8cae-4842-a88f-6c10ef8f1333",
          "title": "IndexError",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "57c60d83-8cae-4842-a88f-6c10ef8f1333",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674935,
              "key": "7eead486-9fbf-47e4-b292-b51dbe1a1519",
              "title": "Python: IndexError and tracebacks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FUWidort1gc",
                "china_cdn_id": "FUWidort1gc.mp4"
              }
            },
            {
              "id": 527765,
              "key": "b1f69c7c-4626-4319-91a6-f92e944a0aeb",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b1f69c7c-4626-4319-91a6-f92e944a0aeb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Which line of code produces which kind of error?\n\n(Assume that you just started Python and no new variables have been defined.)"
                },
                "concepts_label": "Line of code",
                "answers_label": "Kind of error",
                "concepts": [
                  {
                    "text": "`2 + \"bears\"`",
                    "correct_answer": {
                      "id": "a1517354265029",
                      "text": "`TypeError`"
                    }
                  },
                  {
                    "text": "`print(donkey)`",
                    "correct_answer": {
                      "id": "a1517354303250",
                      "text": "`NameError`"
                    }
                  },
                  {
                    "text": "`import explosion`",
                    "correct_answer": {
                      "id": "a1517354412952",
                      "text": "`ModuleNotFoundError`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1517354265029",
                    "text": "`TypeError`"
                  },
                  {
                    "id": "a1517354412952",
                    "text": "`ModuleNotFoundError`"
                  },
                  {
                    "id": "a1517354516305",
                    "text": "`ValueError`"
                  },
                  {
                    "id": "a1517354303250",
                    "text": "`NameError`"
                  }
                ]
              }
            },
            {
              "id": 780231,
              "key": "f7ebeb74-f865-4266-96d3-bc16a950926f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 0️⃣ The empty string\n\nA string with no characters in it is an **empty string**:\n```\nno_words = \"\"\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 780233,
              "key": "7c9d8ca2-7a39-4fcd-a0b3-276554566ee0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7c9d8ca2-7a39-4fcd-a0b3-276554566ee0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Create an empty string variable in the Python interpreter, and then try to index into it:\n```python\nno_words = \"\"\nprint(no_words[0])\n```\nWhat do you see?",
                "answers": [
                  {
                    "id": "a1541542379423",
                    "text": "The word `Nothing`",
                    "is_correct": false
                  },
                  {
                    "id": "a1541542398943",
                    "text": "An error message: `IndexError: string index out of range`",
                    "is_correct": true
                  },
                  {
                    "id": "a1541542399759",
                    "text": "No message at all; just the `>>>` prompt.",
                    "is_correct": false
                  },
                  {
                    "id": "a1541542400384",
                    "text": "A ravenous wolf that devours your terminal.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 518672,
              "key": "61521084-3488-4759-a30c-eade5f84219b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# IndexError\n\nAs you saw above, the `IndexError` message happens when you're trying to use an index to access a particular item, but *there is no item with that index*. In the above case, the code tries to access the character at index `0`, but there's no character with that index.\n\nHere's another example of code that will cause an `IndexError`:\n\n```\nword = \"dog\"\nfor n in range(10):\n  print(word[n])\n```\n\nThe variable `n` will range from `0` up to `9` as the loop runs ... which means that the code will try to access `word[0]`, then `word[1]`, then `word[2]` ... then `word[3]`, which will crash with an `IndexError`.",
              "instructor_notes": ""
            },
            {
              "id": 533883,
              "key": "81716f76-f6c2-49d0-880f-8a64a68bd49b",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "81716f76-f6c2-49d0-880f-8a64a68bd49b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these approaches would let you avoid `IndexError` when looping over a string?\n\n(Assume the string variable is named `word`, as in the example above.)\n\nMark **all** the answers that are correct.",
                "answers": [
                  {
                    "id": "a1517865620312",
                    "text": "Don't use indexing at all: just use `for char in word:`",
                    "is_correct": true
                  },
                  {
                    "id": "a1517865670017",
                    "text": "Use the length of the string: `for n in range(len(word)):`",
                    "is_correct": true
                  },
                  {
                    "id": "a1517865688349",
                    "text": "You can't; every loop over a string can always produce `IndexError`.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 518441,
          "key": "d57b0174-87e4-4e15-9121-1e4dcd2f8df1",
          "title": "Slicing (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d57b0174-87e4-4e15-9121-1e4dcd2f8df1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674936,
              "key": "15730ede-576c-40ca-b9d2-2acbf1a46594",
              "title": "Python: Slicing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ACvGn8MbH6M",
                "china_cdn_id": "ACvGn8MbH6M.mp4"
              }
            },
            {
              "id": 782693,
              "key": "8adfdc54-c876-404d-ba36-a8881a7dc1e1",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8adfdc54-c876-404d-ba36-a8881a7dc1e1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some examples to play with.\n\nSee if you can predict what each will do before you try it for yourself."
                },
                "concepts_label": "Slice expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> \"python\"[0:2]\n```",
                    "correct_answer": {
                      "id": "a1542040503660",
                      "text": "`'py'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"python\"[1:5]\n```",
                    "correct_answer": {
                      "id": "a1542040682808",
                      "text": "`'ytho'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"python\"[0:5]\n```",
                    "correct_answer": {
                      "id": "a1542040711824",
                      "text": "`'pytho'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"python\"[0:6]\n```",
                    "correct_answer": {
                      "id": "a1542040740321",
                      "text": "`'python'`"
                    }
                  },
                  {
                    "text": "```text\n>>> \"python\"[:]\n```",
                    "correct_answer": {
                      "id": "a1542040749454",
                      "text": "`'python'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542040711824",
                    "text": "`'pytho'`"
                  },
                  {
                    "id": "a1542040503660",
                    "text": "`'py'`"
                  },
                  {
                    "id": "a1542040740321",
                    "text": "`'python'`"
                  },
                  {
                    "id": "a1542040682808",
                    "text": "`'ytho'`"
                  },
                  {
                    "id": "a1542040749454",
                    "text": "`'python'`"
                  }
                ]
              }
            },
            {
              "id": 533929,
              "key": "c9c4dfd2-3720-4af7-a171-3f29140c8ace",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c9c4dfd2-3720-4af7-a171-3f29140c8ace",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And here are some more:"
                },
                "concepts_label": "Slice expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "`\"udacity\"[3:]`",
                    "correct_answer": {
                      "id": "a1517874736620",
                      "text": "`\"city\"`"
                    }
                  },
                  {
                    "text": "`\"new york city\"[:3]`",
                    "correct_answer": {
                      "id": "a1517874820876",
                      "text": "`\"new\"`"
                    }
                  },
                  {
                    "text": "`\"battle of yorktown\"[10:14]`",
                    "correct_answer": {
                      "id": "a1517874859757",
                      "text": "`\"york\"`"
                    }
                  },
                  {
                    "text": "`\"downtown newark\"[4:8]`",
                    "correct_answer": {
                      "id": "a1517874920616",
                      "text": "`\"town\"`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1517874736620",
                    "text": "`\"city\"`"
                  },
                  {
                    "id": "a1517874820876",
                    "text": "`\"new\"`"
                  },
                  {
                    "id": "a1517875047029",
                    "text": "`\"ork\"`"
                  },
                  {
                    "id": "a1517875035716",
                    "text": "`\"down\"`"
                  },
                  {
                    "id": "a1517874920616",
                    "text": "`\"town\"`"
                  },
                  {
                    "id": "a1517874859757",
                    "text": "`\"york\"`"
                  }
                ]
              }
            },
            {
              "id": 782698,
              "key": "140b806e-9cd6-49b0-b426-e402ed033d23",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "140b806e-9cd6-49b0-b426-e402ed033d23",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Now let's do something a little more complex.\n\nSuppose that we first do this:\n```text\n>>> word = \"definitely\"\n>>> length = len(word)\n```\n\nNow we have a string stored in the `word` variable, and we have the length of that string stored in the `length` variable. In this case, the length is `10`.\n\nWhat result would you get from each of these expressions?"
                },
                "concepts_label": "Slice expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```text\n>>> word[:length]\n```",
                    "correct_answer": {
                      "id": "a1542041022473",
                      "text": "`'definitely'`"
                    }
                  },
                  {
                    "text": "```text\n>>> word[:length - 2]\n```",
                    "correct_answer": {
                      "id": "a1542041340401",
                      "text": "`'definite'`"
                    }
                  },
                  {
                    "text": "```text\n>>> word[length - 8:]\n```",
                    "correct_answer": {
                      "id": "a1542041563307",
                      "text": "`'finitely'`"
                    }
                  },
                  {
                    "text": "```text\n>>> word[length - 8:length - 2]\n```",
                    "correct_answer": {
                      "id": "a1542041573649",
                      "text": "`'finite'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542041340401",
                    "text": "`'definite'`"
                  },
                  {
                    "id": "a1542041573649",
                    "text": "`'finite'`"
                  },
                  {
                    "id": "a1542041022473",
                    "text": "`'definitely'`"
                  },
                  {
                    "id": "a1542041563307",
                    "text": "`'finitely'`"
                  }
                ]
              }
            },
            {
              "id": 534686,
              "key": "023460b7-067c-4574-bbc7-78213149690d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## No Index Errors with slice operations\n\nSlice operations _never_ cause `IndexError`. A slice that tries to extract characters off of the end of the string, will instead just return as much as it can get, even if that's nothing at all —\n\n```python\n>>> \"presto\"[1024:4096]\n''\n```\nThis expression is asking for the characters from position 1024 to 4096 of a string that only has six characters. This definitely seems like the kind of thing that would give an Index Error, but Python just returns whatever it can get. In this case, it can't get *anything* at those locations, so it simply returns an empty string.",
              "instructor_notes": ""
            },
            {
              "id": 782725,
              "key": "f6314c63-8870-43db-9ac1-9af750fe4bbc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Word triangle",
              "instructor_notes": ""
            },
            {
              "id": 782726,
              "key": "2754981a-730f-4e26-971d-7aa40a2fe895",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the workspace below you'll find a partially completed `for` loop.\n\nYour goal is to finish the loop so that it prints out the following:\n\n```text\nd\nde\ndef\ndefi\ndefin\ndefini\ndefinit\ndefinite\ndefinitel\ndefinitely\n```",
              "instructor_notes": ""
            },
            {
              "id": 782723,
              "key": "16c0bfd1-9379-4e13-b8f9-09a198fc4203",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c518441xGENERICayb5b7l2",
              "pool_id": "webterminal",
              "view_id": "generic-knx66",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/word_triangle.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 670924,
              "key": "798eb90a-db01-4cfc-80da-0e08cca03f7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 782731,
              "key": "d056f376-fbca-495c-9703-239192fb6d21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nword = \"definitely\"\nlength = len(word)\n\nfor n in range(length):\n    print(word[0:n + 1])\n```\n\nTo see how this works, it might help if you add a line to also print the values of `n`:\n\n```python\nword = \"definitely\"\nlength = len(word)\n\nfor n in range(length):\n    print(n) # Add this line\n    print(word[0:n + 1])\n```\n\nEach time through the loop, `n` gets larger. So `[0:n]` is a slice expression that will start from the beginning of the string (at the character with index `0`) and go up until the character at index `n`. Since `n` is growing, the string that gets printed will also grow longer each time.\n\nNotice that we have to add `+ 1`, because `n` starts at `0` and goes up to `9` (but we want it to start at `1` and go up to `10`).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 782650,
          "key": "da6698f2-f9c8-4062-97fb-5fb45624e671",
          "title": "Slicing (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "da6698f2-f9c8-4062-97fb-5fb45624e671",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 782709,
              "key": "0bd0aafb-cc56-4107-86b4-0e24be9bf8ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Slicing (2/2)\n\nThe exercise you just did is actually very similar to something people used to do with the word *abracadabra*...\n\n## Abracadabra\n\nThe magic word **abracadabra** comes from an ancient superstition in which people would write the word in a triangular pattern, dropping one letter on each line, from `\"abracadabra\"` all the way down to `\"a\"`. The idea was, that as the _word_ disappeared, so too would bad luck disappear —",
              "instructor_notes": ""
            },
            {
              "id": 782710,
              "key": "b551fce5-2bc2-4058-886c-0e4cc07e9b93",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/February/5a78f2d6_abracadabra-triangle-cropped/abracadabra-triangle-cropped.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b551fce5-2bc2-4058-886c-0e4cc07e9b93",
              "caption": "_\"Abracadabra\" triangle from an early Encyclopædia Britannica_",
              "alt": "\"Abracadabra\" decreasing to \"A\"",
              "width": 107,
              "height": 444,
              "instructor_notes": null
            },
            {
              "id": 782712,
              "key": "93810333-2e70-4b59-ac17-8acbf6dd61e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Today, we don't need magical inscriptions to make our strings vanish away to nothing — we can do it using `for` loops and slices!\n\nWrite a function `word_triangle` that takes a string as its argument, and prints out a triangle similar to the one above. You don't have to center it, though. Here's an example of what it should look like:\n\n```python\n>>> word_triangle(\"kitten\")\nkitten\nkitte\nkitt\nkit\nki\nk\n```\n\nThis is very similar to the exercise you just did, but with some important differences:\n1. We start with the full word, and remove letters from the end.\n2. We're making it into a function so that it can be called with different words.",
              "instructor_notes": ""
            },
            {
              "id": 782651,
              "key": "62e240f1-2202-46f6-bfa3-2071df01b595",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c782650xGENERIC6fifmw53",
              "pool_id": "webterminal",
              "view_id": "generic-hdbgi",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/slicing.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 782735,
              "key": "b1eba0e6-7985-40f2-909f-d644b7940ec2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 782733,
              "key": "bc493092-934e-49f9-a615-4eef107e8f37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to write the `word_triangle` function in the exercise above:\n\n```python\ndef word_triangle(word):\n  length = len(word)\n  for n in range(length):\n    print(word[:length - n])\n```\n\nThe slice expression here is `word[:length - n]`. Since `length` stays the same while `n` grows, this means that on each pass through the loop, `length - n` gets smaller and smaller, from `length` down to `1`. And _that_ means that on each pass, the string that gets printed will be a shorter and shorter piece of `word`.\n\nThere are a lot of other ways to write this, too!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 518444,
          "key": "dba969af-2033-4097-9951-d6d3b592a92f",
          "title": "Concatenation (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dba969af-2033-4097-9951-d6d3b592a92f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674939,
              "key": "b3d4e22e-26a2-4171-bbe4-234fc27656c8",
              "title": "Python: Appending strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rTVgzRVca0Q",
                "china_cdn_id": "rTVgzRVca0Q.mp4"
              }
            },
            {
              "id": 783194,
              "key": "c1d98ce8-36a2-4d40-81f2-c2db6bf22b00",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c1d98ce8-36a2-4d40-81f2-c2db6bf22b00",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some different examples of expressions using **concatenation**. What would each of them evaluate to?"
                },
                "concepts_label": "Concatenation expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> '1' + '1'\n```",
                    "correct_answer": {
                      "id": "a1542134813883",
                      "text": "`'11'`"
                    }
                  },
                  {
                    "text": "```python\n>>> '1' + 1 \n```",
                    "correct_answer": {
                      "id": "a1542135464533",
                      "text": "`TypeError`"
                    }
                  },
                  {
                    "text": "```python\n>>> '1' + ' ' + '1'\n```",
                    "correct_answer": {
                      "id": "a1542135519253",
                      "text": "`'1 1'`"
                    }
                  },
                  {
                    "text": "```python\n>>> s = '1'\n>>> s + s + '1'\n```",
                    "correct_answer": {
                      "id": "a1542135602564",
                      "text": "`'111'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542135548941",
                    "text": "`11`"
                  },
                  {
                    "id": "a1542134813883",
                    "text": "`'11'`"
                  },
                  {
                    "id": "a1542135464533",
                    "text": "`TypeError`"
                  },
                  {
                    "id": "a1542135519253",
                    "text": "`'1 1'`"
                  },
                  {
                    "id": "a1542135602564",
                    "text": "`'111'`"
                  },
                  {
                    "id": "a1542135541591",
                    "text": "`'2'`"
                  }
                ]
              }
            },
            {
              "id": 534683,
              "key": "4ad84283-3a08-432b-9fb2-bbf1dfd0ca2b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Adverbly\n\nIn English, you can often form an adverb (such as *quickly*) by starting with an adjective (like *quick*) and adding \"ly\" to the end.\n\n(In Silicon Valley, you can often form a _startup name_ by taking a noun or verb and adding \"ly\" to the end.)\n\nWrite a function called `adverbly` that takes a string as input and returns that string with `\"ly\"` appended to it.",
              "instructor_notes": ""
            },
            {
              "id": 783221,
              "key": "c385710c-f31b-4e40-9fa7-86287b26ea34",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c518444xGENERICqttsdizi",
              "pool_id": "webterminal",
              "view_id": "generic-wprgt",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/concatenation.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 670928,
              "key": "8116d770-dcfd-42a3-a820-2257f4ad8cff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 670930,
              "key": "d39acde1-cab1-4ccd-a4b7-9dd3623354c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Adverbly, solution\n\nThis one is quite short:\n```python\ndef adverbly(s):\n    return s + 'ly'\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 783237,
          "key": "19acb6f1-02d5-44d4-ab3a-7d316a144dec",
          "title": "Concatenation (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "19acb6f1-02d5-44d4-ab3a-7d316a144dec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783240,
              "key": "23cd5710-0c5c-4fef-8cb1-49e7c650c7c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Concatenation (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 783254,
              "key": "282515a4-522a-4b72-8a73-a8db828ef273",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's something kind of fun we can do in the terminal using concatenation:",
              "instructor_notes": ""
            },
            {
              "id": 783253,
              "key": "7db1e2bb-db26-4a9a-bf3b-8fcc65b1d205",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```text\nWhat's your name?\n\nAbe\n\nHi, Abe! It's very nice to meet you.\n\nWhat's your favorite color?\n\nvermillion\n\nAh, vermillion, what a lovely color!\n```",
              "instructor_notes": ""
            },
            {
              "id": 783255,
              "key": "3449032b-1ad0-4ddc-9b8a-e65d2ca9c854",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The code for this uses the `input` function to get strings from the user, like their name and favorite color. It then uses the concatenation operator to construct some responses based on what the user entered.",
              "instructor_notes": ""
            },
            {
              "id": 783259,
              "key": "9df1e4c5-5497-4d3a-ab84-6505bedb03d9",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9df1e4c5-5497-4d3a-ab84-6505bedb03d9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Use the `input` function to get a response from the user, and assign the response to a variable.",
                "Concatenate the user's response with another string, and print the result.",
                "If you like, you can use `\\n` in your strings to create line breaks."
              ],
              "positive_feedback": "`\"Nice work,\" + name + \"!\"` 😁",
              "video_feedback": null,
              "description": "In the workspace below (or in the code editor on your own computer), write some code that does something similar to what is shown above.\n\nFeel free to be creative—the point is to get input from the user, concatenate it with some other strings, and print the result."
            },
            {
              "id": 783245,
              "key": "b0c8a341-e248-4184-a7fc-1a6b12a6e035",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c783237xGENERIChu0ycja6",
              "pool_id": "webterminal",
              "view_id": "generic-lnx4g",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/concatenation.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783260,
              "key": "eeb34cbf-b09f-46c4-ada1-0eef267b2dd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 783263,
              "key": "8a4c1257-1cf4-47a0-9b42-da05a0563da5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our code:\n\n```python\nname = input(\"What's your name?\\n\\n\")\nprint(\"\\nHi, \" + name + \"! It's very nice to meet you.\\n\")\ncolor = input(\"What's your favorite color?\\n\\n\")\nprint(\"\\nAh, \" + color + \", what a lovely color!\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 783267,
          "key": "ad1f3d82-0e7c-46b1-9336-e2912269fd00",
          "title": "f-strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad1f3d82-0e7c-46b1-9336-e2912269fd00",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783268,
              "key": "d979d29f-068c-4194-86a0-a7b70a7c16f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# f-strings\nIn this next video, Karl will introduce *f-strings*. This is something that was added to Python in version 3.6—so in order for this to work on your own computer, you must be sure to have Python 3.6 or later. As a reminder, you can check which version you have by going to your terminal and entering:\n\n```text\npython3 --version\n```",
              "instructor_notes": ""
            },
            {
              "id": 783276,
              "key": "2bfc7949-dd5c-43d2-932f-ab3e0153ae04",
              "title": "Python: Formatting with f strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Xb3447yz5c4",
                "china_cdn_id": "Xb3447yz5c4.mp4"
              }
            },
            {
              "id": 783271,
              "key": "ce0652d9-0277-4985-b048-02c95e7cca5d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ce0652d9-0277-4985-b048-02c95e7cca5d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose that we want to get the following string:\n\n```text\n'The aardwolf eats termites.'\n```\nWhich of the following would give us this result?"
                },
                "concepts_label": "Code",
                "answers_label": "Does it work?",
                "concepts": [
                  {
                    "text": "```python\n>>> animal = \"aardwolf\"\n>>> food = \"termites\"\n>>> \"The \" + animal + \" eats \" + food + \".\"\n```",
                    "correct_answer": {
                      "id": "a1542143413814",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\n>>> animal = \"aardwolf\"\n>>> food = \"termites\"\n>>> \"The {animal} eats {food}\"\n```",
                    "correct_answer": {
                      "id": "a1542143653139",
                      "text": "Doesn't work."
                    }
                  },
                  {
                    "text": "```python\n>>> animal = \"aardwolf\"\n>>> food = \"termites\"\n>>> f\"The \" {animal} \" eats \" {food} \".\"\n```",
                    "correct_answer": {
                      "id": "a1542143714413",
                      "text": "Doesn't work."
                    }
                  },
                  {
                    "text": "```python\n>>> animal = \"aardwolf\"\n>>> food = \"termites\"\n>>> f\"The {animal} eats {food}.\"\n```",
                    "correct_answer": {
                      "id": "a1542143715005",
                      "text": "Works"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542143715005",
                    "text": "Works"
                  },
                  {
                    "id": "a1542143714413",
                    "text": "Doesn't work."
                  },
                  {
                    "id": "a1542143653139",
                    "text": "Doesn't work."
                  },
                  {
                    "id": "a1542143413814",
                    "text": "Works"
                  }
                ]
              }
            },
            {
              "id": 783273,
              "key": "c3f3e244-ddb2-4eea-b80e-35cc835bad96",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c783267xGENERIClwi67zyd",
              "pool_id": "webterminal",
              "view_id": "generic-081ph",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/f-strings.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783275,
              "key": "758169aa-2350-4715-bf9c-acd168ee3f68",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 783274,
              "key": "b8bf1420-f85e-4e95-9f86-9c44f4494b37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nname = input(\"What's your name?\\n\\n\")\nprint(f\"\\nHi, {name}! It's very nice to meet you.\\n\")\ncolor = input(\"What's your favorite color?\\n\\n\")\nprint(f\"\\nAh, {color}, what a lovely color!\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 542400,
          "key": "feb5b8fb-aae8-45cc-a2a2-8bd21740c067",
          "title": "Strings to numbers to strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "feb5b8fb-aae8-45cc-a2a2-8bd21740c067",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674941,
              "key": "25d2b9a6-f709-4db5-942e-f025d8c209f0",
              "title": "Python: Strings to numbers to strings",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dSxqPUv1tWs",
                "china_cdn_id": "dSxqPUv1tWs.mp4"
              }
            },
            {
              "id": 783299,
              "key": "8ee726eb-4179-4a4f-8f07-d5d041b0ccb2",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ee726eb-4179-4a4f-8f07-d5d041b0ccb2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some examples of code that we ran in the Python interactive interpreter.\n\nSee if you can predict the results of each one (and of course, you can also try them out yourself!)."
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> n = input(\"Please enter a number: \")\nPlease enter a number: 2\n>>> n * 2\n```",
                    "correct_answer": {
                      "id": "a1542145769136",
                      "text": "`'22'`"
                    }
                  },
                  {
                    "text": "```python\n>>> n = input(\"Please enter a number: \")\nPlease enter a number: 2\n>>> n + 2\n```",
                    "correct_answer": {
                      "id": "a1542145882759",
                      "text": "`TypeError`"
                    }
                  },
                  {
                    "text": "```python\n>>> n = input(\"Please enter a number: \")\nPlease enter a number: 2\n>>> int(n) + 2\n```",
                    "correct_answer": {
                      "id": "a1542145909471",
                      "text": "`4`"
                    }
                  },
                  {
                    "text": "```python\n>>> n = int(input(\"Please enter a number: \"))\nPlease enter a number: 2\n>>> n + 2\n```",
                    "correct_answer": {
                      "id": "a1542145936208",
                      "text": "`4`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542145882759",
                    "text": "`TypeError`"
                  },
                  {
                    "id": "a1542145769136",
                    "text": "`'22'`"
                  },
                  {
                    "id": "a1542145936208",
                    "text": "`4`"
                  },
                  {
                    "id": "a1542145909471",
                    "text": "`4`"
                  }
                ]
              }
            },
            {
              "id": 783484,
              "key": "5652f3d8-3f63-4411-b29b-6ac663c9040c",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5652f3d8-3f63-4411-b29b-6ac663c9040c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose that we have a number stored in a variable:\n\n```python\n>>> n = 7\n```\nAnd we want to generate a string like this:\n\n```text\n'The lucky number is 7.'\n```\n\nBelow are some attempts at getting this result in the Python interpreter. Which of these would work?"
                },
                "concepts_label": "Code",
                "answers_label": "Does it work?",
                "concepts": [
                  {
                    "text": "```python\n>>> 'The lucky number is ' + n + '.'\n```",
                    "correct_answer": {
                      "id": "a1542152553293",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\n>>> f'The lucky number is {n}.'\n```\n",
                    "correct_answer": {
                      "id": "a1542152606762",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\n>>> 'The lucky number is ' + str(n) + '.'\n```",
                    "correct_answer": {
                      "id": "a1542152760444",
                      "text": "Works"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542152920704",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1542152606762",
                    "text": "Works"
                  },
                  {
                    "id": "a1542152760444",
                    "text": "Works"
                  },
                  {
                    "id": "a1542152553293",
                    "text": "Doesn't work"
                  }
                ]
              }
            },
            {
              "id": 783471,
              "key": "95a773ec-0e41-40c2-a61e-371d0658eb84",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "95a773ec-0e41-40c2-a61e-371d0658eb84",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "To see a demo of how the program should work, open a new terminal and run `python3 demo.py`.",
                "Use `input` to get the numbers, and assign them to variables (we called our variables `n1`, `n2`, and `n3`).",
                "Use `int()` to convert the responses to integers, and then sum them up.",
                "Print out the final message. We suggest using *f-strings* to put it all together."
              ],
              "positive_feedback": "**Nice!**",
              "video_feedback": null,
              "description": "In this next exercise, your goal is to write a program that asks the user for three numbers, adds those numbers up, and then prints a message saying what the sum is. Like this:\n\n```text\nEnter a number: 2\nEnter another number: 1\nEnter a third number: 3\n2 + 1 + 3 = 6\n```"
            },
            {
              "id": 783464,
              "key": "f7316ea1-49dc-4de6-a891-cfe6d49493ea",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c542400xGENERIC60hawy0v",
              "pool_id": "webterminal",
              "view_id": "generic-57ymm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/add_three.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 670932,
              "key": "2fa41d5f-6aea-477b-8391-26d3266cd349",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 670956,
              "key": "5e50ef4c-b2fe-4593-9364-008f3d246a4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution\n\nHere's one way to do it:\n\n```python\nn1 = input(\"Enter a number: \")\nn2 = input(\"Enter another number: \")\nn3 = input(\"Enter a third number: \")\nsum = int(n1) + int(n2) + int(n3)\nprint(f\"{n1} + {n2} + {n3} = {sum}\")\n```\n\nBut there are other variations that would also work! For example, instead of *f-strings*, this version uses concatenation, along with the `str` function:\n\n```python\nn1 = input(\"Enter a number: \")\nn2 = input(\"Enter another number: \")\nn3 = input(\"Enter a third number: \")\nsum = int(n1) + int(n2) + int(n3)\nprint(n1 + ' + ' + n2 + ' + ' + n3 + ' = ' + str(sum))\n```\n\nThat's a little harder to read though!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 783568,
          "key": "6ed93f6b-23fd-47fb-a7c1-c2af13942091",
          "title": "starts_with (1/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6ed93f6b-23fd-47fb-a7c1-c2af13942091",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783569,
              "key": "da926100-76f1-463b-85ad-d3f36a2f8965",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `starts_with` (1/3)",
              "instructor_notes": ""
            },
            {
              "id": 783722,
              "key": "793f0012-f356-47aa-bf92-c658ad1f1e7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A little earlier in the course, we made a function called `start_K` that checks if a given string starts with `\"K\"`:\n\n```python\ndef start_K(s):\n    return s[0] == \"K\"\n```\n\nThis function is so specific that it's not likely to be useful for much. It would be better if it could check for more than just `\"K\"`. Over the next couple of pages, we'll work on making the function more flexible. We'll also work toward a version of it that compares more than just a single letter.\n\n## Just comparing the first letter\n\nOur first goal will be as follows:\n\n>Create a function called `starts_with` that takes two strings, and indicates whether the first characters of those strings match. In other words, it would do something like this:\n\n```python\n>>> starts_with(\"apple\", \"art\")\nTrue\n>>> starts_with(\"apple\", \"cart\")\nFalse\n```",
              "instructor_notes": ""
            },
            {
              "id": 783576,
              "key": "43c4e5cb-fd14-4387-9e5c-9189115fb5d3",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "43c4e5cb-fd14-4387-9e5c-9189115fb5d3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose we have the two strings we want to compare, and we assign them to some variables like so:\n\n```python\ns1 = \"zebonkey\"\ns2 = \"kiwi\"\n```\nOur goal is to compare the characters in the **first** position (`\"z\"` and `\"k\"`). Which of these pieces of code will do that?\n\n**Note:** Remember, the `!=` is the *not equal* comparison operator."
                },
                "concepts_label": "Code",
                "answers_label": "Compares `\"z\"` with `\"k\"`?",
                "concepts": [
                  {
                    "text": "```python\ns1[1] == s2[1]\n```",
                    "correct_answer": {
                      "id": "a1542209803115",
                      "text": "No"
                    }
                  },
                  {
                    "text": "```python\ns1(0) == s2(0)\n```",
                    "correct_answer": {
                      "id": "a1542209999677",
                      "text": "No"
                    }
                  },
                  {
                    "text": "```python\ns1[0] == s2[0]\n```",
                    "correct_answer": {
                      "id": "a1542210038109",
                      "text": "Yes"
                    }
                  },
                  {
                    "text": "```python\ns1[0] != s2[0]\n```",
                    "correct_answer": {
                      "id": "a1542210052279",
                      "text": "Yes"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542209999677",
                    "text": "No"
                  },
                  {
                    "id": "a1542210038109",
                    "text": "Yes"
                  },
                  {
                    "id": "a1542210052279",
                    "text": "Yes"
                  },
                  {
                    "id": "a1542209803115",
                    "text": "No"
                  }
                ]
              }
            },
            {
              "id": 783581,
              "key": "32a457f8-fb84-4541-a6d9-79a97311af81",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32a457f8-fb84-4541-a6d9-79a97311af81",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a function with two parameters (for the two strings).",
                "Compare the first characters of the strings.",
                "If the characters are the same, return `True`, otherwise return `False`.",
                "Remove the comments from the `print` statements and run `python3 starts_with.py` to test your code."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "OK, let's get to it! In the workspace below, define a function, `starts_with`, that takes two strings and compares the first character."
            },
            {
              "id": 783580,
              "key": "68ac4e9d-b8d1-417c-b18c-f298f6dc6d5d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c783568xGENERICtlhf2kl2",
              "pool_id": "webterminal",
              "view_id": "generic-fy7r1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/starts_with.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783582,
              "key": "f34af77d-b3ab-4672-9e58-ae29424049a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\ndef starts_with(s1, s2):\n    if s1[0] == s2[0]:\n        return True\n    else:\n        return False\n```\n\nBut in programming, there's almost always more than one way to do the same thing...",
              "instructor_notes": ""
            },
            {
              "id": 783583,
              "key": "2fb899c5-6147-40f1-9ed3-c2bd2c361d01",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2fb899c5-6147-40f1-9ed3-c2bd2c361d01",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some other attempts at the above solution.\n\nFor each, indicate whether it would do the same thing as the solution above, or if it would have a different result."
                },
                "concepts_label": "Code",
                "answers_label": "Same or different?",
                "concepts": [
                  {
                    "text": "```python\ndef starts_with(s1, s2):\n    if s1[0] != s2[0]:\n        return False\n    else:\n        return True\n```",
                    "correct_answer": {
                      "id": "a1542213556658",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\ndef starts_with(s1, s2):\n    if s1[0] != s2[0]:\n        return True\n    else:\n        return False\n```",
                    "correct_answer": {
                      "id": "a1542213676267",
                      "text": "Different"
                    }
                  },
                  {
                    "text": "```python\ndef starts_with(s1, s2):\n    return s1[0] == s2[0]\n```",
                    "correct_answer": {
                      "id": "a1542213689763",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\ndef starts_with(s1, s2):\n    return s1[0] != s2[0]\n```",
                    "correct_answer": {
                      "id": "a1542228887291",
                      "text": "Different"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542213676267",
                    "text": "Different"
                  },
                  {
                    "id": "a1542228887291",
                    "text": "Different"
                  },
                  {
                    "id": "a1542213556658",
                    "text": "Same"
                  },
                  {
                    "id": "a1542213689763",
                    "text": "Same"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 783577,
          "key": "c28bca6c-3f4d-4cda-9e18-eac2210300b0",
          "title": "starts_with (2/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c28bca6c-3f4d-4cda-9e18-eac2210300b0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783578,
              "key": "aba160c4-5c34-465b-96d9-5c2f4544c800",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `starts_with` (2/3)",
              "instructor_notes": ""
            },
            {
              "id": 783877,
              "key": "18c6f37e-f244-4af1-b960-6455af060b63",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's move beyond just comparing the first letter. Instead, suppose that we have two strings—a **long** string and a **short** string—and we want to check whether the long string starts with the short string.\n\nIn other words, we want a function that does this:\n\n```python\n>>> starts_with(\"apple\", \"app\")\nTrue\n>>> starts_with(\"banana\", \"ban\")\nTrue\n>>> starts_with(\"manatee\", \"mango\")\nFalse\n```\n\nThat will be our goal on this page:\n\n>Write a function called `starts_with` that takes two strings as arguments, and returns `True` if the first string starts with the second string, and `False` otherwise.",
              "instructor_notes": ""
            },
            {
              "id": 783887,
              "key": "dcba54ed-b13e-4e90-a9a2-2aff0076a864",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Checking all the positions\n\nOur current version of the function just compares the letters at the *first* index position—that is, position `0`. For example:\n\n\n```python\n\"manatee\"[0] == \"manx\"[0]\n```\n\nBut now we want to go through **all** of the positions in the shorter string, not just position `0`. ",
              "instructor_notes": ""
            },
            {
              "id": 783906,
              "key": "5cc3f332-b6d0-47f8-9f33-cf02cd5e1a1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To accomplish our goal, we need to loop over all of the **index positions** in the shorter string. Do you remember how we looped over a string's index positions? We looked at this earlier in the lesson, but it's kind of tricky, so let's check to be sure we've got it straight...",
              "instructor_notes": ""
            },
            {
              "id": 783899,
              "key": "78650de1-40bc-4c6b-87d8-377d433ed544",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "78650de1-40bc-4c6b-87d8-377d433ed544",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Assume that we've assigned the short string to a parameter called `short`. Which of these pieces of code would loop over all of the **index positions** in the `short` string?",
                "answers": [
                  {
                    "id": "a1542319533996",
                    "text": "`for position in short:`",
                    "is_correct": false
                  },
                  {
                    "id": "a1542319683892",
                    "text": "`for position in len(short):`",
                    "is_correct": false
                  },
                  {
                    "id": "a1542319685484",
                    "text": "`for position in range(len(short)):`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 783912,
              "key": "48b596b4-2b2a-4022-8d85-8aeabf77044f",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "48b596b4-2b2a-4022-8d85-8aeabf77044f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Now that we have a `for` loop that cycles through the index positions, we can use an `if` test to check the characters at each position.\n\nSpecifically, we want to return `False` for the first pair of characters that does **not** match.\n\nHere are some attempts to do that. Which of them would work?"
                },
                "concepts_label": "Code",
                "answers_label": "Does it work?",
                "concepts": [
                  {
                    "text": "```python\nfor position in range(len(short)):\n    if long[position] == short[position]:\n        return False\n```",
                    "correct_answer": {
                      "id": "a1542324402644",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nfor position in range(len(short)):\n    if long[position] != short[position]:\n        return False\n```",
                    "correct_answer": {
                      "id": "a1542324539459",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nfor position in range(len(short)):\n    if long[position] != short[position]:\n        return True\n```",
                    "correct_answer": {
                      "id": "a1542324558828",
                      "text": "Doesn't work"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542324539459",
                    "text": "Works"
                  },
                  {
                    "id": "a1542324402644",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1542324558828",
                    "text": "Doesn't work"
                  }
                ]
              }
            },
            {
              "id": 783914,
              "key": "1083a2be-b109-495e-950f-e3cdd1337fdb",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1083a2be-b109-495e-950f-e3cdd1337fdb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a function with two parameters, `long` and `short`.",
                "Create a `for` loop that loops over the *index numbers* of the `short` string.",
                "For each index number, compare the characters at that position.",
                "As soon as there's a pair that does **not** match, return `False`.",
                "If the loop finishes (all characters match), return `True`."
              ],
              "positive_feedback": "**Nice work!**",
              "video_feedback": null,
              "description": "OK, it's time to put it all together and write the whole function! Here's the goal again, as a reminder:\n\n>Write a function called `starts_with` that takes two strings as arguments, and returns `True` if the first string starts with the second string, and `False` otherwise.\n\nRemember that the solution is available if you need it!"
            },
            {
              "id": 783909,
              "key": "0ad00282-f14b-46f0-9150-fedf8ba39f08",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c783577xGENERICs5czzuj9",
              "pool_id": "webterminal",
              "view_id": "generic-n79o7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/starts_with.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783915,
              "key": "f6bef4ac-9cd7-4bb3-a23f-765e9ff2a0d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 783878,
              "key": "64c55c20-40be-4b84-b6cd-32e013984cd9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\ndef starts_with(long, short):\n    for position in range(len(short)):\n        if long[position] != short[position]:\n            return False\n    return True\n```\n\nNotice that the `return True` comes *after* the loop (and outside of it). If we put it inside the loop, then it would check a character, and then `return True`, which would cause the whole function to stop running—so it would never check more than one character.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 783925,
          "key": "b7fff46e-9bdc-4151-bd5d-b75cb196253e",
          "title": "starts_with (3/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b7fff46e-9bdc-4151-bd5d-b75cb196253e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783927,
              "key": "e536f65c-949a-4fea-885c-ba0089afe2e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `starts_with` (3/3)",
              "instructor_notes": ""
            },
            {
              "id": 783929,
              "key": "ee36b776-b692-41bb-b10e-7b9ba0de23c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In programming, there's almost always more than one way to do something. Here's an alternative approach to the `starts_with` function that's quite different: Instead of using a `for` loop and checking each pair of characters, we can simply use *string slicing*. ",
              "instructor_notes": ""
            },
            {
              "id": 783930,
              "key": "d9d094c9-345d-41db-a3df-c87369039c25",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d9d094c9-345d-41db-a3df-c87369039c25",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "To see what we mean, open the Python interpreter. First, define these variables:\n\n```python\n>>> long = \"banana\"\n>>> short = \"ban\"\n```\n\n Then, give these bits of code a try. What results do you get?"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> long[0:3]\n```",
                    "correct_answer": {
                      "id": "a1542326770568",
                      "text": "`'ban'`"
                    }
                  },
                  {
                    "text": "```python\n>>> len(short)\n```",
                    "correct_answer": {
                      "id": "a1542326872032",
                      "text": "`3`"
                    }
                  },
                  {
                    "text": "```python\n>>> long[0:len(short)]\n```",
                    "correct_answer": {
                      "id": "a1542327030202",
                      "text": "`'ban'`"
                    }
                  },
                  {
                    "text": "```python\n>>> long[0:len(short)] == short\n```",
                    "correct_answer": {
                      "id": "a1542327063059",
                      "text": "`True`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542327063059",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542326872032",
                    "text": "`3`"
                  },
                  {
                    "id": "a1542376239198",
                    "text": "`4`"
                  },
                  {
                    "id": "a1542376232950",
                    "text": "`False`"
                  },
                  {
                    "id": "a1542376247717",
                    "text": "`'bana'`"
                  },
                  {
                    "id": "a1542326770568",
                    "text": "`'ban'`"
                  },
                  {
                    "id": "a1542376280815",
                    "text": "`'bana'`"
                  },
                  {
                    "id": "a1542327030202",
                    "text": "`'ban'`"
                  }
                ]
              }
            },
            {
              "id": 783931,
              "key": "e04e6703-c28d-4aee-ba05-3d09cfc37649",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e04e6703-c28d-4aee-ba05-3d09cfc37649",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a function with two parameters (`long` and `short`) just like before.",
                "Use the slice operator `[:]` with the `len` function to get the first part of the `long` string.",
                "If that slice matches the `short` string, return `True`. Otherwise, return `False`."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Now, give it a try! See if you can write an alternative version of the `starts_with` function that uses string slicing."
            },
            {
              "id": 783932,
              "key": "e2d5e3a0-9e5d-4b40-9199-1e0a143ba857",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c783925xGENERICkofkxv60",
              "pool_id": "webterminal",
              "view_id": "generic-3x2by",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/starts_with.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783936,
              "key": "18823c0b-58f2-4a1b-956a-1a1810c4bdd6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 783933,
              "key": "56c66b1e-794e-4e90-9d6a-311c2ec22d62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\ndef starts_with(long, short):\n    if long[0:len(short)] == short:\n        return True\n    else:\n        return False\n```\n\nOr, as before, we can shorten this to a single return statement:\n\n```python\ndef starts_with(long, short):\n    return long[0:len(short)] == short\n```",
              "instructor_notes": ""
            },
            {
              "id": 783935,
              "key": "e7f7a560-309c-47e5-97fe-7dd0cbdf6571",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this next video, Kelly will walk through the different solutions for `starts_with` that we covered on the last couple of pages.",
              "instructor_notes": ""
            },
            {
              "id": 783934,
              "key": "63bbe8a4-dfd9-47a5-a694-6e8e12d0b55a",
              "title": "IPND PY L4 13 Starts With Impl HS ANIM FIXES V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D3jIW4RS69s",
                "china_cdn_id": "D3jIW4RS69s.mp4"
              }
            },
            {
              "id": 784883,
              "key": "77634f5e-3fc7-42d2-b8a9-1db9b2b9f671",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Differences in the three versions\n\nLike Kelly said, there *are* some differences in how these different versions work.\n\nHere are all three versions in one place, for your reference:\n\n```\ndef starts_with_v1(long, short):\n    for position in range(len(short)):\n        if long[position] != short[position]:\n            return False\n    return True\n```\n\n```\ndef starts_with_v2(long, short):\n    length = len(short)\n    beginning = long[0 : length]\n    if beginning == short:\n        return True\n    else:\n        return False\n```\n\n```\ndef starts_with_v3(long, short):\n    return long[0:len(short)] == short\n```\nThese all do the same thing with normal input, but they do different things if the input is a little bit off. For instance, what happens if you pass a `long` string that is actually shorter than the `short` string, e.g.: `starts_with_v1(\"tin\", \"tinkerbell\")`?",
              "instructor_notes": ""
            },
            {
              "id": 784963,
              "key": "263546ee-0f03-4188-a186-859c951d9534",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "263546ee-0f03-4188-a186-859c951d9534",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Copy the three functions above into your Python interpreter, then run these lines of code. Note that in each one, the `long` argument is shorter than the `short` argument.\n\n```python\nstarts_with_v1(\"tin\", \"tinkerbell\")\nstarts_with_v2(\"tin\", \"tinkerbell\")\nstarts_with_v3(\"tin\", \"tinkerbell\")\n```\nWhat differences do you see between the behavior of these three functions?",
                "answers": [
                  {
                    "id": "a1542814755646",
                    "text": "The first one produces an `IndexError`, while the others just return `False`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1542814775165",
                    "text": "The first two produce an `IndexError`, while the third returns `False`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1542814775870",
                    "text": "The first one returns `True`, the second produces `IndexError`, and the third produces `SliceError`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1542814776542",
                    "text": "There is no difference between them.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 518446,
          "key": "2cb93159-7d78-494a-b39a-231e4235c8cb",
          "title": "Methods on strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2cb93159-7d78-494a-b39a-231e4235c8cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 783939,
              "key": "6e8a6c55-0d43-4c90-8c49-e494ca8250ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `\" \".`  Methods on strings",
              "instructor_notes": ""
            },
            {
              "id": 783938,
              "key": "9984c208-667f-4de8-817e-37c77197fef1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The `startswith` method\n\nWe had you go through the process of writing the `starts_with` function because we wanted you to have an understanding of how a function like that might work.\n\nBut checking if one string starts with another is pretty common in programming, so Python actually comes with the feature built in!\n\nSpecifically, it is available as a built-in *method* called `startswith`. Remember, a **method** is simply a function that is associated with a specific object. Like when we used turtles earlier, the `forward` method was always associated with a specific turtle, as in `amy.forward(100)`.",
              "instructor_notes": ""
            },
            {
              "id": 783941,
              "key": "fdc85ab6-829b-4365-889b-d59301f317fc",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fdc85ab6-829b-4365-889b-d59301f317fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Go ahead and try the `startswith` method in your own terminal."
              ],
              "positive_feedback": "**Good!**",
              "video_feedback": null,
              "description": "Here's how you would use the `startswith` method:\n\n```python\n>>> \"banana\".startswith(\"ban\")\nTrue\n>>> \"bonobo\".startswith(\"ban\")\nFalse\n```"
            },
            {
              "id": 783940,
              "key": "19d36cea-88d7-46d1-bc69-b57d74410fd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Note:** If you feel like you just went through a whole bunch of work creating the `starts_with` function for nothing... well, that's kind of the point! This is the whole reason for built-in functions—to save you the work of creating functions for commonly needed tasks.",
              "instructor_notes": ""
            },
            {
              "id": 543242,
              "key": "d0ef2fcf-eaa3-4c3e-b780-416f9c0b5d31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## String predicates\n\nThere are a lot of methods you can use on strings. You can find a full list of them [in the Python documentation](https://docs.python.org/3/library/stdtypes.html#string-methods).\n\nMany string methods, like `startswith` and `endswith`, are **predicates** — which means that they return `True` or `False` to indicate something about the string.\n\nYou can use predicates in `if` statements. For example, here's some code that checks a string for angle brackets (like you would see in an HTML tag):\n\n```python\ndef possible_tag(word):\n    if word.startswith(\"<\") and word.endswith(\">\"):\n        print(word, \"could maybe be an HTML tag\")\n    else:\n        print(word, \"is definitely not an HTML tag (but might contain one)\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 543254,
              "key": "cc90dcb4-4dac-4b58-af70-55d523b768fb",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cc90dcb4-4dac-4b58-af70-55d523b768fb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Take a look through the [list of string methods](https://docs.python.org/3/library/stdtypes.html#string-methods) in the Python documentation. Look for predicates — methods that return `True` or `False` — to answer each of these questions:"
                },
                "concepts_label": "Question",
                "answers_label": "Method name",
                "concepts": [
                  {
                    "text": "Is this string made of only digits?",
                    "correct_answer": {
                      "id": "a1518471137211",
                      "text": "`isdigit`"
                    }
                  },
                  {
                    "text": "Is this string made of only lowercase letters?",
                    "correct_answer": {
                      "id": "a1518471213156",
                      "text": "`islower`"
                    }
                  },
                  {
                    "text": "Is this string made of only whitespace characters, such as spaces and tabs?",
                    "correct_answer": {
                      "id": "a1518471299489",
                      "text": "`isspace`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1518471299489",
                    "text": "`isspace`"
                  },
                  {
                    "id": "a1518471371719",
                    "text": "`iswhitespace`"
                  },
                  {
                    "id": "a1518471377856",
                    "text": "`isnumber`"
                  },
                  {
                    "id": "a1542382955180",
                    "text": "`iscaps`"
                  },
                  {
                    "id": "a1518471137211",
                    "text": "`isdigit`"
                  },
                  {
                    "id": "a1518471213156",
                    "text": "`islower`"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 543264,
          "key": "5869a438-9d9c-416c-92bf-64c59a0d2d42",
          "title": "Boolean values",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5869a438-9d9c-416c-92bf-64c59a0d2d42",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 679821,
              "key": "74aab550-e25d-45c5-9f57-1ed9e3309b16",
              "title": "Python: Booleans",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "B1kIBPjT1WE",
                "china_cdn_id": "B1kIBPjT1WE.mp4"
              }
            },
            {
              "id": 783946,
              "key": "140ef31a-d291-4827-b093-8d4122aad4ec",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "140ef31a-d291-4827-b093-8d4122aad4ec",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are the examples Kelly showed at the end of the video. Start up the Python interactive interpreter and see what each of them evaluates to.\n\nHere are the expressions using the `and` operator:"
                },
                "concepts_label": "Expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> True and True\n```",
                    "correct_answer": {
                      "id": "a1542385716392",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n>>> True and False\n```",
                    "correct_answer": {
                      "id": "a1542385882961",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n>>> False and False\n```",
                    "correct_answer": {
                      "id": "a1542385895767",
                      "text": "`False`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542385716392",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542385882961",
                    "text": "`False`"
                  },
                  {
                    "id": "a1542385895767",
                    "text": "`False`"
                  },
                  {
                    "id": "a1542386193018",
                    "text": "`True`"
                  }
                ]
              }
            },
            {
              "id": 783947,
              "key": "733de331-fab1-45fa-911e-ab4f0cb954d5",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "733de331-fab1-45fa-911e-ab4f0cb954d5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And here are the expressions using the `or` operator:"
                },
                "concepts_label": "Expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> True or True\n```",
                    "correct_answer": {
                      "id": "a1542386078731",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n>>> True or False\n```",
                    "correct_answer": {
                      "id": "a1542386090362",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n>>> False or False\n```",
                    "correct_answer": {
                      "id": "a1542386090938",
                      "text": "`False`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542386090362",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542386078731",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542386090938",
                    "text": "`False`"
                  },
                  {
                    "id": "a1542386205308",
                    "text": "`False`"
                  }
                ]
              }
            },
            {
              "id": 681207,
              "key": "390a57a6-9d8a-416f-83da-cd53e6e90e5b",
              "title": "Python: Booleans 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3FpXa1hMC8U",
                "china_cdn_id": "3FpXa1hMC8U.mp4"
              }
            },
            {
              "id": 783966,
              "key": "4a12cc0e-a3d7-452d-88d4-79d680a7a1f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Is all of that `True` and `False` business getting jumbled in your head? If so, it's probably because it's pretty abstract. There aren't many situations where you would actually want to have code like this:\n\n```python\nTrue and True\n```\n\nInstead, you would have code that looks more like this:\n\n```python\n2 == 2 and 5 == 5\n```\n\nSince `2 == 2` evaluates to `True`, and `5 == 5` also evaluates to `True`, this whole thing evaluates to:\n\n```python\nTrue and True\n```\n\nWhich would then evaluate to simply:\n\n```python\nTrue\n```",
              "instructor_notes": ""
            },
            {
              "id": 783967,
              "key": "4ffcc984-06bb-46f6-8a50-56740fd1e9af",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ffcc984-06bb-46f6-8a50-56740fd1e9af",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some more examples you can try out in the interpreter:"
                },
                "concepts_label": "Expression",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\n>>> n = 5\n>>> n > 0 and n < 10\n```",
                    "correct_answer": {
                      "id": "a1542389584750",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n>>> n = 100\n>>> n > 0 and n < 10\n```",
                    "correct_answer": {
                      "id": "a1542389605583",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n>>> s = \"foo\"\n>>> len(s) < 5 or len(s) > 10\n```",
                    "correct_answer": {
                      "id": "a1542389619461",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n>>> s = \"foobar\"\n>>> len(s) < 5 or len(s) > 10\n```",
                    "correct_answer": {
                      "id": "a1542389822305",
                      "text": "`False`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1542389619461",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542389584750",
                    "text": "`True`"
                  },
                  {
                    "id": "a1542389605583",
                    "text": "`False`"
                  },
                  {
                    "id": "a1542389822305",
                    "text": "`False`"
                  }
                ]
              }
            },
            {
              "id": 783969,
              "key": "7f7d3d7c-df93-4471-b500-0d1bd1748f3e",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7f7d3d7c-df93-4471-b500-0d1bd1748f3e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a function (we called ours `good_length`) with one parameter (for the string to check).",
                "The function should return `True` if the string is between `8` and `64` characters long, and `False` otherwise."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Many web services want users to have passwords that are at least eight characters long, but it can be a problem if passwords are _too_ long. Your goal will be to write a function that checks any given string to see if it's a good length."
            },
            {
              "id": 783968,
              "key": "915be8c2-e539-45cf-a64a-343863027662",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r613901c543264xGENERICrl0n2zbc",
              "pool_id": "webterminal",
              "view_id": "generic-4e1nu",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/password.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 783971,
              "key": "07a41a99-0819-4583-ba12-793e8d8be91c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 783970,
              "key": "efcd5b76-333a-4cc1-ba20-bbdb650d33f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\ndef good_length(s):\n    return len(s) > 8 and len(s) < 64\n```",
              "instructor_notes": ""
            },
            {
              "id": 543274,
              "key": "601352d6-4ea0-48f2-91a9-aa69f3ffaa85",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The `not` operation\n\nThere is a third boolean operation called `not`:\n\n* `not x` is true if `x` is false.\n* `not x` is false if `x` is true.\n\nAn interesting consequence of these rules is that `not (x and y)` is the same as `(not x) or (not y)`. Similarly, `not (x or y)` is the same as `(not x) and (not y)`.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}