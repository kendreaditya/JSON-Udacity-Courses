{
  "data": {
    "lesson": {
      "id": 817324,
      "key": "58f03093-ef39-4479-87b1-4424e3eab5cc",
      "title": "Web APIs",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn to interact with Web APIs using the requests module, manipulate JSON, and use dictionaries. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/58f03093-ef39-4479-87b1-4424e3eab5cc/817324/1555957011796/Web+APIs+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/58f03093-ef39-4479-87b1-4424e3eab5cc/817324/1555957007171/Web+APIs+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 681546,
          "key": "05f8938e-a62f-4603-9151-c3a058ff320e",
          "title": "Welcome to Web APIs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "05f8938e-a62f-4603-9151-c3a058ff320e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703437,
              "key": "c2c0d5d6-b473-42c0-a6ba-09e327689e80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            },
            {
              "id": 817516,
              "key": "ab4d2078-901f-4518-9e83-e298c7446174",
              "title": "IPND PY L6 N01 Welcome To Web APIs With Python ANIM",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PZPYOiuAZ-w",
                "china_cdn_id": "PZPYOiuAZ-w.mp4"
              }
            },
            {
              "id": 704690,
              "key": "ee7f27b8-1a6d-49e4-9c61-645be6f3c60c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What even is an API?\n\nThe term **API** is used quite broadly, and if you look it up you'll find a number of different definitions (some of which are rather difficult to understand). But the key underlying idea is in the name‚Äî**Application Programming Interface**. An API is an _interface_. It's something that has been created to help two different applications interact with one another.\n\nFor example, in this lesson you'll be working with an online service, MetaWeather, that aggregates data on weather forecasts. And you'll be writing a Python program to display that weather data. In order for these two systems to interact, we need an _interface_ between them‚Äîsomething that allows your Python code to make requests to the MetaWeather service and receive back responses with data that it can interpret meaningfully. And that's what an API is for. MetaWeather provide an API so that there's a standardized way for other program to communicate with it.",
              "instructor_notes": ""
            },
            {
              "id": 703569,
              "key": "ebcf9661-7f68-450d-9d3d-14723d4e2ae4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Weather report demo\n\nBelow is a demonstration of what you'll be building in this lesson. You'll write Python code that gets weather data for a city and displays it to the user on request.\n\nTo try it out for yourself, enter the name of a city (such as `Tokyo`, `London`, or `Delhi`) into the terminal shown below.\n\nNote that MetaWeather only has data for major cities‚Äîbut the program below will still give a helpful message if you enter a city it doesn't have data for (rather than crashing or displaying an error message). This is also something you'll learn how to do in this lesson.",
              "instructor_notes": ""
            },
            {
              "id": 703434,
              "key": "fd0df510-2ecc-4a7c-b7ac-526760a1c515",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewp27hvbk1o1",
              "pool_id": "webterminal",
              "view_id": "repl-7vuewm6ws",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "python ./workspace/weather.py",
                    "terminalTitle": "Weather"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 707815,
              "key": "49fa09d5-45ad-4cb8-85b3-46cd61ce2a45",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## üõ†Ô∏è Experimenting and playing with the code\nWe've said it before, but as a reminder: one of the best ways to learn how code works is to experiment with it! We've provided workspaces throughout this lesson to make it convenient to tinker with the examples we go over.\n\nIn addition to these workspaces, you should also have a terminal open on your own computer. As you watch the videos in this lesson and go through the various concepts, don't hesitate to fire up the Python interpreter and play around. Try everything for yourself _at least_ once! Even if you \"fail\" when doing this, it will still help the ideas stick better than if you simply try to passively absorb the information.",
              "instructor_notes": ""
            },
            {
              "id": 707816,
              "key": "222b310e-47f6-4c75-840e-765e93343710",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "222b310e-47f6-4c75-840e-765e93343710",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have a terminal open and am ready to fire up the Python interpreter!"
              ],
              "positive_feedback": "**Excellent!**\n\nLet's play with some code!",
              "video_feedback": null,
              "description": "Ready to experiment?"
            }
          ]
        },
        {
          "id": 689708,
          "key": "c7667d1c-46e0-4f32-871a-faba74ad0a30",
          "title": "Getting the weather",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c7667d1c-46e0-4f32-871a-faba74ad0a30",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 704687,
              "key": "ac30893e-46e2-4919-bd26-0cb4943a2e68",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Where on earth? üåéüåçüåè",
              "instructor_notes": ""
            },
            {
              "id": 817518,
              "key": "a5b587a6-6713-448b-9cbd-4e9e7f5f7733",
              "title": "IPND PY L6 N02 Whether There'S Weather HS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9YGlbDpWsgI",
                "china_cdn_id": "9YGlbDpWsgI.mp4"
              }
            },
            {
              "id": 704679,
              "key": "c0b781e4-8736-4530-b5ff-b9ae1e138e93",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the video, Karl showed how to send a request to the MetaWeather API to get the **Where On Earth Identifier** (**WOEID**).\n\nYou can do this from either your terminal or the browser, using the URL:\n\n```text\nhttps://www.metaweather.com/api/location/search/?query=\n```\n\nWith the city name (for whatever city you're interested in) added to the end. Give it a try in your own browser first. See if you can get the WOEID for New York.",
              "instructor_notes": ""
            },
            {
              "id": 704682,
              "key": "d776b16c-0235-40d8-911d-d4b09d08d900",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d776b16c-0235-40d8-911d-d4b09d08d900",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Based on the response sent back from MetaWeather, what is the WOEID for New York?",
                "matchers": [
                  {
                    "expression": "2459115"
                  }
                ]
              }
            },
            {
              "id": 704680,
              "key": "1212a8a3-a2ab-43c6-928a-227fea7462bc",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1212a8a3-a2ab-43c6-928a-227fea7462bc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "After you enter the URL to request data for `New York`, look again at the city name in the address bar. What does it look like?",
                "answers": [
                  {
                    "id": "a1535764476544",
                    "text": "`New%20York`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535764633353",
                    "text": "`New%20%York`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535764645161",
                    "text": "`New#20#York`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535764840251",
                    "text": "The same as before‚Äîsimply `New York`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704681,
              "key": "75fb24a8-a675-4c12-8c18-a7591a170424",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The unsafe _space_\n\nThe reason this happens is because the folks who set the standards for URLs decided the _space_ character is \"unsafe\". Essentially, spaces in URLs can introduce errors and ambiguity, so they're not allowed‚Äîand to be helpful, the browser replaces them with a specific code, `%20`, that is designated for spaces.\n\nIf you're curious to learn more, you can check out this [Explain Like I'm Five](https://www.reddit.com/r/explainlikeimfive/comments/5itw51/eli5_why_arent_spaces_allowed_in_urls/) post, or even have a look at the [original document](https://tools.ietf.org/html/rfc1738) where Tim Berners-Lee (the inventor of the World Wide Web!) laid out the standards for URLs:\n\n>The space character is unsafe because significant spaces may disappear and insignificant spaces may be introduced when URLs are transcribed or typeset or subjected to the treatment of word-processing programs.\n\n\nWhen you enter URLs into your browser, you don't usually need to worry about this, since your browser will automatically replace the spaces with the `%20` encoding. However, if you make a request from the shell using `curl`, it won't do this‚Äîso you'll need to actually replace the spaces with `%20`  yourself.",
              "instructor_notes": ""
            },
            {
              "id": 704683,
              "key": "7daf415b-47c2-4c64-9cbf-9c9ada57ef7e",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7daf415b-47c2-4c64-9cbf-9c9ada57ef7e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "See if you can get the WOEID for `New Delhi`‚Äîbut this time, try doing it in the shell, using the `curl` command.\n\nYou can use the terminal on your own computer, or the one we've provided below this quiz.\n\nAgain, the URL to use for sending a request to MetaWeather is:\n`https://www.metaweather.com/api/location/search/?query=`",
                "matchers": [
                  {
                    "expression": "28743736"
                  }
                ]
              }
            },
            {
              "id": 704684,
              "key": "939c4976-7887-4bc4-8c43-6bffe571e9c7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewh24qhgflo66",
              "pool_id": "webterminal",
              "view_id": "repl-42w6uiuwns4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": true,
                    "replCommand": "bash",
                    "terminalTitle": "Terminal"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 704688,
              "key": "0e63d871-c853-4c3b-aedc-a0357aeab5a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Get the weather!",
              "instructor_notes": ""
            },
            {
              "id": 704685,
              "key": "4827207e-30fe-4ccd-a84d-ddccc14c4c71",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4827207e-30fe-4ccd-a84d-ddccc14c4c71",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have successfully gotten a big mess of weather data!"
              ],
              "positive_feedback": "Congrats on taking your first steps into the wide world of Web APIs!",
              "video_feedback": null,
              "description": "Using the WOEID that you got for New Delhi, send a request to the MetaWeather API for the weather data on that location.\n\nTo do that, you'll use this URL ...\n\n```text\nhttps://www.metaweather.com/api/location/        /\n```\n... with the WOEID added at the end, between those last two slashes (be sure to include the trailing slash if you're doing this with `curl`, or the request will fail).\n\nYou can do this in both your browser and in the shell (using `curl`). In both cases, you'll get back a big mess of weather data!"
            }
          ]
        },
        {
          "id": 681547,
          "key": "9ffcdebb-ff51-4b25-8fa5-0c7a40fddb7e",
          "title": "The requests module",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ffcdebb-ff51-4b25-8fa5-0c7a40fddb7e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817519,
              "key": "14ae8596-a094-4a52-959b-c3775a87941d",
              "title": "IPND PY L6 N03 Installing The Requests Module SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RF03od5ubxE",
                "china_cdn_id": "RF03od5ubxE.mp4"
              }
            },
            {
              "id": 693933,
              "key": "c02efd6a-84ad-41cd-acaf-3429c9486c75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Install _requests_\n\nGo ahead and install the _requests_ module. You can use the `pip` command in the terminal, like Kelly showed in the video:\n\n```bash\npip install requests\n```\n\nOr:\n\n```bash\npip3 install requests\n```",
              "instructor_notes": ""
            },
            {
              "id": 704694,
              "key": "3fa98c18-0a6e-4012-8742-9db7740e5213",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3fa98c18-0a6e-4012-8742-9db7740e5213",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've successfully installed the _requests_ module"
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 704693,
              "key": "7467a0fd-e81c-476f-b59f-bea732489c7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Documentation\n\nYou can find the documentation for the requests module [here](http://docs.python-requests.org/en/master/). Have a look and see if you can find the section that shows how to _make a request_.\n\nDocumentation pretty much always has a lot of info you don't need, and this can make it difficult (and frustrating) to find what you're looking for. But being able to scan through documentation and find the info you need is an important skill to build, so it's good to at least give it a try.\n\nAnd remember, the browser's *Find* command (Ctrl + F or ‚åòF) is often handy when looking through documentation.\n\n**Note:** If you get stuck trying to make your first request, don't worry‚ÄîKarl will walk through the process in a video on the next page. ",
              "instructor_notes": ""
            },
            {
              "id": 704700,
              "key": "5cb3ff5f-4eca-4a0f-a88d-ad85f2758353",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5cb3ff5f-4eca-4a0f-a88d-ad85f2758353",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What's the first line of code you'll need to include in your program if you want to be able to use the requests module?",
                "answers": [
                  {
                    "id": "a1535834999477",
                    "text": "`import requests`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535835070093",
                    "text": "`import get`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535835071012",
                    "text": "`get requests`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704692,
              "key": "768e2874-3122-42bf-883f-94c6c118eafb",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "768e2874-3122-42bf-883f-94c6c118eafb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What's the basic syntax for making a request?",
                "answers": [
                  {
                    "id": "a1535831587385",
                    "text": "`r = requests.get(https://api.github.com/events)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535831600149",
                    "text": "`r = get.requests('https://api.github.com/events')`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535831600758",
                    "text": "`r = requests.get('https://api.github.com/events')`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535831661783",
                    "text": "`r.get.requests('https://api.github.com/events')`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704695,
              "key": "4258fcb9-16e8-4519-8892-25af4f440bfd",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4258fcb9-16e8-4519-8892-25af4f440bfd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What kind of statement is `r = requests.get('https://api.github.com/events')`?",
                "answers": [
                  {
                    "id": "a1535832599546",
                    "text": "A function definition.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535832637051",
                    "text": "A conditional statement.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535832637578",
                    "text": "An assignment statement.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 704696,
              "key": "d3367a30-e3d7-475e-8754-dad2d2fd0925",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If we make a request and it's successful, we'll get back some data. We need to have some way of holding onto that data and using it later, so we assign it to a variable, `r`.\n\nBut what kind of data did we get back anyway?",
              "instructor_notes": ""
            },
            {
              "id": 704697,
              "key": "1f360c93-a41e-440d-ada9-a98cc9af639c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1f360c93-a41e-440d-ada9-a98cc9af639c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you haven't already, start up the Python interpreter and try making a request. Then, check out what the value of the `r` variable is.\n\n```bash\n>>> r = requests.get('https://api.github.com/events')\n>>> r\n```\n\nWhat did you get?",
                "answers": [
                  {
                    "id": "a1535832879008",
                    "text": "Several pages of data.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535832985829",
                    "text": "Simply `<Response [200]>`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535832992103",
                    "text": "Simply `<Response [404]>`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704698,
              "key": "93971a88-cce8-40e7-8561-b7b5542bcdcb",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93971a88-cce8-40e7-8561-b7b5542bcdcb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now try making a request again, but this time, try misspelling the last part of the URL, like this:\n\n```bash\n>>> r = requests.get('https://api.github.com/eventsblargh')\n```\n\nWhat value does `r` have now?",
                "answers": [
                  {
                    "id": "a1535833857581",
                    "text": "`<Response [203]>`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535834085318",
                    "text": "`<Response [206]>`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535834085942",
                    "text": "`<Response [404]>`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 681545,
          "key": "199229d5-4a0d-45ee-be20-e9a54e4e12f1",
          "title": "Making a request",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "199229d5-4a0d-45ee-be20-e9a54e4e12f1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817520,
              "key": "fd56807d-a0f4-478f-9fca-157a7491e2cc",
              "title": "IPND PY L6 N04 Making A Web Request SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1Ouu6aJ1ogE",
                "china_cdn_id": "1Ouu6aJ1ogE.mp4"
              }
            },
            {
              "id": 696357,
              "key": "4352a46e-646a-4da8-a9a5-e9982327d6ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There is a web server running in the workspace below. You can't reach it from your browser, only from code running inside the Python interpreter there. Use the `requests` module to access the URL `http://localhost:9999/secret` to discover the secret password, then use that to answer the quiz beneath the workspace!",
              "instructor_notes": ""
            },
            {
              "id": 696356,
              "key": "eb7540fb-77ad-4faf-b7c2-23f9aa60de06",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewSyxIltCy4X",
              "pool_id": "webterminal",
              "view_id": "repl-ergg8hvr5ju",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "/home/workspace/serve & python3 -i",
                    "terminalTitle": "python"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 696358,
              "key": "74fd833b-1f03-4ee8-91ee-4bcd8933592f",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "74fd833b-1f03-4ee8-91ee-4bcd8933592f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the secret password?",
                "matchers": [
                  {
                    "expression": "^mango\\s*$"
                  },
                  {
                    "expression": "404"
                  },
                  {
                    "expression": "200"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 681549,
          "key": "ad342a3c-ffd2-4b59-b155-a64bf2deae10",
          "title": "What can go wrong?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad342a3c-ffd2-4b59-b155-a64bf2deae10",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817522,
              "key": "89554992-58cb-4dfd-9b70-06950e620502",
              "title": "IPND PY L6 N05 What Can Go Wrong ANIM",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TcGVaWILZBo",
                "china_cdn_id": "TcGVaWILZBo.mp4"
              }
            },
            {
              "id": 689706,
              "key": "3e446ef2-67e7-44d7-9132-eeeacd81d55c",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e446ef2-67e7-44d7-9132-eeeacd81d55c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these network problems would stop your browser from being able to display the next video in this course?",
                "answers": [
                  {
                    "id": "a1533575154931",
                    "text": "Your Internet service stops working",
                    "is_correct": true
                  },
                  {
                    "id": "a1533575200279",
                    "text": "Udacity's web servers crash and don't restart",
                    "is_correct": true
                  },
                  {
                    "id": "a1533575208724",
                    "text": "The instructor's home wifi stops working",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 713979,
              "key": "19b14810-5307-4531-afe7-e801a9a577e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When something goes wrong with a request, there are a couple different general kinds of things you might see as a result.\n\nIf the request reached the server, you'll probably get a status code, like `404` or `200`. But if something prevented your code from reaching the server, your program will likely crash and you'll get a traceback.",
              "instructor_notes": ""
            },
            {
              "id": 713978,
              "key": "e8d1d54b-a791-49a4-a292-860c6f879708",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e8d1d54b-a791-49a4-a292-860c6f879708",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some different scenarios‚Äîsee if you can match them up with the result you would get."
                },
                "concepts_label": "What happened",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "Your code sent a request to the server, but the server could not find the page you wanted.",
                    "correct_answer": {
                      "id": "a1536716329836",
                      "text": "Status code `404`."
                    }
                  },
                  {
                    "text": "Your code sent a request to the server, but the server was down.",
                    "correct_answer": {
                      "id": "a1536716487482",
                      "text": "A traceback."
                    }
                  },
                  {
                    "text": "Your code tried to send a request, but your Internet connection was down.",
                    "correct_answer": {
                      "id": "a1536716503467",
                      "text": "A traceback."
                    }
                  },
                  {
                    "text": "Your code sent a request to the server, and the server successfully sent back the requested data.",
                    "correct_answer": {
                      "id": "a1536716504173",
                      "text": "Status code `200`."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536716504173",
                    "text": "Status code `200`."
                  },
                  {
                    "id": "a1536716487482",
                    "text": "A traceback."
                  },
                  {
                    "id": "a1536716503467",
                    "text": "A traceback."
                  },
                  {
                    "id": "a1536716329836",
                    "text": "Status code `404`."
                  }
                ]
              }
            },
            {
              "id": 713974,
              "key": "b95553a9-59a3-4702-9faa-f6fbd6c758fd",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b95553a9-59a3-4702-9faa-f6fbd6c758fd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "When we make a request to a server, the server can send back a status code, like `200` or `404`. If we like, we can set our code up to check for these and do something different depending on what status code we get.\n\nHere are some attempts at doing exactly that. Which of them would work?"
                },
                "concepts_label": "Code",
                "answers_label": "Works?",
                "concepts": [
                  {
                    "text": "```python\nif status_code == 404:\n    print(\"Page not found.\")\n```",
                    "correct_answer": {
                      "id": "a1536714862029",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nif r.status_code == 404:\n    print(\"Page not found.\")\n```",
                    "correct_answer": {
                      "id": "a1536715129059",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nif r(status_code) == 200:\n    print(\"Request successful!\")\n```",
                    "correct_answer": {
                      "id": "a1536715265520",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nif r.status_code == 200:\n    print(\"Request successful!\")\n```",
                    "correct_answer": {
                      "id": "a1536715292491",
                      "text": "Works"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536714862029",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1536715265520",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1536715129059",
                    "text": "Works"
                  },
                  {
                    "id": "a1536715292491",
                    "text": "Works"
                  }
                ]
              }
            },
            {
              "id": 713975,
              "key": "e32148ee-10c4-49d9-82f0-7616ee575285",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e32148ee-10c4-49d9-82f0-7616ee575285",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add some code that prints `\"Page not found.\"` if the status is `404`.",
                "Run your code by clicking on **NEW TERMINAL** and entering `python3 bad_request.py`."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Give it a try! In the workspace below, you'll find some code that makes a request from a page that doesn't exist ..."
            },
            {
              "id": 713973,
              "key": "7b571a42-d518-409a-9040-41de8684a2bc",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view31c9lb194u6",
              "pool_id": "webterminal",
              "view_id": "generic-nnxj5jbunk",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/bad_request.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 713976,
              "key": "d1f4619a-aa91-4da8-b9f9-f28f11d9c477",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 713977,
              "key": "144a86c5-8499-4166-9ab9-f8b44ada791b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport requests\nr = requests.get('https://www.google.com/monkeybagel/')\n\nif r.status_code == 404:\n    print(\"Page not found.\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 681551,
          "key": "4c37aa87-4416-41b9-9d9c-3c9b1867ba84",
          "title": "Try and exceptions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4c37aa87-4416-41b9-9d9c-3c9b1867ba84",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817523,
              "key": "d4643bb5-8d84-4f27-b85c-d9cd1faebdfa",
              "title": "IPND PY L6 N06 Trying And Exceptions ANIM",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bV6ZgXwL9Dk",
                "china_cdn_id": "bV6ZgXwL9Dk.mp4"
              }
            },
            {
              "id": 704713,
              "key": "69c7e546-1b67-483b-b815-5f5c0c93641f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "69c7e546-1b67-483b-b815-5f5c0c93641f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "`NameError`, `ZeroDivisionError`, and `OSError` are all examples of ...",
                "answers": [
                  {
                    "id": "a1535857606091",
                    "text": "exceptions.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535857655624",
                    "text": "executions.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535857656241",
                    "text": "exit errors.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704714,
              "key": "516844c5-f55e-4805-af46-8f3375aa74ae",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "516844c5-f55e-4805-af46-8f3375aa74ae",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When does Python detect **syntax** errors?",
                "answers": [
                  {
                    "id": "a1535857815972",
                    "text": "Before the code runs.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535857847075",
                    "text": "While the code is running.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535857994349",
                    "text": "After the code runs.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704715,
              "key": "c7091106-9bbc-4577-a416-38ad3987a6ea",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c7091106-9bbc-4577-a416-38ad3987a6ea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When might Python **raise an exception**?",
                "answers": [
                  {
                    "id": "a1535858139257",
                    "text": "Before the code runs.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535858181256",
                    "text": "While the code is running.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535858186631",
                    "text": "After the code runs.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704716,
              "key": "7dd9ca41-09bc-45c2-87e8-e5187f34c997",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7dd9ca41-09bc-45c2-87e8-e5187f34c997",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When Python raises an exception, what is the **default** behavior?",
                "answers": [
                  {
                    "id": "a1535858482934",
                    "text": "The program will continue running, but Python will display an error message when it finishes.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535858555261",
                    "text": "The program will exit (i.e., crash) and display a traceback.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535858555812",
                    "text": "The program will display a helpful, user-friendly message and then continue running.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 681607,
              "key": "ad7e0ea6-bf8b-4342-a407-80649dc62aa5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ad7e0ea6-bf8b-4342-a407-80649dc62aa5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will this code do?\n\n```python\ntry:\n    print(\"boom\"[6])\nexcept IndexError:\n    print(\"no boom today\")\n```",
                "answers": [
                  {
                    "id": "a1532464141943",
                    "text": "It will print `6`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464167389",
                    "text": "It will print `boom`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464174680",
                    "text": "It will print `no boom today`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1532464192498",
                    "text": "It will print a traceback.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 681610,
              "key": "3744716d-a4ce-4010-ac50-3ce788cc32ee",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3744716d-a4ce-4010-ac50-3ce788cc32ee",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will this code do?\n```python\ntry:\n    print(17 / 0)\nexcept IndexError:\n    print(\"negative forty-two\")\n```",
                "answers": [
                  {
                    "id": "a1532464335335",
                    "text": "It will print `17`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464350706",
                    "text": "It will print `0`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464365036",
                    "text": "It will print `negative forty-two`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464365657",
                    "text": "It will print a traceback.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 681648,
              "key": "417cb1ef-9871-4fc5-9830-24acb57d184b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "417cb1ef-9871-4fc5-9830-24acb57d184b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will this code do?\n```\ndef takeoff():\n    print(TAKEOFF)\n\ntry:\n    print(\"3, 2, 1, ...\")\n    takeoff()\nexcept NameError:\n    print(\"Failed to launch\")\n```",
                "answers": [
                  {
                    "id": "a1532464506744",
                    "text": "It will print `3, 2, 1, ...` and then it will print `TAKEOFF`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464530819",
                    "text": "It will print `3, 2, 1, ...` and then it will print `Failed to launch`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1532464531829",
                    "text": "It will print `Failed to launch` only.",
                    "is_correct": false
                  },
                  {
                    "id": "a1532464572106",
                    "text": "It will print a traceback.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 714249,
              "key": "1be011b1-15cc-4cb1-9daf-8034492866c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the workspace below, you'll find some code that has a number of errors. When you run the code, it will raise an exception and crash.\n\nYour job is to add `try ... except` statements to handle each exception, so that the user gets a helpful message rather than the program crashing.\n\n(Note that there are other ways you could modify this code to avoid the exceptions besides using `try ... except` statements. But the point of the exercise is to _handle_ the exceptions, not avoid them!)",
              "instructor_notes": ""
            },
            {
              "id": 691105,
              "key": "c2938a28-1275-4650-a9d3-865fc12d4b7a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9gvj41j2g7",
              "pool_id": "webterminal",
              "view_id": "generic-jgswptmoud",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/errors.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 704719,
              "key": "7d175227-2c60-458a-b542-80cc7e0c3c16",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 704718,
              "key": "2267d177-a3fa-4c3d-b19a-2f78e38af3cb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way you could do it:\n\n```python\ntry:\n    r = requests.get(\"https://www.udacity.com\")\nexcept NameError:\n    print(\"Did you forget to import the requests module?\")\n\ntry:\n    print(r.text)\nexcept NameError:\n    print(\"There seems to be a NameError; r is not defined!\")\n\nstring = 'short'\ntry:\n    for letter in range(6):\n        print(string[letter])\nexcept IndexError:\n    print(\"Did you try to index past the end of the string?\")\n\nprint(\"Woohoo! You got them all!\")\n```\n\nNote that these are some simplified examples to get practice using `try ... except`. They're not especially realistic scenarios (e.g., there's no reason not to simply add `import requests` rather than adding the `try ... except` statement to handle the NameError).",
              "instructor_notes": ""
            },
            {
              "id": 714079,
              "key": "f38e3ed2-2a0b-4f9e-b625-7c3d887577fd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Handling a connection error\n\nHere's something a little more realistic. At the end of the video, Karl mentioned that the `requests` module has an exception for when you have trouble connecting to the server:\n\n```python\nrequests.exceptions.ConnectionError\n```\n\nAs Karl showed, we can use this exception with an `if` statement to check if there was a problem connecting to the server, and print a useful message to the user (instead of crashing). If you haven't already, give this a try for yourself ...",
              "instructor_notes": ""
            },
            {
              "id": 714089,
              "key": "d5391cf0-9ba5-4530-a0b9-714fd19c64b7",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5391cf0-9ba5-4530-a0b9-714fd19c64b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Write a `try ... except` statement that tries to make a request from a Website (such as `http://www.udacity.com`).",
                "If your program connects with the server and gets a response, have it print the status code that the server sends back.",
                "If your program fails to connect with the server, have it print `Could not connect to server.`",
                "Try running your program with a working Internet connection.",
                "Try disconnecting your Internet connection and running the program again."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In your code editor, write some code that tries to make a request, and then prints a helpful message if there's a connection error.\n\n**You'll need to use the code editor and terminal on your own machine for this (not the workspace here in the browser).**"
            },
            {
              "id": 714106,
              "key": "e9a301d2-eea7-41dc-923b-c6e1a0ade0c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 714103,
              "key": "69657024-d98d-4df8-92b5-3d7683372a91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\nimport requests\n\ntry:\n    r = requests.get(\"https://www.udacity.com\")\n    print(r) # If you did print(r.status_code), that also works!\nexcept requests.exceptions.ConnectionError:\n    print(\"Could not connect to server.\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 689707,
          "key": "05f51477-ccbb-429e-a73a-85c79ff46d7b",
          "title": "What is JSON?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "05f51477-ccbb-429e-a73a-85c79ff46d7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817524,
              "key": "ad2b9389-64ba-41a1-8c9a-08e646407369",
              "title": "IPND PY L6 N07 What Is JSON- HS-SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fAUKOb6igVw",
                "china_cdn_id": "fAUKOb6igVw.mp4"
              }
            },
            {
              "id": 704831,
              "key": "59f75671-175a-493e-b2ab-79231fd9523e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "59f75671-175a-493e-b2ab-79231fd9523e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these best describes JSON?",
                "answers": [
                  {
                    "id": "a1535906530615",
                    "text": "A format used for structuring data, which is often used with Web APIs.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535908783145",
                    "text": "A full programming language, just like Python.",
                    "is_correct": false
                  },
                  {
                    "id": "a1535908859648",
                    "text": "A type of HTML that is often used with Web APIs.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704832,
              "key": "9c989830-1962-44e5-a615-114c78294e79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can find a relatively short description of JSON at [json.org](https://www.json.org/). The page probably won't all make sense to you yet, but it's worth taking a quick look just to get the gist.\n\nOne thing to notice is how the data structures that they describe on the above page are very similar to Python _lists_ and _dictionaries_ (you haven't seen dictionaries yet, but we'll be explaining them in a moment).\n\nThis similarity isn't accidental‚Äîone of the main ideas behind JSON is to provide data in a structure that many different languages (including Python) can easily interact with.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 704834,
          "key": "1cfe74d0-873e-4e95-94d3-f3fcd50a7bfb",
          "title": "Dictionaries (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1cfe74d0-873e-4e95-94d3-f3fcd50a7bfb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817525,
              "key": "756f4f26-1ce3-4f4f-8e0a-cafb06cab0a2",
              "title": "IPND PY L6 N08 Using Dictionaries ANIM",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3uT-K_5zO0U",
                "china_cdn_id": "3uT-K_5zO0U.mp4"
              }
            },
            {
              "id": 704837,
              "key": "14a09cb7-7d74-4ecc-b9e5-ebb638289107",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14a09cb7-7d74-4ecc-b9e5-ebb638289107",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's the dictionary Kelly just described in the video:\n\n```python\nwords = {\n    'turtle': 'reptile',\n    'frog': 'amphibian'\n}\n```\n\nSee if you can label each of these parts:"
                },
                "concepts_label": "Code",
                "answers_label": "What is it?",
                "concepts": [
                  {
                    "text": "`'turtle'`",
                    "correct_answer": {
                      "id": "a1535912697219",
                      "text": "key"
                    }
                  },
                  {
                    "text": "`'reptile'`",
                    "correct_answer": {
                      "id": "a1535912937228",
                      "text": "value"
                    }
                  },
                  {
                    "text": "`'turtle': 'reptile'`",
                    "correct_answer": {
                      "id": "a1535912937895",
                      "text": "entry"
                    }
                  },
                  {
                    "text": "`'frog'`",
                    "correct_answer": {
                      "id": "a1535912987744",
                      "text": "key"
                    }
                  },
                  {
                    "text": "`'amphibian'`",
                    "correct_answer": {
                      "id": "a1535912998310",
                      "text": "value"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1535912937895",
                    "text": "entry"
                  },
                  {
                    "id": "a1535912987744",
                    "text": "key"
                  },
                  {
                    "id": "a1535912937228",
                    "text": "value"
                  },
                  {
                    "id": "a1535913302882",
                    "text": "entry"
                  },
                  {
                    "id": "a1535912998310",
                    "text": "value"
                  },
                  {
                    "id": "a1535912697219",
                    "text": "key"
                  }
                ]
              }
            },
            {
              "id": 704838,
              "key": "6e08d39b-d2f9-4119-af83-55dcd3a3215b",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e08d39b-d2f9-4119-af83-55dcd3a3215b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "See if you can correctly describe what each of these bits of code will do:"
                },
                "concepts_label": "Code",
                "answers_label": "What does it do?",
                "concepts": [
                  {
                    "text": "`\nd = {}\n`",
                    "correct_answer": {
                      "id": "a1535913673739",
                      "text": "Creates an empty dictionary."
                    }
                  },
                  {
                    "text": "`d[\"squid\"] = \"A tentacled mollusk of the briny deep\"`",
                    "correct_answer": {
                      "id": "a1535913779248",
                      "text": "Adds a new entry to the dictionary (or replaces the value of an existing entry)."
                    }
                  },
                  {
                    "text": "`\nd[\"squid\"]\n`",
                    "correct_answer": {
                      "id": "a1535913831082",
                      "text": "Gets the value that's paired with this key."
                    }
                  },
                  {
                    "text": "`\nd[\"squid\"] += \" that eats fish, crabs, and wayward elephants.\"\n`",
                    "correct_answer": {
                      "id": "a1535913886898",
                      "text": "Modifies the value of an existing entry."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1535913779248",
                    "text": "Adds a new entry to the dictionary (or replaces the value of an existing entry)."
                  },
                  {
                    "id": "a1535913673739",
                    "text": "Creates an empty dictionary."
                  },
                  {
                    "id": "a1535913886898",
                    "text": "Modifies the value of an existing entry."
                  },
                  {
                    "id": "a1535913831082",
                    "text": "Gets the value that's paired with this key."
                  }
                ]
              }
            },
            {
              "id": 704840,
              "key": "26c043ca-38ba-4d30-909f-5cb4cc281302",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "26c043ca-38ba-4d30-909f-5cb4cc281302",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a new dictionary (either an empty one or one with entries already in it).",
                "Add an entry to the dictionary.",
                "Provide a key and get back the value the key is paired with.",
                "Modify an existing entry."
              ],
              "positive_feedback": "**Great!**\n\nDictionaries are really useful data structures, so it's good to get comfortable with how they work.",
              "video_feedback": null,
              "description": "Now give it a try for yourself‚Äîmake a dictionary and play around with the different operations we just discussed.\n\nBe sure to at least try the following:"
            },
            {
              "id": 704841,
              "key": "73dc9b72-5da2-4d7c-8d99-9345ea2ab8ee",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewbfiaenqh4au",
              "pool_id": "webterminal",
              "view_id": "repl-z978wb9of8",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowClose": false,
                    "replCommand": "python3 -i",
                    "terminalTitle": "REPL"
                  },
                  "kind": "repl"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 704843,
              "key": "3c0009a1-8d85-45c0-bf50-47094b8a47b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 704842,
              "key": "0f097e92-f638-4f7c-be3c-28398cc45dc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nThere's no single correct answer to this exercise (the point is just to play around), but here's an example for reference:\n\n```text\n>>> d = {'key1': 'value1'}\n>>> d['key2'] = 'value2'\n>>> d['key1']\n'value1'\n>>> d['key2']\n'value2'\n>>> d\n{'key1': 'value1', 'key2': 'value2'}\n>>> d['key2'] = 'foo'\n>>> d['key2'] += 'bar'\n>>> d['key2']\n'foobar'\n>>> d\n{'key1': 'value1', 'key2': 'foobar'}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 681554,
          "key": "743180d9-4281-42c5-81c3-29e25c201861",
          "title": "Dictionaries (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "743180d9-4281-42c5-81c3-29e25c201861",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 704845,
              "key": "fa21e6b0-a11e-4cca-8507-063958bcd6dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dictionaries (2/2)\n\nNow that you've seen the basics of how to use a dictionary, let's try some more challenging exercises.\n\nTo get the most out of these exercises, you should first try to walk through the code mentally and predict the output. Then give it a try for yourself in the Python interpreter!\n\nAt the end of the page, you'll find a video in which Kelly walks through all of the problems here and their solutions.",
              "instructor_notes": ""
            },
            {
              "id": 689715,
              "key": "7c91ea90-4024-4640-b3de-944398298e76",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7c91ea90-4024-4640-b3de-944398298e76",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does this code print?\n```python\nd = {'bird': 'tweet', 'fish': 'splash'}\nd['wolf'] = 'bark'\nprint(d['fish'][1] + d['wolf'][1:])\n```",
                "answers": [
                  {
                    "id": "a1533578086192",
                    "text": "lash",
                    "is_correct": false
                  },
                  {
                    "id": "a1533578137494",
                    "text": "park",
                    "is_correct": true
                  },
                  {
                    "id": "a1533578139054",
                    "text": "bolf",
                    "is_correct": false
                  },
                  {
                    "id": "a1533578140572",
                    "text": "firk",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 689717,
              "key": "8970460b-d3ee-4cb7-8797-c43424b91b72",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8970460b-d3ee-4cb7-8797-c43424b91b72",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens when you try to look up a key in a dictionary, but the key isn't there? \n\nFor example:\n```python\nd = {'a': 'alpha', 'b': 'bravo', 'c': 'charlie'}\nprint(d['e'])\n```\n\nTry this out in the Python interpreter and see for yourself.",
                "answers": [
                  {
                    "id": "a1533579108137",
                    "text": "This prints the special value `None`",
                    "is_correct": false
                  },
                  {
                    "id": "a1533579185770",
                    "text": "This prints the Boolean value `False`",
                    "is_correct": false
                  },
                  {
                    "id": "a1533579186423",
                    "text": "This produces an exception, `IndexError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1533579187000",
                    "text": "This produces an exception, `KeyError`",
                    "is_correct": true
                  },
                  {
                    "id": "a1533579221202",
                    "text": "This is a `SyntaxError`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 689731,
              "key": "b83054c8-92dc-489d-835e-fae820e0f339",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b83054c8-92dc-489d-835e-fae820e0f339",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here is a dictionary containing English and Spanish words:\n```python\ntranslate = {\n    'dog': 'perro',\n    'tuna': 'at√πn', \n    'orange': 'naranja', \n    'prickly-pear': 'tuna'\n}\n```                 \nLabel which strings are used as **keys** and which strings are used as **values**."
                },
                "concepts_label": "Word",
                "answers_label": "Dictionary Part",
                "concepts": [
                  {
                    "text": "`'dog'`",
                    "correct_answer": {
                      "id": "a1533579869468",
                      "text": "key"
                    }
                  },
                  {
                    "text": "`'perro'`",
                    "correct_answer": {
                      "id": "a1533580901468",
                      "text": "value"
                    }
                  },
                  {
                    "text": "`'tuna'`",
                    "correct_answer": {
                      "id": "a1533580902822",
                      "text": "key and value"
                    }
                  },
                  {
                    "text": "`'at√πn'`",
                    "correct_answer": {
                      "id": "a1533580903441",
                      "text": "value"
                    }
                  },
                  {
                    "text": "`'orange'`",
                    "correct_answer": {
                      "id": "a1533580964423",
                      "text": "key"
                    }
                  },
                  {
                    "text": "`'naranja'`",
                    "correct_answer": {
                      "id": "a1533580969875",
                      "text": "value"
                    }
                  },
                  {
                    "text": "`'prickly-pear'`",
                    "correct_answer": {
                      "id": "a1533580976401",
                      "text": "key"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1533580969875",
                    "text": "value"
                  },
                  {
                    "id": "a1533580901468",
                    "text": "value"
                  },
                  {
                    "id": "a1533580976401",
                    "text": "key"
                  },
                  {
                    "id": "a1533580964423",
                    "text": "key"
                  },
                  {
                    "id": "a1533580902822",
                    "text": "key and value"
                  },
                  {
                    "id": "a1533580903441",
                    "text": "value"
                  },
                  {
                    "id": "a1533579869468",
                    "text": "key"
                  }
                ]
              }
            },
            {
              "id": 689732,
              "key": "466770eb-2cee-4f8d-81b1-0b72b061db9d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "466770eb-2cee-4f8d-81b1-0b72b061db9d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Earlier you saw the `in` operator on strings and lists. It also works on dictionaries! Experiment with it and see if you can find which of these descriptions is accurate.",
                "answers": [
                  {
                    "id": "a1533581133122",
                    "text": "If `d` is a dictionary, then `x in d` asks whether `x` is a value in that dictionary; that is, whether there exists a key `k` such that `d[k] == x`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533581197790",
                    "text": "If `d` is a dictionary, then `x in d` asks whether `x` is a sub-dictionary of that dictionary; that is, if all of the entries in `x` are in `d`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533581236177",
                    "text": "If `d` is a dictionary, then `x in d` asks whether `x` is a key in that dictionary; that is, whether `d[x]` will be a valid lookup.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533581254611",
                    "text": "The `in` operator does not work on dictionaries; only on strings and lists.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 681904,
              "key": "7816e6df-43f1-4960-8ab8-545caf747d9c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7816e6df-43f1-4960-8ab8-545caf747d9c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Earlier, you learned that lists are *mutable*, while strings are *immutable*. Based on what you learned here, are dictionaries mutable or not?",
                "answers": [
                  {
                    "id": "a1532538701415",
                    "text": "mutable",
                    "is_correct": true
                  },
                  {
                    "id": "a1532538745039",
                    "text": "immutable",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 689734,
              "key": "45d5856e-1aeb-46d6-9767-dc1eec9f41e6",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "45d5856e-1aeb-46d6-9767-dc1eec9f41e6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Try running this code. What does the `del` statement do?\n```python\nd = {'fish': 'salmon', 'cat': 'lion'}\ndel d['fish']\nprint(d)\n```",
                "answers": [
                  {
                    "id": "a1533581805445",
                    "text": "It `del`ivers a fish from the dictionary, returning `'salmon'`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533581821647",
                    "text": "It adds a `del`ay to the `'fish'` entry, slowing it down as a means of testing code performance.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533581822653",
                    "text": "It `del`uges the dictionary with copies of the `'fish'` entry.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533581823556",
                    "text": "It `del`etes the dictionary entry for `'fish'`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 817528,
              "key": "e865bf60-15d6-4b47-a3bf-e3689fd7946e",
              "title": "IPND PY L6 N09 Solutions To Dictionary Quizzes SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w2X3NjF48Ss",
                "china_cdn_id": "w2X3NjF48Ss.mp4"
              }
            }
          ]
        },
        {
          "id": 703631,
          "key": "7f275b4d-3230-41dc-a9d7-e86b030f3965",
          "title": "Looping over lists (review)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f275b4d-3230-41dc-a9d7-e86b030f3965",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703859,
              "key": "3694d884-3c01-487f-a87f-9dfd47d1e009",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over lists (review)\n\nWe've mentioned that dictionaries are similar to lists. One way in which they are similar is that both data types can be _looped over_. \n\nRemember, when we say \"loop over a list\", what we mean is that **we use the list in a `for` loop**, like this:\n\n```python\nsome_list = [\"a\", \"b\", \"c\"]\nfor item in some_list:\n    # do something\n```\n\nThe loop will run once for each item in the list. And each time the loop runs, the next item in the list gets assigned to the loop variable.\n\nIn this case, the loop variable is called `item`, and it gets assigned the values `\"a\"`, `\"b\"`, and `\"c\"`, from the list.",
              "instructor_notes": ""
            },
            {
              "id": 703870,
              "key": "a6f0a565-eda3-4be6-a19a-ef7441900e07",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a6f0a565-eda3-4be6-a19a-ef7441900e07",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add a `for` loop that loops over the list.",
                "Use the `print` function to output all the items in the list to the terminal."
              ],
              "positive_feedback": "**Great!** Now let's see how we can do something similar with dictionaries.",
              "video_feedback": null,
              "description": "Here's a short exercise to make sure the idea of looping over a list is fresh in your mind. \n\nYou'll find a list in the workspace below. Use a `for` loop to print out the items in the list."
            },
            {
              "id": 703876,
              "key": "89622d68-66d7-4f79-8bc0-b4c3c88d16a8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view4vaxmmi5z9m",
              "pool_id": "webterminal",
              "view_id": "generic-39647838dl2",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/loop_over_list.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 703890,
              "key": "e2a7d68f-0e17-4e33-b99c-116ab54d804b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 703891,
              "key": "664e6b78-d420-4bd9-9222-e04b848d7b26",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nsome_list = [1, 2, 3, 4, 5]\nfor item in some_list:\n    print(item)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 703892,
          "key": "070fe9d4-384a-47aa-b01a-8437240895ee",
          "title": "Looping over dictionaries (1/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "070fe9d4-384a-47aa-b01a-8437240895ee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703893,
              "key": "d6fa1210-0bf8-417a-916d-baeed1dbdfee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over dictionaries (1/4)",
              "instructor_notes": ""
            },
            {
              "id": 703894,
              "key": "654074f9-0967-4a01-8cff-8bf83b1c7648",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We just reviewed how to loop over a _list_.\n\nIt turns out that we can loop over a _dictionary_ in a very similar way:\n\n```python\ndictionary = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\nfor thing in dictionary:\n    # do something\n```\n\nBut what will this actually loop over? Each dictionary entry has two things in it‚Äîit has both a _key_ and a _value_. So will this loop over the keys? Or the values? Or both?\n\nGive it a try and see for yourself!",
              "instructor_notes": ""
            },
            {
              "id": 703895,
              "key": "0a3aa783-ff1f-43ff-8034-a393e0d92441",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0a3aa783-ff1f-43ff-8034-a393e0d92441",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Use the dictionary in a `for` loop.",
                "Use the `print` function to output each item to the terminal."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find a dictionary with some of my favorite things.  Just like you did with the list on the previous page, loop over the dictionary and print each item."
            },
            {
              "id": 703897,
              "key": "12d6cd71-f446-479e-9701-6beed6db08fd",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewbumew9rr7th",
              "pool_id": "webterminal",
              "view_id": "generic-wzu1ijrmkos",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/favorites.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 703898,
              "key": "ebe8a75c-0de5-464c-9af4-320a57c50e7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 703899,
              "key": "3c613f8c-d796-4285-a08f-31b13153467d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nfor thing in favorites:\n    print(thing)\n```",
              "instructor_notes": ""
            },
            {
              "id": 703900,
              "key": "9a1c86da-4885-46fd-8880-97c33e47cb45",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9a1c86da-4885-46fd-8880-97c33e47cb45",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "So what did it loop over‚Äîkeys or values?\n\n(What got printed out to the terminal?)",
                "answers": [
                  {
                    "id": "a1535588156565",
                    "text": "Keys",
                    "is_correct": true
                  },
                  {
                    "id": "a1535588200451",
                    "text": "Values",
                    "is_correct": false
                  },
                  {
                    "id": "a1535588233588",
                    "text": "Both keys and values",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 703918,
              "key": "2eb1689a-c5bb-42ee-a79d-42fba2559f42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So if we simply loop over a dictionary, Python's default behavior is to loop over the _keys_ in that dictionary. Since that's the case, we should probably call the variable we're using `key` instead of `thing`:\n\n```python\nfor key in favorites:\n    print(key)\n```\n\nPython also has a `keys` method, which we can use if we prefer. This code will have exactly the same result:\n\n```python\nfor key in favorites.keys():\n    print(key)\n```\n\nThe _method call_ `favorites.keys()` returns back the dictionary's keys, which we can then loop over. This is what Python is doing by default if we don't tell it otherwise.\n\nGo back up to the workspace and try this out for yourself‚Äîyou should get the same result.",
              "instructor_notes": ""
            },
            {
              "id": 703919,
              "key": "9586a247-3b0e-4751-9a24-211aac133f6d",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9586a247-3b0e-4751-9a24-211aac133f6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I tried replacing `for key in favorites:` with `for key in favorites.keys():`."
              ],
              "positive_feedback": "**Good!**\n\nNow let's see how we can loop over the dictionary's **values**!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 703908,
          "key": "6e15cb43-53c5-4e3a-b120-b1df8c660a48",
          "title": "Looping over dictionaries (2/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6e15cb43-53c5-4e3a-b120-b1df8c660a48",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703920,
              "key": "ef0e17b1-960f-4cd3-8cf9-e41bc71d1ff6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over dictionaries (2/4)",
              "instructor_notes": ""
            },
            {
              "id": 703915,
              "key": "4a02a916-5703-44db-8261-322ad7c13358",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you can use `favorites.keys()` to loop over the dictionary's **keys**, what do you think you could use to loop over the dictionary's **values**?\n\nIn the workspace below is the loop that prints out the dictionary's keys. See if you can get it to print out the values instead. The result should be:\n\n```text\npurple\n42\nturtle\npython\n```",
              "instructor_notes": ""
            },
            {
              "id": 703926,
              "key": "dbeb45c3-9e48-46ba-a58a-b8834cf10b3d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewcozjmsnvl6q",
              "pool_id": "webterminal",
              "view_id": "generic-jrahk9b4zmi",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/favorites.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 703930,
              "key": "af66b773-c192-4ddf-8178-cda4c6cf4b04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 703927,
              "key": "29097855-56a8-48a3-8f5e-97d4e3af165c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nJust like the `keys` method that returns the dictionary's keys, there's a `values` method that returns the dictionary's values:\n\n```python\nfor value in favorites.values():\n    print(value)\n```",
              "instructor_notes": ""
            },
            {
              "id": 703929,
              "key": "75fea076-49af-4fed-a3fe-8aed51e73954",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "75fea076-49af-4fed-a3fe-8aed51e73954",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Have a look at this code:\n\n```python\nfor foo in favorites.values():\n    print(foo)\n```\n\nWould this code work? Or does the variable have to be named `value`?",
                "answers": [
                  {
                    "id": "a1535602254989",
                    "text": "Yes, `foo` would work.",
                    "is_correct": true
                  },
                  {
                    "id": "a1535602570582",
                    "text": "No, the variable has to be named `value` in order to loop over the dictionary's values.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 704577,
          "key": "5806b894-3d18-425e-af33-747d889f3183",
          "title": "Looping over dictionaries (3/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5806b894-3d18-425e-af33-747d889f3183",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 704578,
              "key": "34468a52-274b-4b5d-9d54-bc18313a9589",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over dictionaries (3/4)",
              "instructor_notes": ""
            },
            {
              "id": 704579,
              "key": "45b6f2ac-e75c-4b7a-8f7e-fbdff7d7c4f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So you can loop over a dictionary's keys using `keys()` and you can loop over a dictionary's values using `values()`. What if you want to loop over the full entries?\n\nFor that, you can use `items()`. Like this:\n\n```python\nfor entry in favorites.items():\n   print(entry)\n```\n\nThe output will be:\n```\n('color', 'purple')\n('number', 42)\n('animal', 'turtle')\n('language', 'python')\n```\n\nGive it a try!",
              "instructor_notes": ""
            },
            {
              "id": 704581,
              "key": "6ea97a58-cee3-4398-9e52-4cac3fb9f3a2",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "views3ofelkis6",
              "pool_id": "webterminal",
              "view_id": "generic-l9yo78jr1w",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/favorites.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 704582,
              "key": "789f577d-1fd1-4a3d-afee-60580d7e7859",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice how each entry got printed as a pair of the key and value, separated by a comma, as in:\n\n```text\n('color', 'purple')\n```\n\nAs we loop over each of the entries, we can assign **the whole entry** to the loop variable, like this:\n\n\n```python\nfor entry in favorites.items():\n   print(entry)\n```\n\nOr we can assign **the key and value separately**, with each going to its own variable:\n\n```python\nfor key, value in favorites.items():\n    print(key)\n    print(value)\n```",
              "instructor_notes": ""
            },
            {
              "id": 714650,
              "key": "aba55a8a-0d87-459b-82aa-087f72fa2075",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ‚ÅâÔ∏è Wait, what?\n\nIt might be hard to see what's really going on with those last two blocks of code (above). So let's go over them again, with some concrete examples.\n\nIn the first case, we have **one** loop variable, called `entry`. And we are assigning it an entire entry, with both key and value, each time the loop runs. Like this:",
              "instructor_notes": ""
            },
            {
              "id": 704593,
              "key": "fef8a3f4-562c-43b3-8bf4-368912c0007d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5b9b0eb1_looping-over-dictionaries-02/looping-over-dictionaries-02.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fef8a3f4-562c-43b3-8bf4-368912c0007d",
              "caption": "In this code, we are looping over a dictionary and only using **one** loop variable. So each time we go through the loop, an entire entry will get assigned to that variable.",
              "alt": "Looping over the entries in the dictionary.",
              "width": 455,
              "height": 138,
              "instructor_notes": null
            },
            {
              "id": 714651,
              "key": "31c71a41-70e3-4468-8d00-a78bf2b56250",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And in the second piece of code, we have **two** loop variables, called `key` and `value`,  that are separated by commas. Each time the loop runs, we assign the key to one of the variables, and the value to the other. Like this:",
              "instructor_notes": ""
            },
            {
              "id": 704599,
              "key": "0590e07a-758b-4a3c-aa93-c86d69f37e92",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5b9b0e95_looping-over-dictionaries-01/looping-over-dictionaries-01.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0590e07a-758b-4a3c-aa93-c86d69f37e92",
              "caption": "In this code, we are looping over a dictionary and using **two** loop variables. So each time we go through the loop, the key from the current entry will get assigned to the first variable, and the value from the current entry will get assigned to the second variable.",
              "alt": "Looping over the entries in a dictionary, and assigning the keys and values to different variables.",
              "width": 524,
              "height": 179,
              "instructor_notes": null
            },
            {
              "id": 704602,
              "key": "ba229774-8fe9-481f-baf7-33c9f27d18c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The first entry in the dictionary is `('color', 'purple')`. So `'color'`, will get assigned to the `key` variable, and `'purple'` will get assigned to the `value` variable. Each of these will then get printed on its own line:\n\n```text\ncolor\npurple\n```\n\nAnd then we loop through and repeat that for all the rest of the entries.\n\nBut printing out the variables by themselves is kind of boring. Here's something more interesting we could do with them:\n\n```python\nfor key, value in favorites.items():\n\tprint(f\"my favorite {key} is {value}\")\n```\n\nFor the first entry, this will print:\n\n```text\nmy favorite color is purple\n```",
              "instructor_notes": ""
            },
            {
              "id": 704605,
              "key": "64a7def9-40ca-4340-b3b6-be60c5edf95a",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "64a7def9-40ca-4340-b3b6-be60c5edf95a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I looped over the dictionary entries and printed the output shown above."
              ],
              "positive_feedback": "**Woohoo!**",
              "video_feedback": null,
              "description": "Go back up to the workspace and try this out! The goal is to get the following output:\n\n```text\nmy favorite color is purple\nmy favorite number is 42\nmy favorite animal is turtle\nmy favorite language is python\n```"
            },
            {
              "id": 704583,
              "key": "41bff244-dff8-41ca-b165-8c9f537fa034",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tuples\nYou saw that when you printed out the full dictionary entries, you got output like this:\n\n```text\n('color', 'purple')\n('number', 42)\n('animal', 'turtle')\n('language', 'python')\n```\n\nThis looks a little different from other things we've seen. The code `('color', 'purple')` looks kind of like a list, but it has parentheses `( )` rather than square brackets `[ ]`.\n\nThis is a type of data structure called a **tuple**. Tuples are _sequences_, just like lists, but they are _immutable_. With a list, you can change the values in the list after it's been created; with a tuple, you can't. When we call the `items()` method, as in `favorites.items()`, what we get back is essentially a sequence of tuples‚Äîone for each entry in the dictionary.",
              "instructor_notes": ""
            },
            {
              "id": 714658,
              "key": "94ed8250-4058-401d-a12d-62cef57a38fa",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "94ed8250-4058-401d-a12d-62cef57a38fa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "What type of data structure is each of these? And is it mutable or immutable?"
                },
                "concepts_label": "Code",
                "answers_label": "Data type and mutability",
                "concepts": [
                  {
                    "text": "`[1, 2, 3, 4]`",
                    "correct_answer": {
                      "id": "a1536889328488",
                      "text": "list (mutable)"
                    }
                  },
                  {
                    "text": "`{1: 2, 3: 4}`",
                    "correct_answer": {
                      "id": "a1536889386174",
                      "text": "dictionary (mutable)"
                    }
                  },
                  {
                    "text": "`(1, 2, 3, 4)`",
                    "correct_answer": {
                      "id": "a1536889415717",
                      "text": "tuple (immutable)"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536889415717",
                    "text": "tuple (immutable)"
                  },
                  {
                    "id": "a1536889485103",
                    "text": "dictionary (immutable)"
                  },
                  {
                    "id": "a1536889328488",
                    "text": "list (mutable)"
                  },
                  {
                    "id": "a1536889386174",
                    "text": "dictionary (mutable)"
                  },
                  {
                    "id": "a1536889490664",
                    "text": "tuple (mutable)"
                  },
                  {
                    "id": "a1536889478753",
                    "text": "list (immutable)"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 681555,
          "key": "fca183c4-6460-4b23-925f-eede72c0aedd",
          "title": "Looping over dictionaries (4/4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fca183c4-6460-4b23-925f-eede72c0aedd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 703563,
              "key": "d78deb4f-8912-4626-b5c2-bc4af1dca1dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over dictionaries (4/4)",
              "instructor_notes": ""
            },
            {
              "id": 704610,
              "key": "67db40a4-f651-4b82-8425-be0fc0218754",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "67db40a4-f651-4b82-8425-be0fc0218754",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose that we have this dictionary:\n\n```python\nd = {'key1': 'value1', 'key2': 'value2'} \n```\n\nMatch each loop with the type of output it will print.\n"
                },
                "concepts_label": "Loop",
                "answers_label": "Output",
                "concepts": [
                  {
                    "text": "```python\nfor x in d.items():\n    print(x)\n```",
                    "correct_answer": {
                      "id": "a1535732582122",
                      "text": "```text\n('key1', 'value1')\n('key2', 'value2')\n```"
                    }
                  },
                  {
                    "text": "```python\nfor x in d.values():\n    print(x)\n```",
                    "correct_answer": {
                      "id": "a1535732776994",
                      "text": "```text\nvalue1\nvalue2\n```"
                    }
                  },
                  {
                    "text": "```python\nfor x in d:\n    print(x)\n```",
                    "correct_answer": {
                      "id": "a1535732819356",
                      "text": "```text\nkey1\nkey2\n```"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1535732819356",
                    "text": "```text\nkey1\nkey2\n```"
                  },
                  {
                    "id": "a1535732776994",
                    "text": "```text\nvalue1\nvalue2\n```"
                  },
                  {
                    "id": "a1535732582122",
                    "text": "```text\n('key1', 'value1')\n('key2', 'value2')\n```"
                  }
                ]
              }
            },
            {
              "id": 704655,
              "key": "afa9647e-085f-49b7-b7dc-c84623f16871",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Splitting dictionaries to multiple lines\n\nSometimes dictionaries get really long, or are simply hard to read when everything is on a single line. Like our `favorites` dictionary:\n\n```python\nfavorites = {'color': 'purple', 'number': 42, 'animal': 'turtle', 'language': 'python'}\n```\n\nIf we like, we can split this to multiple lines using the following format:\n\n```python\n\nfavorites = {\n    'color': 'purple',\n    'number': 42,\n    'animal': 'turtle',\n    'language': 'python'\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 704656,
              "key": "7fdc3b99-9d68-453e-85fb-afbcd9650c2f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## üîç How would I know?\n\nAlthough we just told you how to do it, we also want you to continue developing a feeling for how to find this kind of information for yourself (since that is a big part of being an effective programmer).\n\nIf you were sitting at your computer and wondering how to break up a list or dictionary on multiple lines, you could try a [search for something like \"python dictionary multiple lines\"](https://www.google.com/search?source=hp&ei=37GJW-j-MqiH0gLAobbwCg&q=python+dictionary+multiple+lines). That search will turn up pages like [this helpful Stack Overflow post](https://stackoverflow.com/questions/6388187/what-is-the-proper-way-to-format-a-multi-line-dict-in-python).\n\nYou would also come across this info if you were being super studious and reading through [the PEP-8 style guidelines](https://www.python.org/dev/peps/pep-0008/), which is something that you may consider if you get really serious about learning Python at a professional level. The information can be found in the section on [Code Layout](https://www.python.org/dev/peps/pep-0008/#code-lay-out) (if you scroll down a bit, you'll find examples of how to format multi-line lists, similar to what we showed above with dictionaries).",
              "instructor_notes": ""
            },
            {
              "id": 696514,
              "key": "977efcf6-024f-49a3-b7cb-6b1bc66bf8a8",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "977efcf6-024f-49a3-b7cb-6b1bc66bf8a8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "It's common to see lists and dictionaries used together. For example:\n\n```python\nfavorites = {\n    'color': 'purple',\n    'number': 42,\n    'animal': 'turtle',\n    'language': 'python'\n}\n\nlist = []\nfor key in favorites:\n    list.append(key)\n\nprint(list)\n```\nWhat will this code print?",
                "answers": [
                  {
                    "id": "a1535068567910",
                    "text": "`['purple', 42, 'turtle', 'python']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535131277726",
                    "text": "`['color', 'number', 'animal', 'language']`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535131310223",
                    "text": "`[('color', 'purple'), ('number', 42), ('animal', 'turtle'), ('language', 'python')]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535131318994",
                    "text": "`[]`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 698550,
              "key": "d0c84406-3f4c-469d-87a2-caf5984eaa2a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d0c84406-3f4c-469d-87a2-caf5984eaa2a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "And what will this code print?\n\n```python\nfavorites = {\n    'color': 'purple',\n    'number': 42,\n    'animal': 'turtle',\n    'language':\n    'python'\n}\n\nlist = []\nfor v in favorites.values():\n    list.append(v)\nprint(list)\n```",
                "answers": [
                  {
                    "id": "a1535147475135",
                    "text": "`['purple', 42, 'turtle', 'python']`",
                    "is_correct": true
                  },
                  {
                    "id": "a1535147529202",
                    "text": "`['color', 'number', 'animal', 'language']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535147529706",
                    "text": "`[('color', 'purple'), ('number', 42), ('animal', 'turtle'), ('language', 'python')]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1535147530318",
                    "text": "`[]`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 704674,
              "key": "b0724a5e-2721-4b82-99f7-d133ea98c1b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Reference sheet\n\nWe've covered several different ways to loop over a dictionary. If you'd like to keep all that info handy, we've made a PDF reference sheet that you can download [here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/August/5b89c017_ipnd-reference-sheet-looping-over-dictionaries/ipnd-reference-sheet-looping-over-dictionaries.pdf).",
              "instructor_notes": ""
            },
            {
              "id": 714742,
              "key": "669a1ea0-29bd-4bcd-ad91-58604235869d",
              "title": "Word count",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "669a1ea0-29bd-4bcd-ad91-58604235869d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Take the sentence and turn it into a list (using the `split` method), so that each word is an item in the list.",
                "Fill the dictionary with entries, where the key is a word from the list, and the value is the number of times that word appears.",
                "Print out all the dictionary entries using a loop."
              ],
              "positive_feedback": "You've learned a **lot** about dictionaries and how to use them!",
              "video_feedback": null,
              "description": "Here's a practical use for a dictonary: You can use one to help **count how many times a word appears in a sentence**.\n\nYou can give this a try in the workspace below! Your goal is to print out a description of how often each word appears, like this:\n\n```text\n'the' appears 4 time(s) in the string\n```\n\nHere are some of the steps you'll need to take:"
            },
            {
              "id": 690313,
              "key": "b80f315a-b7f0-40cc-beff-18772fbcd0ba",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewipbtk8mz25l",
              "pool_id": "webterminal",
              "view_id": "generic-fdjhz1sija",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/count_words.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 693937,
              "key": "bfc0ecaa-1bf4-4182-9d13-d7ad132b6a28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 690319,
              "key": "1cc91dbe-c351-419d-900d-b381fb97f06a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\nstr = 'it appears that the the appears the most in the sentence'\ndict = {}\nlist = str.split(\" \")\nfor word in list:\n    if word in dict:\n        dict[word] = dict[word] + 1\n    else:\n        dict[word] = 1\nfor key, value in dict.items():\n    print(f\"\\'{key}\\' appears {value} time(s) in the string\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 708720,
          "key": "35daee6a-e119-410a-b5e4-a63dd239cfb0",
          "title": "Nested data structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35daee6a-e119-410a-b5e4-a63dd239cfb0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708781,
              "key": "a044ed17-531c-42a3-a09b-8f1aa55fe806",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Nested data structures",
              "instructor_notes": ""
            },
            {
              "id": 708763,
              "key": "7810f379-4769-4cd1-81c3-af47d4581093",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So far, the examples of dictionaries and lists that we've been looking at are pretty simple. But if you remember back to the data we got from the MetaWeather API (early in this lesson), that data seemed to be a bit more complicated.\n\nThe main reason for the added complexity was **nesting**. A dictionary (or a list) can look quite complex, depending on what's nested inside of it. On this page, we'll look at some examples. This will help us better understand the MetaWeather data when we return to it (which we'll do shortly).",
              "instructor_notes": ""
            },
            {
              "id": 708761,
              "key": "964f01f3-aff7-4b72-a1b0-f4fd4dce3b36",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "964f01f3-aff7-4b72-a1b0-f4fd4dce3b36",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "We've seen that dictionary entries have _keys_ and _values_. But we haven't really explored what types of data we can use for a key or a value.\n\nLet's look at **keys** first. In the workspace below (or on your own computer), see if you can figure out which of the following things can be used as a dictionary key.",
                "answers": [
                  {
                    "id": "a1536294138326",
                    "text": "An integer, such as `3`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536294347861",
                    "text": "A list, such as `[1, 2, 3]`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536294368404",
                    "text": "A string, such as `'Hello world!'`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536294390629",
                    "text": "Another dictionary, such as `{'a':'b'}`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 708759,
              "key": "20e2270a-697b-48e9-bf68-b14821a5d899",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view85kusloe4vp",
              "pool_id": "webterminal",
              "view_id": "generic-fhgqphcen6j",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/dictionary.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 708770,
              "key": "ec3760f0-1b2f-4244-88be-44717952be28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you can see, lists and dictionaries _cannot_ be used as keys in a dictionary. The reason for this is beyond the scope of this course, but it is related to the fact lists and dictionaries are both *mutable*. For example, if you used a list as a dictionary key and then modified the list, it would be unclear whether you wanted the key to be the old value of the list or the new one!",
              "instructor_notes": ""
            },
            {
              "id": 708769,
              "key": "dcb1a8b4-c690-4ae1-a18f-c71ec910f3ed",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dcb1a8b4-c690-4ae1-a18f-c71ec910f3ed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that we know what data types can be used for _keys_, let's turn our attention to _values_.\n\nWhich of the following things are **values** that a dictionary entry can have?",
                "answers": [
                  {
                    "id": "a1536325265702",
                    "text": "An integer, such as `3`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536325382374",
                    "text": "A list, such as `[1, 2, 3]`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536325401507",
                    "text": "A string, such as `'Hello world!'`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536325410334",
                    "text": "Another dictionary, such as `{'a':'b'}`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 708771,
              "key": "3ffc7a05-b1ec-4bc6-b479-b97b2ff7a587",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3ffc7a05-b1ec-4bc6-b479-b97b2ff7a587",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Based on what you just learned, which of these dictionaries would work?"
                },
                "concepts_label": "Dictonary",
                "answers_label": "Works?",
                "concepts": [
                  {
                    "text": "```python\nd = {[1, 2, 3]: 'a'}\n```",
                    "correct_answer": {
                      "id": "a1536326275336",
                      "text": "Doesn't work"
                    }
                  },
                  {
                    "text": "```python\nd = {'a': [1, 2, 3]}\n```",
                    "correct_answer": {
                      "id": "a1536326393401",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nd = {'a': {'a': 'b'}}\n```",
                    "correct_answer": {
                      "id": "a1536326510931",
                      "text": "Works"
                    }
                  },
                  {
                    "text": "```python\nd = {{'a': 'b'}:'a'}\n```",
                    "correct_answer": {
                      "id": "a1536326742694",
                      "text": "Doesn't work"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536326510931",
                    "text": "Works"
                  },
                  {
                    "id": "a1536326275336",
                    "text": "Doesn't work"
                  },
                  {
                    "id": "a1536326393401",
                    "text": "Works"
                  },
                  {
                    "id": "a1536326742694",
                    "text": "Doesn't work"
                  }
                ]
              }
            },
            {
              "id": 708774,
              "key": "f2f20e8e-1f54-46dc-a174-45df3bd5994d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f2f20e8e-1f54-46dc-a174-45df3bd5994d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's one that's a little trickier:\n\n```python\nd = {'a': [{'b': 'c'}, {'d': 'e'}], 'f': 'g'}\n```\n\nWhat is the **value** of the first entry in this dictionary?",
                "answers": [
                  {
                    "id": "a1536330586852",
                    "text": "`[{'b': 'c'}, {'d': 'e'}]`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536330875527",
                    "text": "`'a'`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536330876229",
                    "text": "`'{'b': 'c'}'`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536331024609",
                    "text": "`'f'`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 708775,
              "key": "449d6488-d1a2-45f5-83b2-674d4a7630b7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "449d6488-d1a2-45f5-83b2-674d4a7630b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "So in the last exercise, we saw that the first value in the dictionary is:\n\n`[{'b': 'c'}, {'d': 'e'}]`\n\nWhich of these best describes this value?",
                "answers": [
                  {
                    "id": "a1536332007361",
                    "text": "It's a **list of dictionaries**.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536332068441",
                    "text": "It's a **dictionary of lists**.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536332068905",
                    "text": "It's a **list of strings**.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536332142235",
                    "text": "It's a **dictionary of strings**.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 708776,
              "key": "9b8a8b2a-b91e-42ef-ba1d-8bd205f9ab90",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9b8a8b2a-b91e-42ef-ba1d-8bd205f9ab90",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's that same dictionary again:\n\n```python\nd = {'a': [{'b': 'c'}, {'d': 'e'}], 'f': 'g'}\n```\n\nA common thing we might want to do is use the index operator to access different values or list-items in this structure. See if you can pair each piece of code with the value (or item) it would access.\n\n(Consider playing with this in the Python interpreter!)"
                },
                "concepts_label": "Code",
                "answers_label": "Which value does it access?",
                "concepts": [
                  {
                    "text": "`d['a']`",
                    "correct_answer": {
                      "id": "a1536332426231",
                      "text": "`[{'b': 'c'}, {'d': 'e'}]`"
                    }
                  },
                  {
                    "text": "`d['a'][1]`",
                    "correct_answer": {
                      "id": "a1536332675856",
                      "text": "`{'d': 'e'}`"
                    }
                  },
                  {
                    "text": "`d['a'][1]['d']`",
                    "correct_answer": {
                      "id": "a1536332726055",
                      "text": "`'e'`"
                    }
                  },
                  {
                    "text": "`d['a'][0]['b']`",
                    "correct_answer": {
                      "id": "a1536332797103",
                      "text": "`'c'`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536332675856",
                    "text": "`{'d': 'e'}`"
                  },
                  {
                    "id": "a1536332426231",
                    "text": "`[{'b': 'c'}, {'d': 'e'}]`"
                  },
                  {
                    "id": "a1536332726055",
                    "text": "`'e'`"
                  },
                  {
                    "id": "a1536332797103",
                    "text": "`'c'`"
                  }
                ]
              }
            },
            {
              "id": 708777,
              "key": "d3631baa-258a-480b-8727-cd7e2372b965",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "What we're doing with code like `d['a'][0]['b']` is chaining index operators together to burrow down into the nested structure of the data, with each index operator going one level deeper.\n\nThis can be a bit tricky‚Äîif there is a lot of nesting, it can be hard to see what is nested inside of what!",
              "instructor_notes": ""
            },
            {
              "id": 708779,
              "key": "612fd555-4d19-4273-a48e-d84b4af2b8fc",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "612fd555-4d19-4273-a48e-d84b4af2b8fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "When you're trying to see the nested structure of a dictionary or list (or dictionary of lists of dictionaries!), it helps to be able to see the structure itself without getting lost on the various keys and values.\n\nHere, we've taken some dictionaries and lists, and blanked out the contents so you can just see the underlying structure. Can you match each of them up?"
                },
                "concepts_label": "Dictionary",
                "answers_label": "Underlying structure",
                "concepts": [
                  {
                    "text": "```python\nd = {'a': 'b', 'c': 'd', 'e': 'f'}\n```",
                    "correct_answer": {
                      "id": "a1536334225503",
                      "text": "`d = { : , : , : }`"
                    }
                  },
                  {
                    "text": "```python\nl = ['a', {'b': 'c', 'd': 'e'}]\n```",
                    "correct_answer": {
                      "id": "a1536334364893",
                      "text": "`\nl = [ , { : , : }]\n`"
                    }
                  },
                  {
                    "text": "```python\nd = {'a': [{'b': 'c'}, {'d': 'e'}]}\n```",
                    "correct_answer": {
                      "id": "a1536334366102",
                      "text": "`d = { : [{ : }, { : }]}\n`"
                    }
                  },
                  {
                    "text": "```python\nl = ['a', 'b', 'c']\n```",
                    "correct_answer": {
                      "id": "a1536335370870",
                      "text": "`\nl = [ , , ]\n`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536334364893",
                    "text": "`\nl = [ , { : , : }]\n`"
                  },
                  {
                    "id": "a1536334225503",
                    "text": "`d = { : , : , : }`"
                  },
                  {
                    "id": "a1536334366102",
                    "text": "`d = { : [{ : }, { : }]}\n`"
                  },
                  {
                    "id": "a1536335370870",
                    "text": "`\nl = [ , , ]\n`"
                  }
                ]
              }
            },
            {
              "id": 708780,
              "key": "daef6bba-53a6-4032-bb46-223614fdaf94",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "daef6bba-53a6-4032-bb46-223614fdaf94",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Now, see if you can match each of these structures with its description."
                },
                "concepts_label": "Structure",
                "answers_label": "Description",
                "concepts": [
                  {
                    "text": "`d = { : , : , : }`",
                    "correct_answer": {
                      "id": "a1536335611396",
                      "text": "A dictionary"
                    }
                  },
                  {
                    "text": "`\nl = [ , { : , : }]\n`",
                    "correct_answer": {
                      "id": "a1536335706563",
                      "text": "A list containing a dictionary."
                    }
                  },
                  {
                    "text": "`d = { : [{ : }, { : }]}\n`",
                    "correct_answer": {
                      "id": "a1536335729710",
                      "text": "A dictionary containing a list of dictionaries."
                    }
                  },
                  {
                    "text": "`\nl = [ , , ]\n`",
                    "correct_answer": {
                      "id": "a1536335780588",
                      "text": "A list."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536335780588",
                    "text": "A list."
                  },
                  {
                    "id": "a1536335729710",
                    "text": "A dictionary containing a list of dictionaries."
                  },
                  {
                    "id": "a1536335611396",
                    "text": "A dictionary"
                  },
                  {
                    "id": "a1536335706563",
                    "text": "A list containing a dictionary."
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 708778,
          "key": "6f1b8ef4-8ce1-478a-ba9f-9cf37047505c",
          "title": "Looping over nested structures (1/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6f1b8ef4-8ce1-478a-ba9f-9cf37047505c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708851,
              "key": "029ebdee-d8f8-4f3e-a12b-29cfdbd91626",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over nested structures (1/3)\n\nWe've seen how to loop over simple lists and dictionaries. But what if you want to loop over a more complex, nested data structure like the examples we were just looking at?\n\nThese are not fundamentally different, but they can be a little trickier to figure out. So let's get some practice!",
              "instructor_notes": ""
            },
            {
              "id": 708852,
              "key": "03f27212-6230-45e1-9ead-3e4cb6249e26",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Nested list\nHere's a list that has two other lists inside of it:\n```python\nfoods = [['apple', 'banana', 'orange'],['carrot', 'cucumber', 'tomato']]\n```\nThere are a bunch of different ways we could use this list in a loop, to get different results.\n\nFor example, we could use a loop to print out the two inner lists:\n\n```text\n['apple', 'banana', 'orange']\n['carrot', 'cucumber', 'tomato']\n```\n\nOr the items from only the first list:\n```text\napple\nbanana\norange\n```\n\nOr the first item from each list:\n```text\napple\ncarrot\n```\n\nIn the workspace below, play around and see how many of the above results you can print to the terminal. There's also an exercise below the workspace that shows all the loops needed for these results, so feel free to peak at those while you're experimenting.",
              "instructor_notes": ""
            },
            {
              "id": 708855,
              "key": "72ec72ef-83ea-45c3-b8bf-8cb764b1e862",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewxcrceh90mg",
              "pool_id": "webterminal",
              "view_id": "generic-99l2w9pyoo",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/foods.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 708853,
              "key": "621a09fa-9a20-4389-ae31-e1a11beb7a71",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "621a09fa-9a20-4389-ae31-e1a11beb7a71",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some different ways to loop over the `foods` list. Match each one with the results it would print.\n\nHere's the list again for your reference:\n```python\nfoods = [['apple', 'banana', 'orange'],['carrot', 'cucumber', 'tomato']]\n```"
                },
                "concepts_label": "Code",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "```python\nfor e in foods:\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536420319208",
                      "text": "```text\n['apple', 'banana', 'orange']\n['carrot', 'cucumber', 'tomato']\n```"
                    }
                  },
                  {
                    "text": "```\nfor e in foods[0]:\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536420347816",
                      "text": "```text\napple\nbanana\norange\n```"
                    }
                  },
                  {
                    "text": "```python\nfor e in foods:\n  print(e[0])\n```",
                    "correct_answer": {
                      "id": "a1536422438763",
                      "text": "```text\napple\ncarrot\n```"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536422438763",
                    "text": "```text\napple\ncarrot\n```"
                  },
                  {
                    "id": "a1536420319208",
                    "text": "```text\n['apple', 'banana', 'orange']\n['carrot', 'cucumber', 'tomato']\n```"
                  },
                  {
                    "id": "a1536420347816",
                    "text": "```text\napple\nbanana\norange\n```"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 708856,
          "key": "b119f3cc-fce9-4ff5-af8a-240b420c35d2",
          "title": "Looping over nested structures (2/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b119f3cc-fce9-4ff5-af8a-240b420c35d2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708857,
              "key": "11fae38d-fe6c-48f2-a870-fa5dd85e1e4a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over nested structures (2/3)",
              "instructor_notes": ""
            },
            {
              "id": 713373,
              "key": "d47ff6d7-4d40-46c7-9be0-7073c9db04df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Nested dictionary\nOn the last page, we looked at how to loop over a nested list. Now let's look at looping over a nested dictionary.\n\nHere's one that shows the types of pets that I have, along with their names.\n\n```python\npets = {\n    'birds': {\n        'parrot': 'Arthur',\n        'canary': 'Ford'\n    },\n    'fish': {\n        'goldfish': 'Zaphod',\n        'koi': 'Trillian'\n    }\n}\n```\nI've indented it to make it easier to read. But even so, this is a relatively complex structure. As usual, the best way to really understand it is to play with it! In the workspace below, experiment with different `for` loops to see how you can loop over it in different ways.",
              "instructor_notes": ""
            },
            {
              "id": 713374,
              "key": "ec2d6800-70a8-47e1-9588-55eb940f6ec9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewoof502qzvw",
              "pool_id": "webterminal",
              "view_id": "generic-bcqqetczm7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/dictionary.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 713375,
              "key": "66f985f4-8c20-485f-80a4-01fcda3fac87",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66f985f4-8c20-485f-80a4-01fcda3fac87",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some different ways to loop over the `pets` dictionary. Match each one with the results it would print."
                },
                "concepts_label": "Code",
                "answers_label": "Output",
                "concepts": [
                  {
                    "text": "```python\nfor e in pets:\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536450532908",
                      "text": "```text\nbirds\nfish\n```"
                    }
                  },
                  {
                    "text": "```python\nfor e in pets['birds']:\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536450641774",
                      "text": "```text\nparrot\ncanary\n```"
                    }
                  },
                  {
                    "text": "```python\nfor e in pets['birds'].values():\n   print(e)\n```",
                    "correct_answer": {
                      "id": "a1536450784527",
                      "text": "```text\nArthur\nFord\n```"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536450641774",
                    "text": "```text\nparrot\ncanary\n```"
                  },
                  {
                    "id": "a1536450784527",
                    "text": "```text\nArthur\nFord\n```"
                  },
                  {
                    "id": "a1536450532908",
                    "text": "```text\nbirds\nfish\n```"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 708938,
          "key": "44d33c9f-ef2d-4b5e-bdb4-426fcd42c414",
          "title": "Looping over nested structures (3/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "44d33c9f-ef2d-4b5e-bdb4-426fcd42c414",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714756,
              "key": "4fe5316a-0c44-4c80-8f76-48ae1ef8fe8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Looping over nested structures (3/3)",
              "instructor_notes": ""
            },
            {
              "id": 713378,
              "key": "ea926ea2-8d08-4f13-b587-cb423b518267",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A list of dictionaries\n\nWe've looped over both nested lists and nested dictionaries. Now, let's see how we might handle a combination‚Äîa list of dictionaries:\n\n```python\nweather = [\n    {\n        'date':'today',\n        'state': 'cloudy',\n        'temp': 68.5\n    },\n    {\n        'date':'tomorrow',\n        'state': 'sunny',\n        'temp': 74.8\n    }\n]\n```\nNotice that this list has two dictionaries inside of it, and each dictionary has the (highly simplified) forecast for a particular day.\n\nJust like before, play around with this and see what sorts of outputs you can print!",
              "instructor_notes": ""
            },
            {
              "id": 713379,
              "key": "1f4cc7d0-d321-4ef2-b4be-41941e7d19b5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewxkc2dn2gqeq",
              "pool_id": "webterminal",
              "view_id": "generic-n1konooamlh",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/weather.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 713380,
              "key": "e711eef9-e20f-49f4-baf2-98283a447f3a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e711eef9-e20f-49f4-baf2-98283a447f3a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some different ways to loop over the `weather` list. Match each one with the results it would print."
                },
                "concepts_label": "Code",
                "answers_label": "Output",
                "concepts": [
                  {
                    "text": "```python\nfor e in weather[0]:\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536451708297",
                      "text": "date  \nstate  \ntemp"
                    }
                  },
                  {
                    "text": "```python\nfor e in weather[0].values():\n    print(e)\n```",
                    "correct_answer": {
                      "id": "a1536451773975",
                      "text": "today  \ncloudy  \n68.5"
                    }
                  },
                  {
                    "text": "```python\nfor e in weather:\n    print(e['date'])\n    print(e['state'])\n    print(e['temp'])\n```",
                    "correct_answer": {
                      "id": "a1536452095431",
                      "text": "today  \ncloudy  \n68.5  \ntomorrow  \nsunny  \n74.8"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1536452095431",
                    "text": "today  \ncloudy  \n68.5  \ntomorrow  \nsunny  \n74.8"
                  },
                  {
                    "id": "a1536451773975",
                    "text": "today  \ncloudy  \n68.5"
                  },
                  {
                    "id": "a1536451708297",
                    "text": "date  \nstate  \ntemp"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 713382,
          "key": "452a1746-9b14-4085-bff1-aeb42f4d9244",
          "title": "Simple weather report",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "452a1746-9b14-4085-bff1-aeb42f4d9244",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 713384,
              "key": "cc05bf4b-6b79-480a-9104-c0386567c130",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Simple weather report\n\nBelow is a workspace with the `weather` list we were just looking at.\n\nBut currently the code just prints out the data by itself. It would be nice if it printed out full sentences describing the forecast for today and tomorrow. Like this:\n\n```text\nThe weather for today will be cloudy with a temperature of 68.5 degrees.\nThe weather for tomorrow will be sunny with a temperature of 74.8 degrees.\n```\n\nSee if you can get it to do this! Here are a few tips:\n* Currently, the code uses three `print` statements. But it's possible to get the above results using only a single `print` statement (inside the `for` loop).\n* Below the workspace, there are three exercises showing some possible approaches. If you get stuck, check them out for ideas!",
              "instructor_notes": ""
            },
            {
              "id": 713383,
              "key": "4fc67cf2-be3a-49a1-a552-7696ada2a9c3",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewjunqlh21g4c",
              "pool_id": "webterminal",
              "view_id": "generic-t5y6itfjwq",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/weather.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 713387,
              "key": "2f486ca5-06fc-4b15-8158-6eff2985d3a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you've tried it, let's look at a few different attempts at printing out the forecast. Read over this code and try to \"be the computer\"‚Äîprocess each line and predict what it will print. Does it give the desired output?",
              "instructor_notes": ""
            },
            {
              "id": 713385,
              "key": "f55fc99a-8553-47b8-8012-15e3de81662f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f55fc99a-8553-47b8-8012-15e3de81662f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's the first attempt:\n\n```python\nfor forecast in weather:\n    print('The weather for ' + forecast['date'] + ' will be ' + forecast['state'] + ' with a temperature of ' + str(forecast['temp']) + ' degrees.')\n```",
                "answers": [
                  {
                    "id": "a1536456613627",
                    "text": "Yes‚Äîthis works!",
                    "is_correct": true
                  },
                  {
                    "id": "a1536456680529",
                    "text": "No‚Äîthis doesn't work.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 713386,
              "key": "a861fb36-2547-46ba-ba7a-010d81ded5fc",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a861fb36-2547-46ba-ba7a-010d81ded5fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's another attempt at printing out the forecast. This one uses _f-strings_ to make it a little cleaner and easier to read:\n\n```python\nfor forecast in weather:\n    print(f\"The weather for {forecast['date']} will be {forecast['state']} with a temperature of {forecast['temp']} degrees.\")\n```\n\nWill this work?",
                "answers": [
                  {
                    "id": "a1536456746092",
                    "text": "Yes‚Äîthis works!",
                    "is_correct": true
                  },
                  {
                    "id": "a1536456831332",
                    "text": "No‚Äîthis doesn't work.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 713388,
              "key": "94eea837-d8c8-4235-b8dc-0d0ceaa42873",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "94eea837-d8c8-4235-b8dc-0d0ceaa42873",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How about this one?\n```python\nfor forecast in weather:\n    date = forecast['date']\n    state = forecast['state']\n    temp = forecast['temp']\n    print(f\"The weather for {date} will be {state} with a temperature of {temp} degrees.\")\n```",
                "answers": [
                  {
                    "id": "a1536456969055",
                    "text": "Yes‚Äîthis works!",
                    "is_correct": true
                  },
                  {
                    "id": "a1536457098160",
                    "text": "No‚Äîthis doesn't work.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 713390,
              "key": "b31a9949-df46-4d44-90cc-61beea15d331",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The weather data we looked at here was greatly simplified, but it has a similar structure to the data we'll get from the MetaWeather API.\n\nSo now that you know how to loop over nested lists and dictionaries, and how to generate a simple weather report, it's time to turn our attention back to the real forecast!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 707828,
          "key": "4662a509-0d3c-4f3b-846d-125aed282056",
          "title": "Getting the data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4662a509-0d3c-4f3b-846d-125aed282056",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 817529,
              "key": "3afbee81-16ec-4318-9e72-175bf31c0795",
              "title": "IPND PY L6 N10 Using The Response Object SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ado3PKsXy_g",
                "china_cdn_id": "Ado3PKsXy_g.mp4"
              }
            },
            {
              "id": 714759,
              "key": "50fc11fc-6043-45c1-8b87-38be0c631233",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The first thing Karl did in the video was to use the `requests` module to get the data from the MetaWeather API. That looks like this:\n\n```python\nimport requests\n\nr = requests.get('https://www.metaweather.com/api/location/2455920')\n```\n\nThis request uses the WOEID to get weather for a specific city. In this example, the WOEID is `2455920`, which is for Mountain View, California.\n\nGo ahead and give this a try. You can use the workspace below, or do it using the code editor and terminal on your own computer (whichever you prefer).",
              "instructor_notes": ""
            },
            {
              "id": 707838,
              "key": "d2fee25b-78bd-4912-9b2c-dc9f9b543ed4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view0pwjmln6y5ci",
              "pool_id": "webterminal",
              "view_id": "generic-kvgncfb5h7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/weather.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 707839,
              "key": "55a9ffd0-a423-4a2a-865a-d7bcd5ad19e0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "55a9ffd0-a423-4a2a-865a-d7bcd5ad19e0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "So now we have the response object that MetaWeather sent back, stored in the `r` variable.\n\nAs a refresher, try adding this line to your code:\n\n```python\nprint(r)\n```\n\nWhat do you get?",
                "answers": [
                  {
                    "id": "a1536014272899",
                    "text": "A status code.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536014361130",
                    "text": "A list.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536014367857",
                    "text": "A string.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536014374154",
                    "text": "A dictionary.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 707840,
              "key": "a210c319-c70c-4892-832b-8213ad3a6012",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a210c319-c70c-4892-832b-8213ad3a6012",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "We can see the weather data if we access the response object's `text` attribute, like this:\n\n```python\nprint(r.text)\n```\n\nTry it! Do you remember what kind of data this is?",
                "answers": [
                  {
                    "id": "a1536014649257",
                    "text": "An HTTP status code.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536014848945",
                    "text": "A Python list.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536014849545",
                    "text": "A string of JSON-formatted text.",
                    "is_correct": true
                  },
                  {
                    "id": "a1536014850071",
                    "text": "A Python dictionary.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 707841,
              "key": "2e6d3c2d-7f85-4b15-957d-518ebba6c0c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To be able to use the weather data, we need to change it from JSON text into a Python dictionary. The structure that JSON uses already looks a _lot_ like a Python dictionary. All we need to do is call the `json` method on the response object, and store the results in a new variable.\n\nGo ahead and add this to your code:\n\n```python\nd = r.json()\n```\n\nNow the `d` variable will have a copy of the weather data as a dictionary. Great!",
              "instructor_notes": ""
            },
            {
              "id": 707842,
              "key": "d84e90fd-79c0-4306-b3f0-998abf40d750",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## But also not so great ...\n\nGo ahead and print the dictionary so you can see what it looks like:\n\n```python\nprint(d)\n```\n\nLike we saw earlier, it's kind of a mess. On the next page, we'll see if we can make some sense out of it.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 707866,
          "key": "19137c7a-f2af-4e7b-aeb2-468860f9ea59",
          "title": "Making sense of the data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "19137c7a-f2af-4e7b-aeb2-468860f9ea59",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708698,
              "key": "9f7643c4-519a-4cdd-b59b-7d4da1e029cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Making sense of the data\n\nAt this point, we've gotten the weather data and we've used the `json` method to make a copy of it as a dictionary. And we've stored that dictionary in a variable, `d`.\n\nBut when we print that out, we get a wall of text. Here's the whole thing:",
              "instructor_notes": ""
            },
            {
              "id": 708699,
              "key": "a4f8ecd1-729f-4871-b497-7de22bdd68be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n```python\n{'consolidated_weather': [{'id': 4805047800037376, 'weather_state_name': 'Light Cloud', 'weather_state_abbr': 'lc', 'wind_direction_compass': 'W', 'created': '2018-09-03T22:19:47.726790Z', 'applicable_date': '2018-09-03', 'min_temp': 13.0925, 'max_temp': 24.3525, 'the_temp': 25.19, 'wind_speed': 4.929423500092791, 'wind_direction': 274.6727005936219, 'air_pressure': 987.6, 'humidity': 64, 'visibility': 9.997862483098704, 'predictability': 70}, {'id': 4787455613992960, 'weather_state_name': 'Clear','weather_state_abbr': 'c', 'wind_direction_compass': 'W', 'created': '2018-09-03T21:08:59.126150Z', 'applicable_date': '2018-09-04', 'min_temp': 13.45, 'max_temp': 26.310000000000002, 'the_temp': 26.73, 'wind_speed': 5.102400646888836, 'wind_direction': 275.06207362378666, 'air_pressure': 987.2, 'humidity': 63, 'visibility': 9.997862483098704, 'predictability': 68}, {'id': 4641886824300544, 'weather_state_name': 'Light Cloud', 'weather_state_abbr': 'lc', 'wind_direction_compass': 'W', 'created': '2018-09-03T22:19:50.848520Z', 'applicable_date': '2018-09-05', 'min_temp': 13.5975, 'max_temp': 25.86, 'the_temp': 27.47, 'wind_speed': 5.2027568334261245, 'wind_direction': 267.43163653595957, 'air_pressure': 989.74, 'humidity': 63, 'visibility': 9.997862483098704, 'predictability': 70}, {'id': 6363877860179968, 'weather_state_name': 'Heavy Cloud', 'weather_state_abbr': 'hc', 'wind_direction_compass': 'WNW', 'created': '2018-09-03T22:19:54.606990Z', 'applicable_date': '2018-09-06', 'min_temp': 14.032499999999999, 'max_temp': 24.740000000000002, 'the_temp': 20.62, 'wind_speed': 5.215311911768604, 'wind_direction': 282.1550286199504, 'air_pressure': 1012.59, 'humidity': 63, 'visibility': 9.997862483098704, 'predictability': 71}, {'id': 4921348803526656, 'weather_state_name': 'Heavy Cloud', 'weather_state_abbr': 'hc', 'wind_direction_compass': 'NW', 'created': '2018-09-03T22:19:56.718650Z', 'applicable_date': '2018-09-07', 'min_temp': 14.47, 'max_temp': 26.87, 'the_temp': 19.47, 'wind_speed': 5.513016251756409, 'wind_direction': 309.61937804648244, 'air_pressure': 1010.77, 'humidity': 56, 'visibility': 9.997862483098704, 'predictability': 71}, {'id': 6200493143490560, 'weather_state_name': 'Clear', 'weather_state_abbr': 'c', 'wind_direction_compass': 'NW', 'created': '2018-09-03T22:20:00.434680Z', 'applicable_date': '2018-09-08', 'min_temp': 14.4275, 'max_temp': 26.060000000000002, 'the_temp': 19.23, 'wind_speed': 5.936287812508286, 'wind_direction': 309.30886249166963, 'air_pressure': 1006.57, 'humidity': 51, 'visibility': 9.997862483098704, 'predictability': 68}], 'time': '2018-09-03T16:02:43.154910-07:00', 'sun_rise': '2018-09-03T06:40:29.947547-07:00', 'sun_set': '2018-09-03T19:35:30.177997-07:00', 'timezone_name': 'LMT', 'parent': {'title': 'California', 'location_type': 'Region / State / Province', 'woeid': 2347563, 'latt_long': '37.271881,-119.270233'}, 'sources': [{'title': 'Forecast.io', 'slug': 'forecast-io', 'url': 'http://forecast.io/', 'crawl_rate': 480}, {'title': 'HAMweather', 'slug': 'hamweather', 'url': 'http://www.hamweather.com/', 'crawl_rate': 360}, {'title': 'OpenWeatherMap', 'slug': 'openweathermap', 'url': 'http://openweathermap.org/', 'crawl_rate': 360}, {'title': 'Weather Underground', 'slug': 'wunderground', 'url': 'https://www.wunderground.com/?apiref=fc30dc3cd224e19b', 'crawl_rate': 720}, {'title': 'World Weather Online', 'slug': 'world-weather-online', 'url': 'http://www.worldweatheronline.com/', 'crawl_rate': 360}, {'title': 'Yahoo', 'slug': 'yahoo', 'url': 'http://weather.yahoo.com/', 'crawl_rate': 180}], 'title': 'Mountain View','location_type': 'City', 'woeid': 2455920, 'latt_long': '37.39999,-122.079552', 'timezone': 'America/Los_Angeles'}\n```",
              "instructor_notes": ""
            },
            {
              "id": 708700,
              "key": "6274a00b-6fe2-48f5-af7b-47eb65544c13",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Um ... yikes?\n\nYou can tell it's a dictionary, since it's got curly brackets `{ }` enclosing the whole thing. \n\nBut otherwise, it's kind of hard to see what's going on.",
              "instructor_notes": ""
            },
            {
              "id": 708701,
              "key": "b309ac36-0896-47eb-b038-30ae0f4c452f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A whole lot of nesting\n\nOne of the reasons this looks so messy is because it's all mashed together in a single line. If we add some line breaks and indentation, it becomes a bit easier to see the structure. Check it out:\n\n(You _don't_ need to read through this whole thing‚Äîthe point is just to get an idea of the overall structure.)",
              "instructor_notes": ""
            },
            {
              "id": 708702,
              "key": "60691112-addb-4b86-929a-b7d92991dcbf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\n{\n    'consolidated_weather': [{\n        'id': 5756340131594240,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:47.023710Z',\n        'applicable_date': '2018-09-03',\n        'min_temp': 13.7975,\n        'max_temp': 22.1725,\n        'the_temp': 14.47,\n        'wind_speed': 4.825861634719902,\n        'wind_direction': 269.0843199650456,\n        'air_pressure': 986.85,\n        'humidity': 77,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }, {\n        'id': 6707457686503424,\n        'weather_state_name': 'Clear',\n        'weather_state_abbr': 'c',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:50.520020Z',\n        'applicable_date': '2018-09-04',\n        'min_temp': 13.5025,\n        'max_temp': 25.685000000000002,\n        'the_temp': 24.23,\n        'wind_speed': 5.112756833426125,\n        'wind_direction': 270.2794344092529,\n        'air_pressure': 987.6,\n        'humidity': 64,\n        'visibility': 9.997862483098704,\n        'predictability': 68\n    }, {\n        'id': 6129188230660096,\n        'weather_state_name': 'Light Cloud',\n        'weather_state_abbr': 'lc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:53.914860Z',\n        'applicable_date': '2018-09-05',\n        'min_temp': 13.375,\n        'max_temp': 25.925,\n        'the_temp': 26.73,\n        'wind_speed': 5.52573398022217,\n        'wind_direction': 274.17536913320464,\n        'air_pressure': 987.2,\n        'humidity': 64,\n        'visibility': 9.997862483098704,\n        'predictability': 70\n    }, {\n        'id': 6028561710317568,\n        'weather_state_name': 'Light Cloud',\n        'weather_state_abbr': 'lc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:56.527170Z',\n        'applicable_date': '2018-09-06',\n        'min_temp': 13.7025,\n        'max_temp': 26.322499999999998,\n        'the_temp': 27.47,\n        'wind_speed': 5.296090166759458,\n        'wind_direction': 278.6409999622535,\n        'air_pressure': 989.74,\n        'humidity': 63,\n        'visibility': 9.997862483098704,\n        'predictability': 70\n    }, {\n        'id': 6695273375989760,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'WNW',\n        'created': '2018-09-03T13:19:59.229340Z',\n        'applicable_date': '2018-09-07',\n        'min_temp': 14.6675,\n        'max_temp': 26.37,\n        'the_temp': 20.62,\n        'wind_speed': 5.071978578435272,\n        'wind_direction': 289.5,\n        'air_pressure': 1012.59,\n        'humidity': 57,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }, {\n        'id': 5627284954284032,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'NW',\n        'created': '2018-09-03T13:20:02.498590Z',\n        'applicable_date': '2018-09-08',\n        'min_temp': 14.755,\n        'max_temp': 26.11,\n        'the_temp': 19.47,\n        'wind_speed': 5.78301625175641,\n        'wind_direction': 305.0323351994134,\n        'air_pressure': 1010.77,\n        'humidity': 52,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }],\n    'time': '2018-09-03T07:46:46.850600-07:00',\n    'sun_rise': '2018-09-03T06:40:29.947547-07:00',\n    'sun_set': '2018-09-03T19:35:30.177997-07:00',\n    'timezone_name': 'LMT',\n    'parent': {\n        'title': 'California',\n        'location_type': 'Region / State / Province',\n        'woeid': 2347563,\n        'latt_long': '37.271881,-119.270233'\n    },\n    'sources': [{\n        'title': 'Forecast.io',\n        'slug': 'forecast-io',\n        'url': 'http://forecast.io/',\n        'crawl_rate': 480\n    }, {\n        'title': 'HAMweather',\n        'slug': 'hamweather',\n        'url': 'http://www.hamweather.com/',\n        'crawl_rate': 360\n    }, {\n        'title': 'OpenWeatherMap',\n        'slug': 'openweathermap',\n        'url': 'http://openweathermap.org/',\n        'crawl_rate': 360\n    }, {\n        'title': 'Weather Underground',\n        'slug': 'wunderground',\n        'url': 'https://www.wunderground.com/?apiref=fc30dc3cd224e19b',\n        'crawl_rate': 720\n    }, {\n        'title': 'World Weather Online',\n        'slug': 'world-weather-online',\n        'url': 'http://www.worldweatheronline.com/',\n        'crawl_rate': 360\n    }, {\n        'title': 'Yahoo',\n        'slug': 'yahoo',\n        'url': 'http://weather.yahoo.com/',\n        'crawl_rate': 180\n    }],\n    'title': 'Mountain View',\n    'location_type': 'City',\n    'woeid': 2455920,\n    'latt_long': '37.39999,-122.079552',\n    'timezone': 'America/Los_Angeles'\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 708704,
              "key": "badadbd9-d553-4766-82c1-840fc90c0325",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You may find it helpful to reference this structure as you go through the rest of the lesson. If you like, you can [get a PDF of the above data here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/September/5ba1d151_ipnd-reference-sheet-metaweather-api-data/ipnd-reference-sheet-metaweather-api-data.pdf) to download or print out.\n\nThis is still a lot of data to be looking at, but now you can see some of the structure, and how certain parts are nested inside other parts.",
              "instructor_notes": ""
            },
            {
              "id": 708705,
              "key": "17f1b632-21a7-4b1f-9321-88d188b37e76",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "17f1b632-21a7-4b1f-9321-88d188b37e76",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Although this may look intimidating, remember that the whole thing is just a dictionary!\n\nCan you figure out what the first **key** in the dictionary is?",
                "answers": [
                  {
                    "id": "a1536274055880",
                    "text": "`'consolidated_weather'`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536274062092",
                    "text": "`'id'`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274065998",
                    "text": "`5756340131594240`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274066501",
                    "text": "A huge list that spans almost 100 lines.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 708706,
              "key": "d5f93160-b6e0-4b44-92e3-76106b631ad5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5f93160-b6e0-4b44-92e3-76106b631ad5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "And what is the first **value** in the dictionary?",
                "answers": [
                  {
                    "id": "a1536274127585",
                    "text": "`'id'`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274132812",
                    "text": "`5756340131594240`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274133453",
                    "text": "A huge list that spans almost 100 lines.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 708707,
              "key": "935806bf-2c54-4adf-960e-a4d9ab8b3466",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This can be kind of tricky to see, but the value that's paired with the `'consolidated_weather'` key is actually a **big** list. You can tell it's a list because of the opening square bracket:\n\n```python\n'consolidated_weather': [\n```\n\nAnd then later on, there's a closing square bracket:\n\n```python\n'predictability': 71\n    }],\n```\n\nSo this is a list!\n\nTo summarize, the first entry in the dictionary is made up of a **key**, `consolidated_weather`, and a **value**, which is a big list.",
              "instructor_notes": ""
            },
            {
              "id": 708708,
              "key": "48656b1d-891c-4be8-b53d-afe09f8d15b9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "48656b1d-891c-4be8-b53d-afe09f8d15b9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now look inside that big list. What are the **items** in this list?\n\n(If you get stuck on this one, don't worry‚Äîwe'll explain more below.)\n\n**Hint:** Remember, the items in a list are separated by commas `,`.",
                "answers": [
                  {
                    "id": "a1536274342906",
                    "text": "Each item in the list is a **string**.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274351896",
                    "text": "Each item in the list is another **list**.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274355665",
                    "text": "Each item in the list is a **dictionary**.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 708709,
              "key": "cec59880-a3a6-456c-86ed-7dc2b5bb5d20",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In that last question, were you able to see where each list item started and ended? Here's an example of one of the list items:\n\n```python\n{\n    'id': 5756340131594240,\n    'weather_state_name': 'Heavy Cloud',\n    'weather_state_abbr': 'hc',\n    'wind_direction_compass': 'W',\n    'created': '2018-09-03T13:19:47.023710Z',\n    'applicable_date': '2018-09-03',\n    'min_temp': 13.7975,\n    'max_temp': 22.1725,\n    'the_temp': 14.47,\n    'wind_speed': 4.825861634719902,\n    'wind_direction': 269.0843199650456,\n    'air_pressure': 986.85,\n    'humidity': 77,\n    'visibility': 9.997862483098704,\n    'predictability': 71\n}\n```\n\nSo the `consolidated_weather` entry has a list, and the list is made up of dictionaries like the one shown above.",
              "instructor_notes": ""
            },
            {
              "id": 708710,
              "key": "b81af660-bf92-4ba9-a965-c3e4af2507a4",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b81af660-bf92-4ba9-a965-c3e4af2507a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OK, but why are there multiple dictionaries inside the `consolidated_weather` list? What's the difference between each dictionary?",
                "answers": [
                  {
                    "id": "a1536274426788",
                    "text": "Each dictionary in the list has the weather forecast for a different city.",
                    "is_correct": false
                  },
                  {
                    "id": "a1536274434809",
                    "text": "Each dictionary in the list has the weather forecast for a different day.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 708711,
              "key": "cd0d0d6e-250a-4204-989c-0bb5f694eecf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Ultimately, what we'll want to do is get weather data for each day. For example, we might want the `'max_temp'` or `'humidity'` from today's weather forecast.\n\nTo get that, we'll be taking an **entry** from a **dictionary** that's inside a **list** that's inside another **dictionary**!\n\nWow, that's a _lot_ of nesting.\n\nOur job will be to dig down through this nested structure to pull out the data we need. As we do this, you may find it helpful to download the PDF (from above), or even print it out and mark it up to show the different parts of the structure.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 704849,
          "key": "a3fad0fd-c5b9-45c4-98d6-33b3f2ae8749",
          "title": "Getting the forecasts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a3fad0fd-c5b9-45c4-98d6-33b3f2ae8749",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 708717,
              "key": "83ff061c-f711-422b-b481-53260caad638",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting the forecasts",
              "instructor_notes": ""
            },
            {
              "id": 707868,
              "key": "26553389-dfc2-4822-a417-7443df45c247",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At this point, we have a dictionary, `d`, containing weather data. But actually, we are only interested in the first entry of the dictionary‚Äîthe consolidated weather forecast.\n\nThat's easy enough to get:\n\n```python\nd['consolidated_weather']\n```\n\nIf you print this out, what you'll get is the list of dictionaries, where each dictionary is the weather forecast for a day. If we format it nicely, you can see that there are six dictionaries. In other words, it gives the forecast for the next six days:",
              "instructor_notes": ""
            },
            {
              "id": 707869,
              "key": "23300b26-edfd-46d8-80a1-1d7430d7a7da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\n[\n    {\n        'id': 5756340131594240,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:47.023710Z',\n        'applicable_date': '2018-09-03',\n        'min_temp': 13.7975,\n        'max_temp': 22.1725,\n        'the_temp': 14.47,\n        'wind_speed': 4.825861634719902,\n        'wind_direction': 269.0843199650456,\n        'air_pressure': 986.85,\n        'humidity': 77,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }, {\n        'id': 6707457686503424,\n        'weather_state_name': 'Clear',\n        'weather_state_abbr': 'c',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:50.520020Z',\n        'applicable_date': '2018-09-04',\n        'min_temp': 13.5025,\n        'max_temp': 25.685000000000002,\n        'the_temp': 24.23,\n        'wind_speed': 5.112756833426125,\n        'wind_direction': 270.2794344092529,\n        'air_pressure': 987.6,\n        'humidity': 64,\n        'visibility': 9.997862483098704,\n        'predictability': 68\n    }, {\n        'id': 6129188230660096,\n        'weather_state_name': 'Light Cloud',\n        'weather_state_abbr': 'lc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:53.914860Z',\n        'applicable_date': '2018-09-05',\n        'min_temp': 13.375,\n        'max_temp': 25.925,\n        'the_temp': 26.73,\n        'wind_speed': 5.52573398022217,\n        'wind_direction': 274.17536913320464,\n        'air_pressure': 987.2,\n        'humidity': 64,\n        'visibility': 9.997862483098704,\n        'predictability': 70\n    }, {\n        'id': 6028561710317568,\n        'weather_state_name': 'Light Cloud',\n        'weather_state_abbr': 'lc',\n        'wind_direction_compass': 'W',\n        'created': '2018-09-03T13:19:56.527170Z',\n        'applicable_date': '2018-09-06',\n        'min_temp': 13.7025,\n        'max_temp': 26.322499999999998,\n        'the_temp': 27.47,\n        'wind_speed': 5.296090166759458,\n        'wind_direction': 278.6409999622535,\n        'air_pressure': 989.74,\n        'humidity': 63,\n        'visibility': 9.997862483098704,\n        'predictability': 70\n    }, {\n        'id': 6695273375989760,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'WNW',\n        'created': '2018-09-03T13:19:59.229340Z',\n        'applicable_date': '2018-09-07',\n        'min_temp': 14.6675,\n        'max_temp': 26.37,\n        'the_temp': 20.62,\n        'wind_speed': 5.071978578435272,\n        'wind_direction': 289.5,\n        'air_pressure': 1012.59,\n        'humidity': 57,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }, {\n        'id': 5627284954284032,\n        'weather_state_name': 'Heavy Cloud',\n        'weather_state_abbr': 'hc',\n        'wind_direction_compass': 'NW',\n        'created': '2018-09-03T13:20:02.498590Z',\n        'applicable_date': '2018-09-08',\n        'min_temp': 14.755,\n        'max_temp': 26.11,\n        'the_temp': 19.47,\n        'wind_speed': 5.78301625175641,\n        'wind_direction': 305.0323351994134,\n        'air_pressure': 1010.77,\n        'humidity': 52,\n        'visibility': 9.997862483098704,\n        'predictability': 71\n    }\n]\n```",
              "instructor_notes": ""
            },
            {
              "id": 707871,
              "key": "12e049c7-04c1-4e99-9684-d46753717e01",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember, the square brackets enclosing this data tell us it's a list (specifically, a list of dictionaries). So if we want to get just the forecast for a specific day, we can take our current line of code:\n\n```python\nd['consolidated_weather']\n```\n\nAnd add another index operator to the end, saying which list item we want:\n\n```python\nd['consolidated_weather'][0]\n```\n\nThis will give us the first item in the list (the one at index `0`). That's a single dictionary for one day's weather forecast:\n\n```python\n{\n    'id': 5756340131594240,\n    'weather_state_name': 'Heavy Cloud',\n    'weather_state_abbr': 'hc',\n    'wind_direction_compass': 'W',\n    'created': '2018-09-03T13:19:47.023710Z',\n    'applicable_date': '2018-09-03',\n    'min_temp': 13.7975,\n    'max_temp': 22.1725,\n    'the_temp': 14.47,\n    'wind_speed': 4.825861634719902,\n    'wind_direction': 269.0843199650456,\n    'air_pressure': 986.85,\n    'humidity': 77,\n    'visibility': 9.997862483098704,\n    'predictability': 71\n}\n```\n\nAnd then if we want to access one of the entries in that dictionary, we just need to use the key for that entry. Like if we wanted the air pressure for this day:\n\n```python\nd['consolidated_weather'][0]['air_pressure']\n```\n\nIn this example, that will give us:\n\n```python\n986.85\n```\n\nThis may seem complex, but all we are doing here is chaining index operators together, `['consolidated_weather'][0]['air_pressure']`, to burrow down into the nested structure of the data.",
              "instructor_notes": ""
            },
            {
              "id": 707872,
              "key": "c6083e06-e41d-44df-bf42-e3d10d9382b6",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6083e06-e41d-44df-bf42-e3d10d9382b6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these lines of code would give you the **humidity** for the **third** day listed in the **consolidated weather** forecasts?",
                "answers": [
                  {
                    "id": "a1536031662182",
                    "text": "`d['consolidated_weather'][3]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536031753446",
                    "text": "`d['consolidated_weather'][2]['humidity']`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536031754212",
                    "text": "`d['consolidated_weather']['humidity']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536031833479",
                    "text": "`['consolidated_weather'][2]['humidity']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536031849764",
                    "text": "`d[2]['humidity']`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 707891,
              "key": "ce1c6c6b-1892-409f-b95e-17a3e041b70e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ce1c6c6b-1892-409f-b95e-17a3e041b70e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The `consolidated_weather` list gives us forecasts for the next six days. Which of these lines would print out the **date** for the **sixth** (final) forecast in the list?",
                "answers": [
                  {
                    "id": "a1536066183099",
                    "text": "`print(d['consolidated_weather'][5]['applicable_date'])`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536066305985",
                    "text": "`print(d['consolidated_weather'][6]['applicable_date'])`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536066307233",
                    "text": "`print(d['consolidated_weather'][5]['date'])`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536066308273",
                    "text": "`print(d['consolidated_weather'][6]['date'])`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 707892,
              "key": "b142f693-40f0-4535-a08d-4cc41b7f9244",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b142f693-40f0-4535-a08d-4cc41b7f9244",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add code to print the **date** and **humidity** for all six of the upcoming days.",
                "Try using a `for` loop to loop over all the forecasts in `'consolidated_weather'`.",
                "Try using _f-strings_ to format the output."
              ],
              "positive_feedback": "Now we're really getting somewhere!",
              "video_feedback": null,
              "description": "The workspace below should have your code from a couple pages ago (the code that gets the weather data).\n\nIt's time to actually start printing out the forecast!\n\nFirst, just try to get some weather data to print. Once you're able to do that, see if you can do it using a `for` loop. Then try adding some string formatting to make the output look better.\n\n(This is _very_ similar to what we did a few pages back to generate that simple weather report‚Äîonly with real weather data now!)"
            },
            {
              "id": 707889,
              "key": "c69bddbe-1fd5-4b0c-b59d-de1c47aa80fd",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view0pwjmln6y5ci",
              "pool_id": "webterminal",
              "view_id": "generic-b9cu49vhglh",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/weather.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 707894,
              "key": "b02406e2-3f77-4bd8-928c-7351dcca5db7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----",
              "instructor_notes": ""
            },
            {
              "id": 707893,
              "key": "9bfb2cf3-0a38-4700-8dee-7a8c9e7c4857",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nOne way we _could_ do this is simply to have a separate `print` statement for each value:\n\n```python\nimport requests\n\nr = requests.get('https://www.metaweather.com/api/location/2455920')\nd = r.json()\n\nprint(d['consolidated_weather'][0]['applicable_date'])\nprint(d['consolidated_weather'][0]['humidity'])\nprint(d['consolidated_weather'][1]['applicable_date'])\nprint(d['consolidated_weather'][1]['humidity'])\nprint(d['consolidated_weather'][2]['applicable_date'])\nprint(d['consolidated_weather'][2]['humidity'])\nprint(d['consolidated_weather'][3]['applicable_date'])\nprint(d['consolidated_weather'][3]['humidity'])\nprint(d['consolidated_weather'][4]['applicable_date'])\nprint(d['consolidated_weather'][4]['humidity'])\nprint(d['consolidated_weather'][5]['applicable_date'])\nprint(d['consolidated_weather'][5]['humidity'])\n```\n\nBut this is very repetitive and also inflexible‚Äìif at some point MetaWeather gave us data for only, say, four days, this code would no longer work (you'd get an error for the index being out of range).\n\nA more efficient and flexible way would be to use a `print` statement inside a `for` loop. Here's how we did that, but there are some different ways you could set this up, so yours may look a little different. \n\n```python\nimport requests\n\nr = requests.get('https://www.metaweather.com/api/location/2455920')\nd = r.json()\n\nfor forecast in d['consolidated_weather']:\n    date = forecast['applicable_date']\n    humidity = forecast['humidity']\n    print(f\"{date}\\tHumidity: {humidity}\")\n```\n\n**Note:** The `\\t` in the string inserts a tab (to space out the data and humidity data).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 695829,
          "key": "cdd36203-ecb1-4673-b41a-a3490bd42bab",
          "title": "Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cdd36203-ecb1-4673-b41a-a3490bd42bab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714698,
              "key": "6ac11a52-5893-4d45-b82e-67eb2bcd593c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Review\n\nYou've covered a _lot_ of new ideas! Let's review some of them for extra practice.",
              "instructor_notes": ""
            },
            {
              "id": 695842,
              "key": "2e3abc61-7d6f-4e38-b5fb-47d1eb533b1b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2e3abc61-7d6f-4e38-b5fb-47d1eb533b1b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In this block of code, what kind of object is in the variable `yahoo`?\n\n```python\nimport requests\nyahoo = requests.get(\"https://www.yahoo.com/\")\nprint(yahoo.text)\n```",
                "answers": [
                  {
                    "id": "a1534883444690",
                    "text": "A **request** object, containing the URL and the server address.",
                    "is_correct": false
                  },
                  {
                    "id": "a1534883507279",
                    "text": "A **response** object, containing a status code and response text.",
                    "is_correct": true
                  },
                  {
                    "id": "a1534883507996",
                    "text": "A **module** object, containing methods and variables.",
                    "is_correct": false
                  },
                  {
                    "id": "a1534883520654",
                    "text": "Nothing; this `requests.get` function call will always raise an exception.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 695850,
              "key": "5c98fdf2-7855-4707-8f40-378d6006e9c6",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5c98fdf2-7855-4707-8f40-378d6006e9c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here are some statements about JSON data. Choose the one statement that is **correct**.\n\nYou can find out more about JSON at https://www.json.org/.",
                "answers": [
                  {
                    "id": "a1534883798729",
                    "text": "JSON is used by web APIs to send nested data structures that can contain strings, numbers, lists, and key-value pairs.",
                    "is_correct": true
                  },
                  {
                    "id": "a1534883811273",
                    "text": "JSON is designed only to be used with JavaScript code. You can't access JSON data from Python.",
                    "is_correct": false
                  },
                  {
                    "id": "a1534883811831",
                    "text": "JSON is a version of HTML that is more efficient because it does not include any plain text.",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884008226",
                    "text": "JSON can contain text and numbers, but it cannot contain URLs due to security concerns.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 695852,
              "key": "5a75cf83-05c3-4417-bad0-fc58aa05c318",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a75cf83-05c3-4417-bad0-fc58aa05c318",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What kind of exception do you expect this code will raise?\n\n```python\nimport requests\nr = requests.get(\"Programming rocks my socks.\")\nprint(r.text)\n```",
                "answers": [
                  {
                    "id": "a1534884274084",
                    "text": "`TypeError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884358212",
                    "text": "`NameError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884358804",
                    "text": "`requests.exceptions.MissingSchema`",
                    "is_correct": true
                  },
                  {
                    "id": "a1534884388345",
                    "text": "`requests.exceptions.UnsupportedStatusCode`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884412446",
                    "text": "No exception.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 695853,
              "key": "1f478ac2-7b24-4dc9-9625-f84c8ada0531",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1f478ac2-7b24-4dc9-9625-f84c8ada0531",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the output of this code?\n```python\nroman = {'i': 1, 'v': 5, 'x': 10}\nroman['m'] = 1000\nletters = list(roman.keys())\nletters.sort()\nprint(\" \".join(letters))\n```\nThink about it, then try it out in Python yourself.",
                "answers": [
                  {
                    "id": "a1534884663262",
                    "text": "`{'i': 1, 'v': 5, 'x': 10, 'm': 1000}`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884817157",
                    "text": "`i v x m`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884817914",
                    "text": "`imvx`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534884856490",
                    "text": "`i m v x`",
                    "is_correct": true
                  },
                  {
                    "id": "a1534884868926",
                    "text": "It raises a `TypeError`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 714700,
              "key": "cef6183b-e4b3-4045-85f8-a09897874e8e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cef6183b-e4b3-4045-85f8-a09897874e8e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Give this code a try in the Python interpreter:\n\n```bash\n>>> my_list = [1, 2, 3]\n>>> my_list[0] = \"foo\"\n>>> my_list\n```\n\nWhat do you get?",
                "answers": [
                  {
                    "id": "a1536943127133",
                    "text": "`[1, 2, 3]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536943196077",
                    "text": "`[\"foo\", 2, 3]`",
                    "is_correct": true
                  },
                  {
                    "id": "a1536943196525",
                    "text": "`[\"foo\", \"foo\", \"foo\"]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536943197275",
                    "text": "A `TypeError`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 714701,
              "key": "ac691489-ff42-43d7-b4d5-79d5a3a8a5e3",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ac691489-ff42-43d7-b4d5-79d5a3a8a5e3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now try this:\n\n```bash\n>>> my_tuple = (1, 2, 3)\n>>> my_tuple[0] = \"foo\"\n```\n\nWhat do you get?",
                "answers": [
                  {
                    "id": "a1536943354254",
                    "text": "`(1, 2, 3)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536943380886",
                    "text": "`(\"foo\", 3, 3)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536943381525",
                    "text": "`(\"foo\", \"foo\", \"foo\")`",
                    "is_correct": false
                  },
                  {
                    "id": "a1536943382062",
                    "text": "A `TypeError`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 695867,
              "key": "0af03ceb-f366-4f8f-afce-dc18172c32ca",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0af03ceb-f366-4f8f-afce-dc18172c32ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Imagine that there is a web service at `https://example.net/api`. \nWhen you access it from the shell, you see this:\n```shell\n$ curl https://example.net/api\n{\"worries\": 0, \"programs\": 100}\n```\nWhat will this Python code print?\n```python\nimport requests\nr = requests.get(\"https://example.net/api\")\nj = r.json()\nprint(f\"I have {j['worries']} worries and {j['programs']} programs.\")\n```",
                "answers": [
                  {
                    "id": "a1534885767256",
                    "text": "`I have {j['worries']} worries and {j['programs']} programs.`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534886047311",
                    "text": "`I have 100 worries and 0 programs.`",
                    "is_correct": false
                  },
                  {
                    "id": "a1534886047988",
                    "text": "`I have 0 worries and 100 programs.`",
                    "is_correct": true
                  },
                  {
                    "id": "a1534886091658",
                    "text": "It will raise an exception.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 681557,
          "key": "ad4067f2-3db9-4300-8afd-9e14a5b064e4",
          "title": "Weather report",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad4067f2-3db9-4300-8afd-9e14a5b064e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 714808,
              "key": "0d8d13a9-6994-429d-be88-24917c22c8d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Weather report\n\nYou now have all the tools you would need to create the weather report you saw at the beginning of this lesson, where it asks the user for their location and then gives them the forecast for the next several days.\n\nLet's review the main things this program should do.",
              "instructor_notes": ""
            },
            {
              "id": 714809,
              "key": "20cf444d-6543-4f48-b12e-9899b64f1ffa",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "20cf444d-6543-4f48-b12e-9899b64f1ffa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some of the key steps we want our code to take. Can you place them in the correct order?"
                },
                "concepts_label": "Step",
                "answers_label": "What to do",
                "concepts": [
                  {
                    "text": "Step 1",
                    "correct_answer": {
                      "id": "a1537124676629",
                      "text": "Ask user what city they're in."
                    }
                  },
                  {
                    "text": "Step 2",
                    "correct_answer": {
                      "id": "a1537124775004",
                      "text": "Use city name to get WOEID."
                    }
                  },
                  {
                    "text": "Step 3",
                    "correct_answer": {
                      "id": "a1537124776037",
                      "text": "Use WOEID to get weather data."
                    }
                  },
                  {
                    "text": "Step 4",
                    "correct_answer": {
                      "id": "a1537124777774",
                      "text": "Convert data from JSON text to Python dictionary."
                    }
                  },
                  {
                    "text": "Step 5",
                    "correct_answer": {
                      "id": "a1537124779254",
                      "text": "Loop over the dictionary and display the forecast for each day."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1537124779254",
                    "text": "Loop over the dictionary and display the forecast for each day."
                  },
                  {
                    "id": "a1537124775004",
                    "text": "Use city name to get WOEID."
                  },
                  {
                    "id": "a1537124777774",
                    "text": "Convert data from JSON text to Python dictionary."
                  },
                  {
                    "id": "a1537124676629",
                    "text": "Ask user what city they're in."
                  },
                  {
                    "id": "a1537124776037",
                    "text": "Use WOEID to get weather data."
                  }
                ]
              }
            },
            {
              "id": 714812,
              "key": "daba0016-cecc-448e-904e-da85ccc02c6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Time to play!\n\nIn a moment, we'll show you the code for our own (mostly finished) weather report program. But before we do, you may want to take a break and simply play around on your own, to see how many of the above steps you can figure out.\n\nYou've learned all of the things you'll need, but it may be tricky to remember it all and bring the different parts together. Giving it a try (even if you don't get very far) will get your brain thinking about the problem, which will help the code below make more sense.",
              "instructor_notes": ""
            },
            {
              "id": 714810,
              "key": "f44451ca-597c-40b9-a97f-2a5063894680",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Finishing Karl's code\nIn the workspace below, you'll find some code that Karl wrote to carry out the above steps‚Äîall except the last one. The code gets the weather data, but it doesn't display it yet.\n\n**Your job will be to complete the code by looping over the weather dictionary and printing out the forecasts.** To get practice handling exceptions, you can also add a `try .. except` statement to handle a connection error if one should occur.\n\nYou _don't_ need to understand all of this code to be able to finish the exercise, but it can be beneficial to read through the program and see how much of it you can figure out. Actively reading through code and trying to figure out how it works is an excellent way to improve your own programming skills. \n\n[Here's a PDF of the code that you can download](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/September/5ba1d192_ipnd-reference-sheet-weather-report-code/ipnd-reference-sheet-weather-report-code.pdf). It also has a few additional notes about the general structure of the code that you may find helpful. You may want to print this out so that you can write on it, draw arrows, highlight things, and so on. \n\nKarl will also go over the solution in a video at the end of this page.",
              "instructor_notes": ""
            },
            {
              "id": 689713,
              "key": "38948f43-ba38-400a-8ef0-af33af0652da",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "38948f43-ba38-400a-8ef0-af33af0652da",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "The `display_weather` function receives the weather dictionary as an argument. Loop over this data to **print the weather report.**",
                "**Add a try/except statement** so that a network error does not crash the program with a traceback."
              ],
              "positive_feedback": "**Yay, weather!**  \n\n‚òÄÔ∏è‚õÖüå¶Ô∏èüåßÔ∏è‚õàÔ∏è",
              "video_feedback": null,
              "description": "In the workspace below, complete the weather report program."
            },
            {
              "id": 689712,
              "key": "4bcc61dc-ac12-46ff-b03a-a16c3b98f386",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view0bsastyuf13n",
              "pool_id": "webterminal",
              "view_id": "generic-v69ixz0k83",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [
                      "/home/workspace/weather.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 689735,
              "key": "800f3bf7-4fe1-46c7-8843-f8498f1163b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As an optional, additional exercise, try testing this program with the network down! To do this, copy your code into a file on your own computer, open a terminal, _then disconnect your wifi or other network connection_ and run your program. You should see your custom error message!",
              "instructor_notes": ""
            },
            {
              "id": 704851,
              "key": "2fb3b546-c8ad-49e5-a950-2604909c5006",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Walkthrough\n\nNow that you've given it a try, we'll walk you through how we put our weather report together.",
              "instructor_notes": ""
            },
            {
              "id": 817530,
              "key": "49a8d950-229c-44f2-a1cb-7b5350575ac6",
              "title": "IPND PY L6 N11 Walkthrough Weather Report HS-SC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "od7HFSpPfxE",
                "china_cdn_id": "od7HFSpPfxE.mp4"
              }
            },
            {
              "id": 714811,
              "key": "3780e5d4-302c-409f-9f76-c9dc5235410f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nAnd here's the full code for your reference:\n\n```python\n#!/usr/bin/env python3\n\nimport requests\n\nAPI_ROOT = 'https://www.metaweather.com'\nAPI_LOCATION = '/api/location/search/?query='\nAPI_WEATHER = '/api/location/'  # + woeid\n\ndef fetch_location(query):\n    return requests.get(API_ROOT + API_LOCATION + query).json()\n\ndef fetch_weather(woeid):\n    return requests.get(API_ROOT + API_WEATHER + str(woeid)).json()\n\ndef disambiguate_locations(locations):\n    print(\"Ambiguous location! Did you mean:\")\n    for loc in locations:\n        print(f\"\\t* {loc['title']}\")\n\ndef display_weather(weather):\n    print(f\"Weather for {weather['title']}:\")\n    for entry in weather['consolidated_weather']:\n        date = entry['applicable_date']\n        high = entry['max_temp']\n        low = entry['min_temp']\n        state = entry['weather_state_name']\n        print(f\"{date}\\t{state}\\thigh {high:2.1f}¬∞C\\tlow {low:2.1f}¬∞C\")\n\ndef weather_dialog():\n    try:\n        where = ''\n        while not where:\n            where = input(\"Where in the world are you? \")\n        locations = fetch_location(where)\n        if len(locations) == 0:\n            print(\"I don't know where that is.\")\n        elif len(locations) > 1:\n            disambiguate_locations(locations)\n        else:\n            woeid = locations[0]['woeid']\n            display_weather(fetch_weather(woeid))\n    except requests.exceptions.ConnectionError:\n        print(\"Couldn't connect to server! Is the network up?\")\n\nif __name__ == '__main__':\n    while True:\n        weather_dialog()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 693931,
          "key": "9ad0016a-2f72-4791-9f6c-9e29f7322b93",
          "title": "Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ad0016a-2f72-4791-9f6c-9e29f7322b93",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 718478,
              "key": "067749a1-8e00-43d8-bd57-5a05c6b8a773",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            },
            {
              "id": 817531,
              "key": "872c6178-5cc5-4347-9c82-7db6f98c0d27",
              "title": "IPND PY L6 N12 Outro HS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "k5qwyFYvCy0",
                "china_cdn_id": "k5qwyFYvCy0.mp4"
              }
            },
            {
              "id": 714813,
              "key": "406d6538-287b-447f-9984-af70cc25d03e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Congratulations on completing the lesson!\n\nYou've made some very significant accomplishments in this lesson! Importantly, you learned how to use Python dictionaries, and accessed data that was buried in some pretty complex-looking data structures.\n\nYou also got hands-on practice requesting data from a Web API. Not every Web API works exactly the same, but many of them use JSON and return data structures similar to what you worked with here. \n\nSo now that you've learned the fundamentals of making requests and handling JSON data, a whole new world of resources is open to you.\n\nIf you want to get a feeling for the sheer volume (and variety) of resources that are out there, [here's the list of public APIs that Karl was looking at in the beginning of the lesson](https://github.com/toddmotto/public-apis).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}