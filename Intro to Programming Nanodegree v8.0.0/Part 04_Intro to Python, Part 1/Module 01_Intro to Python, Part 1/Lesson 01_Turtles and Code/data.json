{
  "data": {
    "lesson": {
      "id": 817309,
      "key": "eabdcfad-bcd7-4b4e-8b51-a4b3b4a0a13a",
      "title": "Turtles and Code",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Get started learning core programming concepts with Python, while writing instructions to make a virtual \"turtle\" robot draw colorful shapes on the screen.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/eabdcfad-bcd7-4b4e-8b51-a4b3b4a0a13a/817309/1582017598990/Turtles+and+Code+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/eabdcfad-bcd7-4b4e-8b51-a4b3b4a0a13a/817309/1582017593841/Turtles+and+Code+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 457392,
          "key": "5baabfe9-0cec-4aab-8b0e-c2537eb6c550",
          "title": "Welcome!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5baabfe9-0cec-4aab-8b0e-c2537eb6c550",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674606,
              "key": "e879c115-ecc0-43ac-8cd6-4255eea488c5",
              "title": "Python: Welcome To Python Programming",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_XOoHSQIkkw",
                "china_cdn_id": "_XOoHSQIkkw.mp4"
              }
            },
            {
              "id": 463240,
              "key": "c57c62bc-2ea3-4426-879e-59628f094982",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0a2707_rainbow-examples/rainbow-examples.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c57c62bc-2ea3-4426-879e-59628f094982",
              "caption": "*By the end of this lesson, you'll write programs that draw colorful patterns like these!*",
              "alt": "Three rainbow-colored shapes: a star, a rainbow flag, and a starburst.",
              "width": 516,
              "height": 197,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 463826,
          "key": "f5c2f9cb-2ced-423c-ab9f-f279a02d99d9",
          "title": "Starting out",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f5c2f9cb-2ced-423c-ab9f-f279a02d99d9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 463830,
              "key": "2ef65f99-e801-41df-8a48-0370d6331c53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ❇️ Starting out\n\nIn this lesson, you'll be editing and writing code in a language called **Python**. You'll do this in a **workspace**, the large gray box below.",
              "instructor_notes": ""
            },
            {
              "id": 463828,
              "key": "05b777f3-dfd4-4c64-86df-f217f4b75329",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "6d799d3a-7c19-48c9-a842-e8c3d4380170",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/blank.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/blank.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 464556,
              "key": "7509c8ea-cc43-4807-b48b-854850edc102",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "On the left of the workspace is an **editor** where you will write code. On the right is where you'll see what the code does. The **Run** button tells the workspace to start running your code.\n\nTo get started, copy and paste this code into the left side of the workspace:\n\n```python\nimport turtle\nfred = turtle.Turtle()\nfred.color(\"red\")\nfred.forward(100)\nfred.right(135)\nfred.forward(140)\nfred.right(135)\nfred.forward(100)\n```\n\nYou probably have no idea what this code means, and that's completely OK! Over the next few pages, you'll be experimenting with it in order to figure out how it works.\n\nAfter pasting this into the workspace, click the **Run** button.\n\nThe lines of code that you pasted above are a **program** — a set of instructions for the computer to follow. In this case, that program tells the computer to draw a triangle on the screen.\n\n> **Vocabulary word:** A **program** is a set of instructions for a computer. A program is made up of lines of code. Each line tells the computer a particular detail of those instructions.\n\nIn this lesson, you'll be writing programs that give instructions to **turtles** in order to make them create different shapes and patterns. You can think of turtles as virtual robots that know how to draw lines on the screen, following commands such as `forward`, `back`, `left`, and `right` (we'll explain why they're called \"turtles\" in a minute).\n\n## Play with it!\n\nYou can edit the instructions in the code above. Experimenting with code is a great way to learn how it works. Try changing the numbers. Try duplicating some of the instructions with copy-and-paste! Always press **Run** again to see what your code does.\n\nYou can't go wrong here — when you get an error message, you can use the **Undo** command (<kbd>Ctrl+Z</kbd> on Windows, <kbd>⌘Z</kbd> on Mac) to undo an edit. You can **Undo** as many times as you need, all the way back to the original starter code.\n\n**Note:** If the editor is not selected, the Undo command will not work. So if the Undo command doesn't seem to be working, make sure you have first clicked inside the editor (in the left side of the workspace).",
              "instructor_notes": ""
            },
            {
              "id": 464360,
              "key": "021b7414-4e7d-4c1a-9cd8-815aae0eba3f",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "021b7414-4e7d-4c1a-9cd8-815aae0eba3f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Paste the code into the workspace editor.",
                "Run the code by pressing the **Run** button.",
                "Try making a small edit to the code and pressing **Run** again.",
                "Try using the **Undo** command to reverse some of your changes."
              ],
              "positive_feedback": "One small step for a turtle ...",
              "video_feedback": null,
              "description": "Check off these activities as you complete them —"
            },
            {
              "id": 486067,
              "key": "90dbdcf3-14e0-4428-8ad9-75cb17ce0f9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why turtles?\n\nThere are a lot of different ways that you can learn to code. Many programming courses start out with programs that display text in a terminal window. But it's often hard to tell what a program is doing, if all you can see is a page of textual output. The turtle lets you see what the program is doing, by watching it build up a pattern or shape over time.\n\nLearning to code is only *partly* about learning the grammar of a programming language such as Python. It's *mostly* about learning a way of thinking about patterns, repetition, processes, and information. The turtle gives us a way to visualize that.\n\n### Why is it called a \"turtle\"?\n\nThe idea of \"turtle graphics\" was invented in the 1960s by computing educator Seymour Papert. Originally, the turtle was an actual physical robot, with a domed enclosure like a turtle's shell. The robot held a pen and could draw on a large sheet of paper. As computers became cheaper and graphics got better, the turtle robot was often replaced with an on-screen version like the one we're using in this course.",
              "instructor_notes": ""
            },
            {
              "id": 495961,
              "key": "4a1b83d5-f366-4f07-99b0-123bd6e5fe37",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a4d38b6_turtle-draw/turtle-draw.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4a1b83d5-f366-4f07-99b0-123bd6e5fe37",
              "caption": "_A turtle robot that draws on paper._  \n[_Image by Valiant Technologies, Ltd._](https://commons.wikimedia.org/wiki/File:Turtle_draw.jpg)",
              "alt": "A turtle robot that draws on paper.",
              "width": 281,
              "height": 207,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 440438,
          "key": "0ed5bf38-a703-4cdb-94fd-29917ec546ec",
          "title": "Drawing with turtles",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ed5bf38-a703-4cdb-94fd-29917ec546ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 440440,
              "key": "a7440b8e-9366-4f4b-a9a0-de8d3c35285c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 🖍 Drawing with Turtles\n\nHere's a different piece of code. What happens when you press the **Run** button?",
              "instructor_notes": ""
            },
            {
              "id": 440439,
              "key": "df459a58-bf75-4670-b7ec-e1a095a17899",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "69c608dc-afbc-4ac4-b65f-fafd55f987a4",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/one.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/one.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 440459,
              "key": "a5f865f0-7757-4051-a2ec-e5a11c984f08",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a5f865f0-7757-4051-a2ec-e5a11c984f08",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens when you press the **Run** button?",
                "answers": [
                  {
                    "id": "a1509147266623",
                    "text": "A little arrow shape shows up and draws a yellow square.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509147297140",
                    "text": "A little arrow shape shows up and draws a yellow spiral.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509147298191",
                    "text": "A little fish shows up and spells out the name \"george\" on the screen.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509147298835",
                    "text": "The program turns your computer into a friendly puppy that chews your shoes.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 674607,
              "key": "d6baa45a-9a44-4eb4-9c43-3c6e63a6c211",
              "title": "Python: Walking Through The Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nBj8D_meKsA",
                "china_cdn_id": "nBj8D_meKsA.mp4"
              }
            },
            {
              "id": 440462,
              "key": "dc1a8d83-d859-43d2-b075-af61cebfecd0",
              "title": "Ginevra",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dc1a8d83-d859-43d2-b075-af61cebfecd0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if we replace the name `george` with, say, `amy`, but _only on one line of the code_? Try making that change in the editor above, and running the code again. What happens?",
                "answers": [
                  {
                    "id": "a1509147700276",
                    "text": "It still draws a square.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509147748473",
                    "text": "It shows an error message instead.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 462468,
              "key": "5165cd06-be83-45fc-8a7c-75b1fe9699ee",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5165cd06-be83-45fc-8a7c-75b1fe9699ee",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if we replace *all* the instances of `george` with `amy`? Try making *that* change and running the code again. What happens?",
                "answers": [
                  {
                    "id": "a1510685556537",
                    "text": "It draws a square again.",
                    "is_correct": true
                  },
                  {
                    "id": "a1510685587580",
                    "text": "It displays an error message instead.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 464366,
              "key": "c06076ba-0b3b-4766-ba5a-1ed859292e80",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c06076ba-0b3b-4766-ba5a-1ed859292e80",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code in the workspace above.",
                "Using the editor, **replace** each use of the name `george` with the name `amy`.",
                "**Run** the code after making this change."
              ],
              "positive_feedback": "Okay, we can do red triangles and yellow squares. What next?",
              "video_feedback": null,
              "description": "Before you go on, make sure that you've done each of these steps!"
            }
          ]
        },
        {
          "id": 556963,
          "key": "13c22400-5c38-4c82-b018-4c3043eebe54",
          "title": "Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "13c22400-5c38-4c82-b018-4c3043eebe54",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675050,
              "key": "2933c903-1248-493b-83ea-d21e482ba24e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            },
            {
              "id": 674608,
              "key": "1d3fa3c5-5d83-4ef5-a35b-a4fb703588dc",
              "title": "Python: Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VPnV3RdoB7Q",
                "china_cdn_id": "VPnV3RdoB7Q.mp4"
              }
            }
          ]
        },
        {
          "id": 556953,
          "key": "e0d01825-2321-49d3-8de3-6151faecceda",
          "title": "Practice — Variables and more",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0d01825-2321-49d3-8de3-6151faecceda",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 730417,
              "key": "9e278fab-e8ef-4d87-9c4d-cb18eae2f52e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Variables and more",
              "instructor_notes": ""
            },
            {
              "id": 556962,
              "key": "eaaa2754-9316-4584-8347-aa1a52672fa3",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eaaa2754-9316-4584-8347-aa1a52672fa3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each of these things with its description."
                },
                "concepts_label": "Description",
                "answers_label": "Term",
                "concepts": [
                  {
                    "text": "A set of instructions for the computer to follow.",
                    "correct_answer": {
                      "id": "a1520339247172",
                      "text": "program"
                    }
                  },
                  {
                    "text": "A _data object_ that knows how to draw lines on the screen.",
                    "correct_answer": {
                      "id": "a1520339266058",
                      "text": "turtle"
                    }
                  },
                  {
                    "text": "*Undo* your last code edit on a Mac.",
                    "correct_answer": {
                      "id": "a1520339303922",
                      "text": "⌘Z"
                    }
                  },
                  {
                    "text": "*Undo* your last code edit on Windows.",
                    "correct_answer": {
                      "id": "a1520344348054",
                      "text": "Ctrl+Z"
                    }
                  },
                  {
                    "text": "A connection between a name in the code and some data in the computer’s memory.",
                    "correct_answer": {
                      "id": "a1520347043485",
                      "text": "variable"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1520344348054",
                    "text": "Ctrl+Z"
                  },
                  {
                    "id": "a1520347043485",
                    "text": "variable"
                  },
                  {
                    "id": "a1520339266058",
                    "text": "turtle"
                  },
                  {
                    "id": "a1520339247172",
                    "text": "program"
                  },
                  {
                    "id": "a1520339303922",
                    "text": "⌘Z"
                  }
                ]
              }
            },
            {
              "id": 556974,
              "key": "78a08e7e-d038-425a-89f7-7228cafd0c3d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "78a08e7e-d038-425a-89f7-7228cafd0c3d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's some code you saw earlier:\n\n```python\nimport turtle\nfred = turtle.Turtle()\nfred.color(\"red\")\nfred.forward(100)\nfred.right(135)\nfred.forward(140)\nfred.right(135)\nfred.forward(100)\n```\nWhich part of this code is an example of a **variable** name?",
                "answers": [
                  {
                    "id": "a1520344648482",
                    "text": "`import`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520344740291",
                    "text": "`turtle`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520344744858",
                    "text": "`\"red\"`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520344754898",
                    "text": "`fred`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 556977,
              "key": "5f603eee-80e7-4322-8917-c90d8da0136b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5f603eee-80e7-4322-8917-c90d8da0136b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these lines of code is an **assignment statement**?",
                "answers": [
                  {
                    "id": "a1520345699599",
                    "text": "`fred = turtle.Turtle()`",
                    "is_correct": true
                  },
                  {
                    "id": "a1520345743197",
                    "text": "`import turtle`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520345743942",
                    "text": "`fred.color(\"red\")`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 560535,
              "key": "37426b96-4953-446b-a31e-7705a521632e",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "37426b96-4953-446b-a31e-7705a521632e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Can you match each piece of this statement with the correct description?\n\n`fred = turtle.Turtle()`"
                },
                "concepts_label": "Description",
                "answers_label": "Code",
                "concepts": [
                  {
                    "text": "gives the name of the variable",
                    "correct_answer": {
                      "id": "a1520791986924",
                      "text": "`fred`"
                    }
                  },
                  {
                    "text": "takes the thing on the right and assigns it to the name on the left",
                    "correct_answer": {
                      "id": "a1520792007820",
                      "text": "`=`"
                    }
                  },
                  {
                    "text": "creates a new turtle data object in memory",
                    "correct_answer": {
                      "id": "a1520792031470",
                      "text": "`turtle.Turtle()`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1520792031470",
                    "text": "`turtle.Turtle()`"
                  },
                  {
                    "id": "a1520791986924",
                    "text": "`fred`"
                  },
                  {
                    "id": "a1520792007820",
                    "text": "`=`"
                  }
                ]
              }
            },
            {
              "id": 556979,
              "key": "f5d5e29b-13b6-4470-b804-9c00468e8f5c",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f5d5e29b-13b6-4470-b804-9c00468e8f5c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's time for you to get practice typing this out for yourself. What line of code would you type to create a new turtle named `frodo`?\n\nIf you can, try to remember it without looking back at earlier examples!",
                "matchers": [
                  {
                    "expression": "\\s*frodo\\s*=\\s*turtle.Turtle\\(\\)\\s*"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 440612,
          "key": "1bda4681-3cfa-4370-a744-10195cff9d8b",
          "title": "Changing colors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1bda4681-3cfa-4370-a744-10195cff9d8b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674609,
              "key": "739d3cc7-fb2d-4bce-90c1-477b4a2c5e31",
              "title": "Python: Walking Through The Code Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qjNbBZAPOlQ",
                "china_cdn_id": "qjNbBZAPOlQ.mp4"
              }
            },
            {
              "id": 440617,
              "key": "979d5c68-8d46-4b8f-aa72-011764f84690",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Below, you'll see the same code as before, with `george` replaced by `amy`.",
              "instructor_notes": ""
            },
            {
              "id": 440613,
              "key": "0bbeba1c-8b7d-45c2-ad5d-a8e3d1698cef",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "2c677285-f02a-4d65-9f8c-30418ca0b58f",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/two.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/two.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 440620,
              "key": "83a932e8-21a3-4101-a0e4-020791fd49ec",
              "title": "Green",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "83a932e8-21a3-4101-a0e4-020791fd49ec",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if we replace `\"yellow\"` with the name of another color, like `\"green\"`?",
                "answers": [
                  {
                    "id": "a1509387467497",
                    "text": "It's an error. Turtles are not allowed to be green.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509387489110",
                    "text": "It makes the turtle and square green instead of yellow.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509387490258",
                    "text": "It prints out the word \"green\" on the screen.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509387491145",
                    "text": "It crashes your web browser and calls the FBI.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 556990,
              "key": "e5f16eef-7588-491e-9acf-aa2744b80795",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Vocabulary word:** The words `\"yellow\"` and `\"green\"` are called **strings**. The term _string_ comes from the idea that these bits of code are _strings_ (that is, sequences) of characters—in other words, we would say that a piece of code like `\"yellow\"` is a _string_ of characters.\n\nIn a later lesson, we’ll go into detail about what strings are and how they work. For now, all you need to know is that _you can tell strings apart from other parts of the code because they are written inside quotes_.\n\nThe quotes aren't just how you, as the programmer, can tell that something is a _string_—they are also how _Python_ is able to tell that something is a string. To see this in action, go back up to the workspace and try removing the quotes from `\"green\"`, so that the code is simply:\n\n```python\namy.color(green)\n```",
              "instructor_notes": ""
            },
            {
              "id": 556991,
              "key": "c21ba685-fc68-40f4-89dc-044d259d21b0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c21ba685-fc68-40f4-89dc-044d259d21b0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happened when you ran the code after removing the quotes?",
                "answers": [
                  {
                    "id": "a1520349145030",
                    "text": "It still worked and drew a green square like before.",
                    "is_correct": false
                  },
                  {
                    "id": "a1520349184845",
                    "text": "It drew a square, but the square was black instead of green.",
                    "is_correct": false
                  },
                  {
                    "id": "a1520349216845",
                    "text": "It displayed an error.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 560422,
              "key": "3d674c08-c59c-410a-802a-210514711388",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Make sure to put the quotes back when you're done, so that the code works again:\n\n```python\namy.color(\"green\")\n```",
              "instructor_notes": ""
            },
            {
              "id": 486182,
              "key": "97fd118f-3512-4211-8255-0ce3b963cfea",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "97fd118f-3512-4211-8255-0ce3b963cfea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Some of these pieces of text could be used in a Python program as **strings**.\n\nMark the ones that fit the rules for writing **strings** in your code.",
                "answers": [
                  {
                    "id": "a1513482862359",
                    "text": "`Hello!`",
                    "is_correct": false
                  },
                  {
                    "id": "a1513482906428",
                    "text": "`\"Hello!\"`",
                    "is_correct": true
                  },
                  {
                    "id": "a1513482922196",
                    "text": "`\"123\"`",
                    "is_correct": true
                  },
                  {
                    "id": "a1513482941221",
                    "text": "`123`",
                    "is_correct": false
                  },
                  {
                    "id": "a1513482945948",
                    "text": "`[1, 2, 3]`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 674610,
              "key": "7c0b7e98-25d5-4cfb-84bb-8781ff59d24b",
              "title": "Python: Walking Through The Code Part 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xh7_q1Q2Irc",
                "china_cdn_id": "xh7_q1Q2Irc.mp4"
              }
            },
            {
              "id": 440628,
              "key": "a88244c7-5dd1-4e49-a2fa-e739dffe6685",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a88244c7-5dd1-4e49-a2fa-e739dffe6685",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which **two** of these sentences describe what the turtle does?\n\nMark **two** answers.",
                "answers": [
                  {
                    "id": "a1509387855282",
                    "text": "It goes forward, turns right ... goes forward, turns right ... goes forward, turns right ... goes forward, turns right.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509387867092",
                    "text": "It goes forward, turns right, goes backward, and spins around in place.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509387869080",
                    "text": "It draws a square.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 440629,
              "key": "a854c813-58d7-4c68-9b70-6698817237fc",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a854c813-58d7-4c68-9b70-6698817237fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think the number 90 means in `amy.right(90)`?",
                "answers": [
                  {
                    "id": "a1509388244209",
                    "text": "It's the _password_ to unlock the `right` command.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509388263216",
                    "text": "The turtle scoots 90 pixels _sideways_ to the right.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509388264035",
                    "text": "The turtle _turns_ right by 90 degrees — a right angle.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 440630,
          "key": "7a77b48d-c9b2-4de9-9acd-e0bd1bb5f2e0",
          "title": "Changing shapes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7a77b48d-c9b2-4de9-9acd-e0bd1bb5f2e0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674611,
              "key": "b91b240a-590d-4433-aa6a-8ce02ecae9cf",
              "title": "Python: Moving And Turning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_APxiaRZg_0",
                "china_cdn_id": "_APxiaRZg_0.mp4"
              }
            },
            {
              "id": 464597,
              "key": "25f0ae93-de3a-425f-9ba6-7e301e5355e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Below on this page, you'll be changing this program —",
              "instructor_notes": ""
            },
            {
              "id": 463194,
              "key": "f208d4ac-5647-4e3f-a527-a669debf2504",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "6879f5ff-92dd-4c68-a91d-d780de0493c9",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/two.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/two.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 440631,
              "key": "34e017fa-954f-4523-a153-33ed5d3b2cc1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ✂️ Dividing the code into two parts\n\nIt kind of looks like we could split this code into two parts:\n\n```python\nimport turtle\namy = turtle.Turtle()\namy.color(\"green\")\n```\n\n```python\nfor side in [1, 2, 3, 4]:\n\tamy.forward(100)\n\tamy.right(90)\n```\n\nThe first part is setting up the things we're going to work with. Namely, it says `amy` is a turtle, and that `amy` will use the color green. The second part is actually telling `amy` what to draw, which is, make the four sides of a square. And it makes each side by going forward and then turning right.",
              "instructor_notes": ""
            },
            {
              "id": 440632,
              "key": "d0de40e0-6430-4fce-bc6b-97406111f152",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d0de40e0-6430-4fce-bc6b-97406111f152",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think we could change to make `amy` draw a larger square?\n\nThere are **two** correct answers.",
                "answers": [
                  {
                    "id": "a1509388782672",
                    "text": "Add more numbers to `[1, 2, 3, 4]`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509388807492",
                    "text": "Change the number 100 in `amy.forward(100)`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509388808260",
                    "text": "Change the number 90 in `amy.right(90)`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509388808950",
                    "text": "Copy and paste the line `amy.forward(100)` so it appears twice.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509388809660",
                    "text": "Change the word `side` to `bigside`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 463201,
              "key": "451a24c3-883a-40cf-9566-ca18083f19fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> **Vocabulary word:** The numbers that appear in this code, such as `1`, `90`, and `100`, are all examples of _integers_. An **integer** is a whole number with no fraction or decimal part. Integers can be positive, zero, or negative (like `-5`).",
              "instructor_notes": ""
            },
            {
              "id": 495568,
              "key": "03d693ec-76d7-4d76-8903-f76528ab25c6",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "03d693ec-76d7-4d76-8903-f76528ab25c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Just to make sure the idea is clear, which of these numbers are **integers**?"
                },
                "concepts_label": "Number",
                "answers_label": "Integer or not?",
                "concepts": [
                  {
                    "text": "4.88",
                    "correct_answer": {
                      "id": "a1514766210050",
                      "text": "not an integer"
                    }
                  },
                  {
                    "text": "-1",
                    "correct_answer": {
                      "id": "a1514766279291",
                      "text": "integer"
                    }
                  },
                  {
                    "text": "47",
                    "correct_answer": {
                      "id": "a1514766317331",
                      "text": "integer"
                    }
                  },
                  {
                    "text": "0",
                    "correct_answer": {
                      "id": "a1514766325981",
                      "text": "integer"
                    }
                  },
                  {
                    "text": "25.5",
                    "correct_answer": {
                      "id": "a1514766352066",
                      "text": "not an integer"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1514766279291",
                    "text": "integer"
                  },
                  {
                    "id": "a1514766317331",
                    "text": "integer"
                  },
                  {
                    "id": "a1514766210050",
                    "text": "not an integer"
                  },
                  {
                    "id": "a1514766352066",
                    "text": "not an integer"
                  },
                  {
                    "id": "a1514766325981",
                    "text": "integer"
                  }
                ]
              }
            },
            {
              "id": 440633,
              "key": "ca3d279b-e755-4efd-ae9c-312aa918007c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 🛠 Making changes\n\nSo it looks like we're figuring out some things about how this program works. But there are some more details to fill in. What do all these numbers really mean? What if we wanted to draw some shape other than a square — like a pentagon? Can we use what we know already to figure out how to do that?\n\nTry changing the code so that instead of drawing a square, the turtle draws a pentagon. It's okay if you don't make a perfect pentagon, but give it a try!",
              "instructor_notes": ""
            },
            {
              "id": 463841,
              "key": "0b35ece7-13a6-4ad0-a8c2-837bc67d264e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a0f3691_penta/penta.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0b35ece7-13a6-4ad0-a8c2-837bc67d264e",
              "caption": "_Try making the turtle draw a pentagon, like this one!_",
              "alt": "A green turtle that has drawn a green pentagon.",
              "width": 222,
              "height": 198,
              "instructor_notes": null
            },
            {
              "id": 440636,
              "key": "6e46ea16-4818-41a5-86cf-f4e6f14698cc",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e46ea16-4818-41a5-86cf-f4e6f14698cc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What changes did you have to make to get the turtle to draw a pentagon?  \nMark **all** the things that needed to be changed.",
                "answers": [
                  {
                    "id": "a1509389162500",
                    "text": "Add a fifth item to `[1, 2, 3, 4]`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509389184715",
                    "text": "Change the number 100 in `forward(100)`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509389185505",
                    "text": "Change the number 90 in `right(90)`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509389186225",
                    "text": "Give the turtle a different name.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 558869,
              "key": "e3c08ef8-e8c4-4eb5-b33e-99c54dd542cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Vocabulary word:** `[1, 2, 3, 4, 5]` and `[7, 2, 1, 0, 9]` are examples of **lists**. In Python, a _list_ is written with square brackets around it, and commas separating the items.\n\nSo far, the items we've seen inside lists have always been numbers (_integers_, to be specific). But we can put other things in lists too. For example, we can put _strings_ in lists, like this:\n\n```python\n[\"hello\", \"yellow\", \"stuff\", \"things\"]\n```",
              "instructor_notes": ""
            },
            {
              "id": 558870,
              "key": "62d5e555-f3b0-4baf-a08e-ab575df6e9fe",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "62d5e555-f3b0-4baf-a08e-ab575df6e9fe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Some of these pieces of text could be used in a Python program as **lists**.\n\nMark the ones that fit the rules for writing **lists** in your code.",
                "answers": [
                  {
                    "id": "a1520363614199",
                    "text": "`\"1, 2, 3, 4, 5\"`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520363636420",
                    "text": "`[1, 2, 3, 4, 5]`",
                    "is_correct": true
                  },
                  {
                    "id": "a1520363650715",
                    "text": "`(1, 2, 3, 4, 5)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520363651572",
                    "text": "`[1 2 3 4 5]`",
                    "is_correct": false
                  },
                  {
                    "id": "a1520363652468",
                    "text": "`[\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 457533,
              "key": "28fddc7d-e70b-432f-b5ad-387392cacff3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Before going on to the next page, try experimenting with the code! See if you can get the turtle to draw other shapes. You could try for a hexagon or an eight-pointed star!",
              "instructor_notes": ""
            },
            {
              "id": 495569,
              "key": "63fbd204-8c73-43e5-9557-9ece40f188fa",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a4987f4_hexagon-eight-point-star/hexagon-eight-point-star.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/63fbd204-8c73-43e5-9557-9ece40f188fa",
              "caption": "",
              "alt": "Two turtles have drawn a green hexagon and a yellow eight-pointed star.",
              "width": 274,
              "height": 133,
              "instructor_notes": null
            },
            {
              "id": 730416,
              "key": "ea5b9910-b51c-4b44-a2dd-653be005b651",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "(You may have no idea about what angles to try or how to figure this out—that's OK! You can just experiment with different angles to see what shapes you get. Usually you can figure things out using some trial and error. To be clear, we're **not** testing you on your math skills here!)",
              "instructor_notes": ""
            },
            {
              "id": 464378,
              "key": "b41a0023-6c06-4c01-a610-e09963392ae9",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b41a0023-6c06-4c01-a610-e09963392ae9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Have the turtle draw a pentagon, like the one in the picture.",
                "Have the turtle draw a different shape, such as a hexagon or star."
              ],
              "positive_feedback": "Cool! You're mastering the world of the turtle.",
              "video_feedback": null,
              "description": "Check off these activities once you've completed them —"
            }
          ]
        },
        {
          "id": 442201,
          "key": "1817206a-ae11-4314-93c6-1aef70a84cbd",
          "title": "Finding errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1817206a-ae11-4314-93c6-1aef70a84cbd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674612,
              "key": "a655d9a8-02a4-4024-b265-37c4ecc5fef4",
              "title": "Python: Finding Errors",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "h0fOdBumbbk",
                "china_cdn_id": "h0fOdBumbbk.mp4"
              }
            },
            {
              "id": 442205,
              "key": "a91b8c5e-ff86-4a23-ae4f-155dc4132c80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the workspace below is a program that doesn't quite work. It actually has two different bugs. In this page, you will be fixing these bugs.\n\nTry running the code and see what happens!",
              "instructor_notes": ""
            },
            {
              "id": 442203,
              "key": "8af55976-21dc-4af5-bd3a-747fbe842dbe",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "ff372ee9-aee8-4b6f-ad09-58d678a27472",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/errors.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/errors.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 442207,
              "key": "dff5274f-d253-4b9f-a5ae-ffacf710a10e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dff5274f-d253-4b9f-a5ae-ffacf710a10e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The first time you ran this program, what error message showed up?",
                "answers": [
                  {
                    "id": "a1509573649515",
                    "text": "`SyntaxError`",
                    "is_correct": false
                  },
                  {
                    "id": "a1509573674899",
                    "text": "`NameError`",
                    "is_correct": true
                  },
                  {
                    "id": "a1509573675621",
                    "text": "`ZeroDivisionError`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 674613,
              "key": "d43822e2-0beb-46f0-aeb1-fc28a40862b6",
              "title": "Python: Finding Errors Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mmlAuiQKAFI",
                "china_cdn_id": "mmlAuiQKAFI.mp4"
              }
            },
            {
              "id": 442217,
              "key": "19464626-f8f3-403f-9cdc-b2f3984d240e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "19464626-f8f3-403f-9cdc-b2f3984d240e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Go back to the top of the page and put those lines into the correct order, then run the program again. What happened?",
                "answers": [
                  {
                    "id": "a1509575137661",
                    "text": "The turtle drew a triangle, and then printed a `RudeError` about our taste in colors.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509575162248",
                    "text": "The turtle _started_ drawing a triangle, but then stopped and `ZeroDivisionError` showed up.",
                    "is_correct": true
                  },
                  {
                    "id": "a1509575168715",
                    "text": "The turtle exploded into tiny bits of computer with `BoomError` on them.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 442219,
              "key": "8c9d3a01-3a73-4418-8ab5-26246d414738",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8c9d3a01-3a73-4418-8ab5-26246d414738",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why do you think the new error happened? The error message will tell you where to look.",
                "answers": [
                  {
                    "id": "a1509575498970",
                    "text": "There is a mistake on line 4. The turtle needs to go `forward(120)` instead of `forward(100)`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509575517056",
                    "text": "Turtles speak British English, so the colo**u**r should be `\"grey\"` instead of `\"gray\"`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509575517772",
                    "text": "There is a hidden instruction at the end of line 3 that tells the program to crash.",
                    "is_correct": false
                  },
                  {
                    "id": "a1509575518497",
                    "text": "There is a typo on line 7. There is a character in there that shouldn't be in the code.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 442221,
              "key": "1eee774b-6fb4-4101-b57f-95b734225f19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Once you've fixed that error, the turtle should be able to finish its drawing.\n\n## ❤️ Error messages are your friends\n\nThe purpose of an error message is to tell you what might be wrong, and to point to the part of your code (usually, the line number) where the problem was detected.\n\nThis is one of the ways in which programming languages like Python are different from HTML. When a web browser reads HTML, it mostly _ignores_ errors: if you write `<tilte>` instead of `<title>`, the browser just doesn't put a title on your web page. If Python sees a typo or something that doesn't make sense in your code, it will stop and tell you about it!",
              "instructor_notes": ""
            },
            {
              "id": 464382,
              "key": "9af75f15-f974-4d2a-b852-bf261983d913",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9af75f15-f974-4d2a-b852-bf261983d913",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Fix the first error so that the turtle can start drawing.",
                "**Run** the code to find the second error.",
                "Fix the second error so that the turtle can finish drawing.",
                "**Run** the code to see it work!"
              ],
              "positive_feedback": "_\"Yay, triangle!\"_ — One of the students who tested this lesson.",
              "video_feedback": null,
              "description": "Before you go on, make sure that you've done each of these steps."
            }
          ]
        },
        {
          "id": 620694,
          "key": "0a595c7c-d4db-412a-a0c6-7256d271e402",
          "title": "Modules and methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0a595c7c-d4db-412a-a0c6-7256d271e402",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 620697,
              "key": "8c47f02d-837c-4269-a454-999ccc919943",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 🐢 Where do turtles come from?",
              "instructor_notes": ""
            },
            {
              "id": 674614,
              "key": "f24fa566-2fad-48c9-b7f4-8dd332e2523b",
              "title": "Python: Modules And Methods",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SlmX9X66vDQ",
                "china_cdn_id": "SlmX9X66vDQ.mp4"
              }
            },
            {
              "id": 675214,
              "key": "6f6b433f-9979-46fa-a54f-0a9700359bc8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Notice that in Python, the _case_ or _capitalization_ of the letters matters. For example, in `turtle.Turtle()`, the `T` in `Turtle()` is capitalized.  So `turtle` has a different meaning from `Turtle`. We would say that Python is a **case-sensitive** programming language.\n\nNot all languages are _case-sensitive_. For example, you may have noticed that in HTML, you can often get away with capitalizing or not capitalizing something, and the page will look the same either way.",
              "instructor_notes": ""
            },
            {
              "id": 620704,
              "key": "b38a37d2-9a71-47cc-9a98-0585a075c293",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b38a37d2-9a71-47cc-9a98-0585a075c293",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you wanted to use a module named `math` in your program, which of these lines would you need to put in your code?",
                "answers": [
                  {
                    "id": "a1525311831326",
                    "text": "`use math;`",
                    "is_correct": false
                  },
                  {
                    "id": "a1525311879987",
                    "text": "`import math`",
                    "is_correct": true
                  },
                  {
                    "id": "a1525311884307",
                    "text": "`module.load(\"math\")`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 620706,
              "key": "900c6b7c-b3e9-4105-a0e4-032fb7fb9de4",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "900c6b7c-b3e9-4105-a0e4-032fb7fb9de4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match up each of these items with its description:"
                },
                "concepts_label": "Description",
                "answers_label": "Item",
                "concepts": [
                  {
                    "text": "A file with some useful code, which we can `import` into our program.",
                    "correct_answer": {
                      "id": "a1525312114043",
                      "text": "a module"
                    }
                  },
                  {
                    "text": "A named block of code that can be _called_ to get the turtle to do something.",
                    "correct_answer": {
                      "id": "a1525312170822",
                      "text": "a method"
                    }
                  },
                  {
                    "text": "The name of one of the methods we've been using.",
                    "correct_answer": {
                      "id": "a1525312175511",
                      "text": "`forward`"
                    }
                  },
                  {
                    "text": "An example of a _method call_.",
                    "correct_answer": {
                      "id": "a1525312187839",
                      "text": "`amy.forward(100)`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525312175511",
                    "text": "`forward`"
                  },
                  {
                    "id": "a1525312114043",
                    "text": "a module"
                  },
                  {
                    "id": "a1525312170822",
                    "text": "a method"
                  },
                  {
                    "id": "a1525312187839",
                    "text": "`amy.forward(100)`"
                  }
                ]
              }
            },
            {
              "id": 620707,
              "key": "59b5e21f-8f5f-4dfe-8fe7-01bd0f5a5736",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "59b5e21f-8f5f-4dfe-8fe7-01bd0f5a5736",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these descriptions accurately describes the line of code `amy.forward(100)`?",
                "answers": [
                  {
                    "id": "a1525313100147",
                    "text": "We're calling the `forward` method on a `Turtle` object named `amy`, and giving it the input `100`.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525313250241",
                    "text": "We're assigning the value `100` to the variable `forward`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525313370265",
                    "text": "We're installing program #100 onto the method named `amy`.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 556274,
          "key": "e921cf24-cf8f-4669-bd37-3c58e34d960f",
          "title": "Practice — Draw a square",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e921cf24-cf8f-4669-bd37-3c58e34d960f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 556275,
              "key": "5b3745e9-39eb-4f0a-bef0-6ff8d3ef9711",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Draw a square\n\nUnderstanding a thing doesn't always mean you're able to use it. In order to help you solidify your new skills, we're going to practice with some of the code you've already seen.\n\nIn this first exercise, we're just going to ask you to _recognize_ what each piece of code does. After that, we'll go over the code again, but ask you to _remember_ how to write the code without seeing it in front of you.",
              "instructor_notes": ""
            },
            {
              "id": 556329,
              "key": "4022134c-bcc8-40a3-a01f-4b88b7698d75",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4022134c-bcc8-40a3-a01f-4b88b7698d75",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each piece of code with the sentence that describes it."
                },
                "concepts_label": "Description",
                "answers_label": "Code",
                "concepts": [
                  {
                    "text": "Without this line, you can't do anything related to turtles.",
                    "correct_answer": {
                      "id": "a1520025673153",
                      "text": "`import turtle`"
                    }
                  },
                  {
                    "text": "Creates a new turtle and names it.",
                    "correct_answer": {
                      "id": "a1520025837480",
                      "text": "`amy = turtle.Turtle()`"
                    }
                  },
                  {
                    "text": "Sets the color that the turtle will use.",
                    "correct_answer": {
                      "id": "a1520025939963",
                      "text": "`amy.color(\"yellow\")`"
                    }
                  },
                  {
                    "text": "Makes the turtle turn right.",
                    "correct_answer": {
                      "id": "a1520025976773",
                      "text": "`amy.right(90)`"
                    }
                  },
                  {
                    "text": "Makes the turtle go forward.",
                    "correct_answer": {
                      "id": "a1520032595647",
                      "text": "`amy.forward(100)`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1520025673153",
                    "text": "`import turtle`"
                  },
                  {
                    "id": "a1520025939963",
                    "text": "`amy.color(\"yellow\")`"
                  },
                  {
                    "id": "a1520025976773",
                    "text": "`amy.right(90)`"
                  },
                  {
                    "id": "a1520032595647",
                    "text": "`amy.forward(100)`"
                  },
                  {
                    "id": "a1520025837480",
                    "text": "`amy = turtle.Turtle()`"
                  }
                ]
              }
            },
            {
              "id": 560525,
              "key": "2ab7f132-74eb-4f7e-bc9b-59ba02ad88df",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2ab7f132-74eb-4f7e-bc9b-59ba02ad88df",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "What kind of a thing is each of these pieces of code?"
                },
                "concepts_label": "Code",
                "answers_label": "Kind of thing",
                "concepts": [
                  {
                    "text": "`amy`",
                    "correct_answer": {
                      "id": "a1520782401447",
                      "text": "variable"
                    }
                  },
                  {
                    "text": "`\"yellow\"`",
                    "correct_answer": {
                      "id": "a1520782434013",
                      "text": "string"
                    }
                  },
                  {
                    "text": "`[1, 2, 3, 4]`",
                    "correct_answer": {
                      "id": "a1520782443670",
                      "text": "list"
                    }
                  },
                  {
                    "text": "`100`",
                    "correct_answer": {
                      "id": "a1520782448536",
                      "text": "integer"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1520782443670",
                    "text": "list"
                  },
                  {
                    "id": "a1520782434013",
                    "text": "string"
                  },
                  {
                    "id": "a1520782448536",
                    "text": "integer"
                  },
                  {
                    "id": "a1520782401447",
                    "text": "variable"
                  }
                ]
              }
            },
            {
              "id": 559723,
              "key": "7c078607-2eef-4a42-b903-23090b1bf2b8",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7c078607-2eef-4a42-b903-23090b1bf2b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Now, what kind of a thing is each of these lines of code? (What term would we use to describe the line?)"
                },
                "concepts_label": "Code",
                "answers_label": "It is a(n)...",
                "concepts": [
                  {
                    "text": "`import turtle`",
                    "correct_answer": {
                      "id": "a1520547890367",
                      "text": "import statement"
                    }
                  },
                  {
                    "text": "`amy = turtle.Turtle()`",
                    "correct_answer": {
                      "id": "a1520547978481",
                      "text": "assignment statement"
                    }
                  },
                  {
                    "text": "`amy.color(\"yellow\")`",
                    "correct_answer": {
                      "id": "a1520548029112",
                      "text": "method call"
                    }
                  },
                  {
                    "text": "`amy.right(90)`",
                    "correct_answer": {
                      "id": "a1520548034538",
                      "text": "method call"
                    }
                  },
                  {
                    "text": "`amy.forward(100)`",
                    "correct_answer": {
                      "id": "a1520548038079",
                      "text": "method call"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1520547978481",
                    "text": "assignment statement"
                  },
                  {
                    "id": "a1520548029112",
                    "text": "method call"
                  },
                  {
                    "id": "a1520548034538",
                    "text": "method call"
                  },
                  {
                    "id": "a1520548038079",
                    "text": "method call"
                  },
                  {
                    "id": "a1520547890367",
                    "text": "import statement"
                  }
                ]
              }
            },
            {
              "id": 556332,
              "key": "a4f64ff1-6b9f-4d16-b7de-20be51af73c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now it's time to get practice remembering the code for yourself. These will be the same lines of code you just looked at in the above quiz, but now you'll be trying to remember them from your own brain, instead of simply recognizing them on the screen.\n\nNote that your spelling and capitalization have to be perfect to get the right answer. This is one of the tricky things about coding—even a small typo can make your code stop working.\n\nTry hard to get the right answer without looking at the code above (this will strengthen the memory in your brain!). But if you get stuck, you can scroll up and peek to refresh your memory.\n\nRemember, the point of these exercises is to help you learn—not to test you.",
              "instructor_notes": ""
            },
            {
              "id": 556278,
              "key": "dd902497-55b2-4772-9df1-29b5ea2606e5",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd902497-55b2-4772-9df1-29b5ea2606e5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you want to be able to do stuff with turtles, what's the first line of code that you need to have in your program?",
                "matchers": [
                  {
                    "expression": "import turtle"
                  }
                ]
              }
            },
            {
              "id": 556326,
              "key": "49c13f00-f570-4d91-b7e2-dc60833ee591",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "49c13f00-f570-4d91-b7e2-dc60833ee591",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What line of code would you use to create a new turtle called `amy`?",
                "matchers": [
                  {
                    "expression": "\\s*amy\\s*=\\s*turtle.Turtle\\(\\)\\s*"
                  }
                ]
              }
            },
            {
              "id": 556351,
              "key": "603f1cf3-67e2-43d1-9445-2e099ce71367",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "603f1cf3-67e2-43d1-9445-2e099ce71367",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What line of code would you use to set `amy`'s color to `yellow`?",
                "matchers": [
                  {
                    "expression": "\\s*amy\\.color\\(\\s*\"yellow\"\\s*\\)\\s*"
                  }
                ]
              }
            },
            {
              "id": 556333,
              "key": "c8ad47c8-57d5-48b7-99b3-9f701c9c6e24",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c8ad47c8-57d5-48b7-99b3-9f701c9c6e24",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now, what line of code would you use to make `amy` turn right by `90` degrees?",
                "matchers": [
                  {
                    "expression": "\\s*amy\\.right\\(\\s*90\\s*\\)\\s*"
                  }
                ]
              }
            },
            {
              "id": 556334,
              "key": "7289cde1-d05b-4c3e-8540-03c106667d41",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7289cde1-d05b-4c3e-8540-03c106667d41",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What line of code would you use to get `amy` to go forward by 100 pixels?",
                "matchers": [
                  {
                    "expression": "\\s*amy\\.forward\\(\\s*100\\s*\\)\\s*"
                  }
                ]
              }
            },
            {
              "id": 556336,
              "key": "bd2c9b40-0915-47ed-9175-9b65db07657a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now it's time to put all of those lines of code together. In the workspace below, create a turtle named `amy` and then have `amy` draw a square.\n\n**Note:** You can do this using only the lines of code that you've seen on this page! (You *don't* need to use the whole `for sides in [1, 2, 3, 4]:` thing.) If you get stuck, you can look back at the exercises above, or check out our solution (below the workspace).",
              "instructor_notes": ""
            },
            {
              "id": 556350,
              "key": "02a34d8c-b2cf-4c06-972d-3adc18d4a2af",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "46b8681f-264f-45e3-8d05-f8249ee9d994",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/practice_square.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/practice_square.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 556352,
              "key": "7835a3fb-f2dc-41ea-ac0c-c29b9395e69c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7835a3fb-f2dc-41ea-ac0c-c29b9395e69c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I drew a square!"
              ],
              "positive_feedback": "Yay, a square!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 674814,
              "key": "227eac5f-14ec-4289-ae47-5c8ef7e7e294",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div id=\"spoiler-alert\" style=\"background-color: #a4e4f5;\">\n<span style=\"padding-top: 8px; padding-left: 8px; padding-right: 8px; display: block;\"><h1 style=\"margin: 0;\"> ⚠️ Spoiler alert!</h1></span>\n<span style=\"padding: 8px; display: block;\">**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!</span>\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 556992,
              "key": "10f26994-4895-452f-9937-271f58aa5467",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere is what our code looked like. Yours might be a little different.\n\n```python\nimport turtle\namy = turtle.Turtle()\namy.color(\"yellow\")\namy.forward(100)\namy.right(90)\namy.forward(100)\namy.right(90)\namy.forward(100)\namy.right(90)\namy.forward(100)\n```\n\nNotice how this uses the same two lines of code several times. Even with only a four-sided shape, the code got pretty repetitive. What if you were drawing a 10-sided shape? Or a 100-sided shape? Things would quickly get _very_ repetitive. That seems like a lot of extra work.\n\nFortunately, there's another option: We can use something called a **loop**. We'll learn about this in a few pages!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 675310,
          "key": "8dcdab6c-bd1a-4a92-9e7c-260403e2811e",
          "title": "Comments",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8dcdab6c-bd1a-4a92-9e7c-260403e2811e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675311,
              "key": "acb8a91e-3f7d-47bb-ab85-1bac89248c22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 💬 Comments\n\nHere's the code we just looked at, for drawing a square—but with a little something else added to it:\n\n```python\n\n# Import the turtle module.\nimport turtle\n\n# Create a new turtle named amy.\namy = turtle.Turtle()\n\n# Set amy's color.\namy.color(\"yellow\")\n\n# Have amy draw a square\namy.forward(100)\namy.right(90)\namy.forward(100)\namy.right(90)\namy.forward(100)\namy.right(90)\namy.forward(100)\n```",
              "instructor_notes": ""
            },
            {
              "id": 675312,
              "key": "00b86d1b-cc27-492e-88c4-7d0dd506c725",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Note that this code contains several lines that start with the `#` symbol. These lines are _comments_ — they are just there for human readers. They don't affect how the code runs.\n\n> **Vocabulary word:** In code, a **comment** is a message for human readers. The computer ignores comments when running the code. In Python, a comment line begins with `#`.\n\nComments can help make your program a lot easier to understand. Most of the things we commented on in the code example above are relatively obvious and easy to figure out from reading the code (at least, for an experienced programmer). But in many cases, it's not so obvious what a piece of code does, and in those cases comments are a very useful tool.",
              "instructor_notes": ""
            },
            {
              "id": 675316,
              "key": "503c9408-2fac-49a9-bcee-e9d0560fce78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Commenting-out code\n\nComments can also be a handy tool for experimenting with your code. If you want to temporarily \"turn off\" some code so that it doesn't run—but you don't want to actually delete the code—you can put a `#` at the beginning of the line. This will turn the line into a comment, so that Python ignores that code when running the program.\n\nIn the workspace below, you'll find the familiar code for drawing a square. But we've added several new turtle methods that you haven't seen yet. Each of them has been commented-out—so try removing the comments (one at a time) to see what each line does.\n\n(Note that this is just a way to temporarily experiment with your code—you probably would not want to leave a bunch of commented-out code in a program once you're done writing it.)",
              "instructor_notes": ""
            },
            {
              "id": 675330,
              "key": "f92b96ed-2264-4e56-a3a0-41e88a0a764d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewSJeksOzK7Q",
              "pool_id": "webterminal",
              "view_id": "html-live-HJJs_fK7m",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/comments.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/comments.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 675331,
              "key": "0e4d300c-cc5a-4892-9edc-c050c9b113ea",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0e4d300c-cc5a-4892-9edc-c050c9b113ea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "See if you can match each of these _method calls_ with what it does.\n\n(At least one of these is probably a little surprising!)"
                },
                "concepts_label": "What it does",
                "answers_label": "Method call",
                "concepts": [
                  {
                    "text": "Make a really thick line.",
                    "correct_answer": {
                      "id": "a1531681894930",
                      "text": "`amy.width(10)`"
                    }
                  },
                  {
                    "text": "Set the turtle's speed to the fastest possible.",
                    "correct_answer": {
                      "id": "a1531681951510",
                      "text": "`amy.speed(0)`"
                    }
                  },
                  {
                    "text": "Deactivate the pen so that the turtle stops drawing when moving.",
                    "correct_answer": {
                      "id": "a1531682080116",
                      "text": "`amy.penup()`"
                    }
                  },
                  {
                    "text": "Activate the pen so that the turtle starts drawing when moving.",
                    "correct_answer": {
                      "id": "a1531682112676",
                      "text": "`amy.pendown()`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1531682074110",
                    "text": "`amy.speed(10)`"
                  },
                  {
                    "id": "a1531682112676",
                    "text": "`amy.pendown()`"
                  },
                  {
                    "id": "a1531682080116",
                    "text": "`amy.penup()`"
                  },
                  {
                    "id": "a1531681951510",
                    "text": "`amy.speed(0)`"
                  },
                  {
                    "id": "a1531681894930",
                    "text": "`amy.width(10)`"
                  },
                  {
                    "id": "a1531682355679",
                    "text": "`amy.width(2)`"
                  }
                ]
              }
            },
            {
              "id": 675332,
              "key": "39e61863-0122-42ff-ac6e-fb98b1751449",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Comment shortcut\n\nIn most code editors, you can use a handy keyboard shortcut to toggle commenting on or off for a line of code. On Mac, the shortcut is **⌘/** (**command + forward slash**). On Windows, it's **Ctrl + /** (**control + forward slash**). If you place the cursor in a line of code and use this shortcut, the editor will insert a `#` at the beginning of the line.\n\nThe most useful thing about this shortcut is that you can use it on multiple lines of code at once—simply select the lines you want to comment (or un-comment) and hit the hotkey.",
              "instructor_notes": ""
            },
            {
              "id": 730418,
              "key": "835dd936-004e-475c-b81f-d9d5f61c62e8",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "835dd936-004e-475c-b81f-d9d5f61c62e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Before moving on, give this a try in the workspace above!"
              ],
              "positive_feedback": "**Note:** Like we said, _most_ code editors have this functionality—but not _all_ code editors. If the above shortcut doesn't work in your editor, you may need to use your favorite search engine to look up how to do it with that editor.",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 593068,
          "key": "fb9c9cee-c69d-4ee0-90de-c2d445b175e9",
          "title": "Practice — Order matters",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fb9c9cee-c69d-4ee0-90de-c2d445b175e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 593069,
              "key": "a7d686e1-bc7f-410c-bb8e-04438b06eb0f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Order matters\n\nRemember that by default, Python will run each line of code in order, from top to bottom. That means that the order in which you put the lines of code in your program can make a big difference.",
              "instructor_notes": ""
            },
            {
              "id": 593172,
              "key": "dba89f66-8e8f-43e0-9d0c-881eb0d0aa1c",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dba89f66-8e8f-43e0-9d0c-881eb0d0aa1c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "The pieces of code below can be used to draw a blue line and then a yellow line, like this:\n\n<img src=\"https://s3.amazonaws.com/video.udacity-data.com/topher/2018/July/5b4a5e4a_blue-yellow-line/blue-yellow-line.png\" alt=\"Blue and yellow line.\">\n\nCan you put the code in the correct order?"
                },
                "concepts_label": "Order",
                "answers_label": "Code",
                "concepts": [
                  {
                    "text": "1",
                    "correct_answer": {
                      "id": "a1522966716269",
                      "text": "`import turtle`"
                    }
                  },
                  {
                    "text": "2",
                    "correct_answer": {
                      "id": "a1522966811949",
                      "text": "`amy = turtle.Turtle()`"
                    }
                  },
                  {
                    "text": "3",
                    "correct_answer": {
                      "id": "a1522966816979",
                      "text": "`amy.color(\"blue\")`"
                    }
                  },
                  {
                    "text": "4",
                    "correct_answer": {
                      "id": "a1522966821043",
                      "text": "`amy.forward(100)`"
                    }
                  },
                  {
                    "text": "5",
                    "correct_answer": {
                      "id": "a1522966822797",
                      "text": "`amy.color(\"yellow\")`"
                    }
                  },
                  {
                    "text": "6",
                    "correct_answer": {
                      "id": "a1522966888724",
                      "text": "`amy.forward(100)`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1522966822797",
                    "text": "`amy.color(\"yellow\")`"
                  },
                  {
                    "id": "a1522966816979",
                    "text": "`amy.color(\"blue\")`"
                  },
                  {
                    "id": "a1522966716269",
                    "text": "`import turtle`"
                  },
                  {
                    "id": "a1522966888724",
                    "text": "`amy.forward(100)`"
                  },
                  {
                    "id": "a1522966811949",
                    "text": "`amy = turtle.Turtle()`"
                  },
                  {
                    "id": "a1522966821043",
                    "text": "`amy.forward(100)`"
                  }
                ]
              }
            },
            {
              "id": 675222,
              "key": "b7c882d7-adde-40c6-8b42-3af234bc8ac0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Time for some more practice! In the workspace below, see if you can make a square like this, where each side is a different color:",
              "instructor_notes": ""
            },
            {
              "id": 675225,
              "key": "487759d2-45c5-4af7-8afb-113ca21b43e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b4a60d1_rainbow-box/rainbow-box.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/487759d2-45c5-4af7-8afb-113ca21b43e1",
              "caption": "",
              "alt": "A square that has red, orange, yellow, and green sides.",
              "width": 158,
              "height": 153,
              "instructor_notes": null
            },
            {
              "id": 675221,
              "key": "d536e11f-5217-4984-8cfa-1638b53b66b4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewrkxBOTTP7X",
              "pool_id": "webterminal",
              "view_id": "html-live-ryB_TTDQX",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/order_matters.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/order_matters.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 675227,
              "key": "defdce1d-b205-4c5a-836f-8345fcf3b17d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 675226,
              "key": "4a10dc39-1d9d-48fe-962e-8795996de3bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\namy = turtle.Turtle()\n\namy.color(\"red\")\namy.forward(100)\namy.right(90)\namy.color(\"orange\")\namy.forward(100)\namy.right(90)\namy.color(\"yellow\")\namy.forward(100)\namy.right(90)\namy.color(\"green\")\namy.forward(100)\n```\n\nAgain, notice how this code is very repetitive! We'll see how we can make that better soon.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 560469,
          "key": "932cfef9-7a00-47d2-8dee-b661e29125fd",
          "title": "Using variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "932cfef9-7a00-47d2-8dee-b661e29125fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676151,
              "key": "699ef8fc-bd0e-4d64-885a-8a0bf94442a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ",
              "instructor_notes": ""
            },
            {
              "id": 674615,
              "key": "60588acb-f5c0-4a31-9ce2-45acbc71e476",
              "title": "Python: Using Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "i7nff81Gr8U",
                "china_cdn_id": "i7nff81Gr8U.mp4"
              }
            }
          ]
        },
        {
          "id": 621540,
          "key": "9848ec7e-ab0d-4e29-ab6b-ec0b29f3664a",
          "title": "Practice — Using variables (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9848ec7e-ab0d-4e29-ab6b-ec0b29f3664a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624129,
              "key": "fdd51fa7-6342-4b25-8068-938ae976eecc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Using variables (1/2)",
              "instructor_notes": ""
            },
            {
              "id": 624131,
              "key": "2aa58403-b268-4f97-bce5-391e34bc5821",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Being able to assign a value to a variable ...\n\n```python\nfavorite_color = \"cyan\"\n```\n\n... and then use this variable to do stuff elsewhere in your code ...\n\n```python\nmary.color(favorite_color)\n```\n\n... is an important skill to have as a programmer! So let's get some practice with the syntax.",
              "instructor_notes": ""
            },
            {
              "id": 624148,
              "key": "6e8f1d75-484c-4094-9420-194e5e3b0f4b",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e8f1d75-484c-4094-9420-194e5e3b0f4b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Which of the following are valid assignment statements?"
                },
                "concepts_label": "Assignment statement",
                "answers_label": "Valid or invalid?",
                "concepts": [
                  {
                    "text": "pretty_color = \"red\"",
                    "correct_answer": {
                      "id": "a1525463229571",
                      "text": "valid"
                    }
                  },
                  {
                    "text": "color = \"blue\"",
                    "correct_answer": {
                      "id": "a1525463332077",
                      "text": "valid"
                    }
                  },
                  {
                    "text": "\"blue\" = color",
                    "correct_answer": {
                      "id": "a1525463335457",
                      "text": "invalid"
                    }
                  },
                  {
                    "text": "\"red\" = pretty_color",
                    "correct_answer": {
                      "id": "a1525463471466",
                      "text": "invalid"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525463335457",
                    "text": "invalid"
                  },
                  {
                    "id": "a1525463229571",
                    "text": "valid"
                  },
                  {
                    "id": "a1525463332077",
                    "text": "valid"
                  },
                  {
                    "id": "a1525463471466",
                    "text": "invalid"
                  }
                ]
              }
            },
            {
              "id": 624162,
              "key": "32607440-31b1-491c-afaa-3bc265114869",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32607440-31b1-491c-afaa-3bc265114869",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type an assignment statement that creates a variable named `color` and assigns it the value `\"blue\"`.",
                "matchers": [
                  {
                    "expression": "color *= *\"blue\""
                  }
                ]
              }
            },
            {
              "id": 621666,
              "key": "325eed08-4ac2-4099-9636-8354814a6d4a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "325eed08-4ac2-4099-9636-8354814a6d4a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Assuming we have a turtle named `mary`, here's some code that has the turtle draw a purple pentagon:\n\n```python\nmary.color(\"purple\")\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```\n\nWhich of these will have the same result as the above code?"
                },
                "concepts_label": "Code",
                "answers_label": "Same result or different?",
                "concepts": [
                  {
                    "text": "```python\nlovely_color = \"purple\"\nmary.color(lovely_color)\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```",
                    "correct_answer": {
                      "id": "a1525394245323",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\nlovely_color = \"purple\"\nmary.color(\"lovely_color\")\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```",
                    "correct_answer": {
                      "id": "a1525394792112",
                      "text": "Different"
                    }
                  },
                  {
                    "text": "```python\nblah = \"purple\"\nmary.color(blah)\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```",
                    "correct_answer": {
                      "id": "a1525395017635",
                      "text": "Same"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525394792112",
                    "text": "Different"
                  },
                  {
                    "id": "a1525394245323",
                    "text": "Same"
                  },
                  {
                    "id": "a1525395017635",
                    "text": "Same"
                  }
                ]
              }
            },
            {
              "id": 621678,
              "key": "d7668c28-14a3-4073-932b-4ef2487dabbb",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d7668c28-14a3-4073-932b-4ef2487dabbb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In the above exercise, one of the options used a variable named `blah`. What can we say about the choice of `blah` for naming that variable?",
                "answers": [
                  {
                    "id": "a1525396242894",
                    "text": "It's a bad name because it breaks the code (the program will throw an error).",
                    "is_correct": false
                  },
                  {
                    "id": "a1525396325517",
                    "text": "The code will run fine, but `blah` is a bad name because it makes the program harder for human beings to understand.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525396409037",
                    "text": "It's a great name—there are no problems at all.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 621682,
              "key": "682cc31e-f92a-42f6-a11d-f7bb4e2d0380",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "682cc31e-f92a-42f6-a11d-f7bb4e2d0380",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a new variable (with whatever name you like) and assign the string `\"purple\"` to that variable.",
                "Replace the string in `mary.color(\"purple\")` with your new variable.",
                "Run the code to make sure it still works!"
              ],
              "positive_feedback": "Nice!",
              "video_feedback": null,
              "description": "Here's a workspace with the code for drawing a purple pentagon. Just for practice, go ahead and ..."
            },
            {
              "id": 624053,
              "key": "3767271d-83c0-4f78-814a-86f4dcc51314",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "_(If you get stuck, you can find our solution below.)_",
              "instructor_notes": ""
            },
            {
              "id": 629712,
              "key": "5c7184bb-802b-4a2d-8ef2-e029b4454bf9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "9acbcfe8-e191-48f1-86c2-2269c8e2f35a",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/purple_pentagon.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/purple_pentagon.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674816,
              "key": "aefae6b6-e452-4f2b-a1ad-c0c1501f1211",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 624051,
              "key": "7b71504d-0607-4497-8a47-9f2e5883ba6b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\nmary = turtle.Turtle()\nlovely_color = \"purple\"\nmary.color(lovely_color)\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```\n\nNote that we chose to call our variable `lovely_color`, but you could call it `pretty_color` or just `color` and it would do the same thing.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 624167,
          "key": "15125170-97b5-4a10-a7b7-c5d23d657d9e",
          "title": "Practice — Using variables (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "15125170-97b5-4a10-a7b7-c5d23d657d9e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 624168,
              "key": "ae6d3670-b5cf-475a-a1af-b06093918943",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Using variables (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 624180,
              "key": "6451c4b4-bf41-4566-b1fd-2ebeba9ba500",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6451c4b4-bf41-4566-b1fd-2ebeba9ba500",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "You've seen that you can assign a string to a variable. But you can also assign all sorts of other things to variables too, like _lists_ and _integers_.\n\nYou haven't seen all of these before, but take a guess—which of the following do you think are valid assignment statements?"
                },
                "concepts_label": "Assignment statement",
                "answers_label": "Valid or invalid?",
                "concepts": [
                  {
                    "text": "[1, 2, 3] = some_list",
                    "correct_answer": {
                      "id": "a1525468013116",
                      "text": "invalid"
                    }
                  },
                  {
                    "text": "some_list = [1, 2, 3]",
                    "correct_answer": {
                      "id": "a1525468075845",
                      "text": "valid"
                    }
                  },
                  {
                    "text": "sides = [1, 2, 3, 4, 5]",
                    "correct_answer": {
                      "id": "a1525468085874",
                      "text": "valid"
                    }
                  },
                  {
                    "text": "angle = 45",
                    "correct_answer": {
                      "id": "a1525468094279",
                      "text": "valid"
                    }
                  },
                  {
                    "text": "\"sides\" = \"sides\"",
                    "correct_answer": {
                      "id": "a1525468108812",
                      "text": "invalid"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525468013116",
                    "text": "invalid"
                  },
                  {
                    "id": "a1525468108812",
                    "text": "invalid"
                  },
                  {
                    "id": "a1525468094279",
                    "text": "valid"
                  },
                  {
                    "id": "a1525468085874",
                    "text": "valid"
                  },
                  {
                    "id": "a1525468075845",
                    "text": "valid"
                  }
                ]
              }
            },
            {
              "id": 624171,
              "key": "37048c00-d7e9-43b0-b834-7d0dfd5dad70",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "37048c00-d7e9-43b0-b834-7d0dfd5dad70",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Create a variable named `sides` and assign it the list `[1, 2, 3, 4, 5]`",
                "matchers": [
                  {
                    "expression": "sides *= *\\[ *1, *2, *3, *4, *5 *\\]"
                  }
                ]
              }
            },
            {
              "id": 624172,
              "key": "cbccf62c-306b-4464-8b0d-dab72d0dd2c2",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cbccf62c-306b-4464-8b0d-dab72d0dd2c2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Create a variable named `angle` and assign it the integer `72`.",
                "matchers": [
                  {
                    "expression": "angle *= *72 *"
                  }
                ]
              }
            },
            {
              "id": 624181,
              "key": "5d3dd48b-6ffb-48a3-a2fc-e1e6bb484455",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5d3dd48b-6ffb-48a3-a2fc-e1e6bb484455",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's our purple pentagon code again:\n\n```python\nmary.color(\"purple\")\nfor side in [1, 2, 3, 4, 5]:\n    mary.forward(100)\n    mary.right(72)\n```\n\nWhich of these will have the same result as the above code?"
                },
                "concepts_label": "Code",
                "answers_label": "Same result or different",
                "concepts": [
                  {
                    "text": "```python\ncolor = \"purple\"\nsides = [1, 2, 3, 4, 5]\nangle = 72\ndistance = 100\nmary.color(color)\nfor side in sides:\n    mary.forward(distance)\n    mary.right(angle)\n```",
                    "correct_answer": {
                      "id": "a1525468228467",
                      "text": "same"
                    }
                  },
                  {
                    "text": "```python\ncolor = \"purple\"\nsides = [1, 2, 3, 4, 5]\ndistance = 72\nangle = 100\nmary.color(color)\nfor side in sides:\n    mary.forward(distance)\n    mary.right(angle)\n```",
                    "correct_answer": {
                      "id": "a1525468272387",
                      "text": "different"
                    }
                  },
                  {
                    "text": "```python\nsilly = \"purple\"\nbad = [1, 2, 3, 4, 5]\nconfusing = 72\nbut_still_works = 100\nmary.color(silly)\nfor side in bad:\n    mary.forward(but_still_works)\n    mary.right(confusing)\n```",
                    "correct_answer": {
                      "id": "a1525468284976",
                      "text": "same"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525468228467",
                    "text": "same"
                  },
                  {
                    "id": "a1525468272387",
                    "text": "different"
                  },
                  {
                    "id": "a1538874099109",
                    "text": "different"
                  },
                  {
                    "id": "a1525468284976",
                    "text": "same"
                  }
                ]
              }
            },
            {
              "id": 624182,
              "key": "8a8651b0-6eb7-42e6-b6cb-b41a0247afbf",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8a8651b0-6eb7-42e6-b6cb-b41a0247afbf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Assign `100` to a variable, then use this variable to tell the turtle how far to go forward.",
                "Assign `72` to a variable, then use this variable to tell the turtle how far to turn.",
                "Assign `[1, 2, 3, 4, 5]` to a variable, then use this variable to tell the turtle how many sides to draw."
              ],
              "positive_feedback": "Nice work!",
              "video_feedback": null,
              "description": "OK, now it's your turn! In the workspace below, you'll find your code from the previous page (for drawing a purple pentagon). Instead of using the `100`, `72`, and `[1, 2, 3, 4, 5]` directly, change the code so that these values are assigned to variables—then use those variables to tell the turtle what to draw.\n\nIf you get stuck, you can find our solution below the workspace."
            },
            {
              "id": 629713,
              "key": "a80ed61b-e629-4c52-a8a9-f88340130c2d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "88fc2703-c54a-4c8e-92c5-e269eaef1585",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/purple_pentagon.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/purple_pentagon.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674817,
              "key": "8c95966f-9271-4042-b26d-e4d8b48193b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 624185,
              "key": "c886eec4-b72b-4d06-a757-2ba492d721f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nNote that you may have chosen other names for your variables.\n\n```python\ncolor = \"purple\"\nsides = [1, 2, 3, 4, 5]\nangle = 72\ndistance = 100\nmary.color(color)\nfor side in sides:\n    mary.forward(distance)\n    mary.right(angle)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 624212,
          "key": "0d7d604d-1787-447e-b6ed-01abf8fababf",
          "title": "Looping",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d7d604d-1787-447e-b6ed-01abf8fababf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674616,
              "key": "2aed600c-0486-4726-8af6-32b1bf9985a3",
              "title": "Python: Looping With For Loops",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8XmmUg1qdJE",
                "china_cdn_id": "8XmmUg1qdJE.mp4"
              }
            },
            {
              "id": 624222,
              "key": "ab5a2afe-6e6d-4a5b-9c16-914aa3ab8c22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's another workspace with a loop that draws a pentagon. You can use this workspace to answer the exercises below—which will help you discover some more about how loops work!",
              "instructor_notes": ""
            },
            {
              "id": 624215,
              "key": "1c9240b2-8de5-4b7c-9ea0-f00ba689b1e8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "103dd023-a7a2-46ae-8b2d-8a6b87d5bc04",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/penta.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/penta.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 624231,
              "key": "43ec0580-e128-4ced-8ade-38c53148e467",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "43ec0580-e128-4ced-8ade-38c53148e467",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if you replace `[1, 2, 3, 4, 5]` with `[1, 0, 1, 0, 1]`?\n\nThink about this, then try it in the code!",
                "answers": [
                  {
                    "id": "a1525476990030",
                    "text": "It's an error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525477034027",
                    "text": "The turtle draws exactly the same pentagon as before.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525477044301",
                    "text": "The turtle draws a triangle instead, with one side for each `1` in the list.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525477048635",
                    "text": "The turtle goes back and forth in a single line.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 624233,
              "key": "6e3290dd-4748-4933-b771-2c979d4945a1",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e3290dd-4748-4933-b771-2c979d4945a1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now, what happens if you replace `[1, 0, 1, 0, 1]` with `[\"red\", \"orange\", \"yellow\", \"green\", \"blue\"]`?\n\nThink about this, then try it in the code!",
                "answers": [
                  {
                    "id": "a1525477121326",
                    "text": "It's an error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525477134499",
                    "text": "The turtle draws exactly the same pentagon as before.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525477144427",
                    "text": "The turtle goes back and forth in a single line.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 624218,
              "key": "69beda2e-2f1a-4218-b593-1093e4cc1fce",
              "title": "Indentation matters!",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "69beda2e-2f1a-4218-b593-1093e4cc1fce",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Notice that all the lines in this loop (after the first) are _indented_ (they've been moved to the right four spaces). \n\n```python\nfor side in [1, 2, 3, 4, 5]:\n    amy.forward(100)\n    amy.right(72)\n```\n\nWhat do you think would happen if we removed the indentation from that last line? Like this:\n\n```python\nfor side in [1, 2, 3, 4, 5]:\n    amy.forward(100)\namy.right(72)\n```",
                "answers": [
                  {
                    "id": "a1525475524279",
                    "text": "The turtle draws a long, straight line (and goes off the screen).",
                    "is_correct": true
                  },
                  {
                    "id": "a1525475548844",
                    "text": "The turtle spins in place, without moving anywhere.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525475553957",
                    "text": "Nothing changes—the turtle still draws a pentagon.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 624225,
              "key": "7c899c84-19fa-46ca-a71b-3a324904d47a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7c899c84-19fa-46ca-a71b-3a324904d47a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if you switch the two lines, so that `amy.right(72)` is inside the loop, and `amy.forward(100)` is outside of the loop?\n\n```python\nfor side in [1, 2, 3, 4, 5]:\n    amy.right(72)\namy.forward(100)\n```",
                "answers": [
                  {
                    "id": "a1525476052991",
                    "text": "The turtle draws a long, straight line (and goes off the screen).",
                    "is_correct": false
                  },
                  {
                    "id": "a1525476063146",
                    "text": "The turtle first turns five times, then moves forward once.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525476063642",
                    "text": "Nothing changes—the turtle still draws a pentagon.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 624237,
              "key": "00001631-4faa-4233-9078-3575dcd29185",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "00001631-4faa-4233-9078-3575dcd29185",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now let's look again at the first line of the loop:\n\n```python\nfor side in [1, 2, 3, 4, 5]:\n```\n\nWhat's up with `side`? Do we have to use the word `side` here or could we replace it with a different word? As in:\n\n\n```python\nfor blah in [1, 2, 3, 4, 5]:\n```\n\nTry it! What happens?",
                "answers": [
                  {
                    "id": "a1525478651298",
                    "text": "It's an error.",
                    "is_correct": false
                  },
                  {
                    "id": "a1525478792745",
                    "text": "The turtle draws exactly the same pentagon as before.",
                    "is_correct": true
                  },
                  {
                    "id": "a1525478799072",
                    "text": "The turtle goes back and forth in a single line.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 624239,
              "key": "acb5cef6-2de5-48cf-b779-bfe6efca2052",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So changing the items in the list didn't seem to make a difference. And changing `side` to another word didn't seem to make a difference either! For the example here, that's true—these things don't change how **this** particular loop runs or the shape that the turtle draws. But in a little while, we'll look at a loop where these things *do* matter. For now, just keep these thoughts in mind.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 571433,
          "key": "e0353158-8f22-488f-a00e-23d470d40118",
          "title": "Practice — Basic loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0353158-8f22-488f-a00e-23d470d40118",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571438,
              "key": "7718da29-38f7-4bb7-a10c-80613c410b57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Basic `for` loops",
              "instructor_notes": ""
            },
            {
              "id": 571435,
              "key": "963754c9-5027-459a-8434-9a347db94efb",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "963754c9-5027-459a-8434-9a347db94efb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's one of the `for` loops we saw earlier:\n\n```\nfor side in [1, 2, 3, 4]:\n    george.forward(100)\n    george.right(90)\n```\nWhich of the following statements are true about this loop?",
                "answers": [
                  {
                    "id": "a1521858723131",
                    "text": "The number of items in the list determines how many times the loop will run.",
                    "is_correct": true
                  },
                  {
                    "id": "a1521858803690",
                    "text": "_Indentation_ is how we indicate that a line of code is _inside_ the loop.",
                    "is_correct": true
                  },
                  {
                    "id": "a1521858880010",
                    "text": "The items in the list have to be numbers, or the loop will not work.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 571436,
              "key": "a66765a6-f051-4e2a-90ea-794f7832a2ee",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a66765a6-f051-4e2a-90ea-794f7832a2ee",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Some of these loops are working and some are broken. Can you tell which are which?"
                },
                "concepts_label": "Loop",
                "answers_label": "Working or broken?",
                "concepts": [
                  {
                    "text": "```\nfor side in [1, 2, 3, 4]:\n    george.forward(100)\n    george.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521859092782",
                      "text": "Working"
                    }
                  },
                  {
                    "text": "```\nfor side in [1, 2, 3, 4]\n    george.forward(100)\n    george.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521859218119",
                      "text": "Broken"
                    }
                  },
                  {
                    "text": "```\nfor side in [0, 7, \"fish\", \"llama\"]:\n    george.forward(100)\n    george.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521859566468",
                      "text": "Working"
                    }
                  },
                  {
                    "text": "```\nfor side in (1, 2, 3, 4):\n    george.forward(100)\n    george.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521859616836",
                      "text": "Broken"
                    }
                  },
                  {
                    "text": "```\nfor side in [1, 2, 3, 4]:\n  george.forward(100)\n    george.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521859649661",
                      "text": "Broken"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1521859092782",
                    "text": "Working"
                  },
                  {
                    "id": "a1521859649661",
                    "text": "Broken"
                  },
                  {
                    "id": "a1521859218119",
                    "text": "Broken"
                  },
                  {
                    "id": "a1521859566468",
                    "text": "Working"
                  },
                  {
                    "id": "a1521859616836",
                    "text": "Broken"
                  }
                ]
              }
            },
            {
              "id": 571434,
              "key": "680b3836-d8ec-4e87-a5ce-d71043915911",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "680b3836-d8ec-4e87-a5ce-d71043915911",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "```python\nfor side in [100]:\n    george.forward(100)\n    george.right(90)\n```\n\nHow many times will this loop run?",
                "answers": [
                  {
                    "id": "a1521858288572",
                    "text": "1 time",
                    "is_correct": true
                  },
                  {
                    "id": "a1521858607038",
                    "text": "2 times",
                    "is_correct": false
                  },
                  {
                    "id": "a1521858608350",
                    "text": "100 times",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 629719,
              "key": "4107beca-c2fe-4f4d-ad0f-108f1baab843",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4107beca-c2fe-4f4d-ad0f-108f1baab843",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Run the code the way it is.",
                "Change the code so that it uses a `for` loop to draw the triangle.",
                "Run the code again to make sure that it still draws the triangle."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Below is a workspace with some code that draws a triangle. As you can see, the last part is pretty repetitive. First, run the code the way it is. Then see if you can draw the same triangle using a `for` loop."
            },
            {
              "id": 629714,
              "key": "ce720bc2-d029-476c-bc9c-8d5221a2f5f5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "766075f3-ef96-4aa1-8f71-8cd6b6d7d751",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/triangle.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/triangle.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674818,
              "key": "f6d1233e-0bb7-470b-9ac1-5e3159873a75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 629716,
              "key": "973da657-a8b7-4aa3-8309-a4fb8d9378b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\njuno = turtle.Turtle()\njuno.color(\"white\")\n\nfor side in [1, 2, 3]:\n    juno.forward(100)\n    juno.left(120)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 675248,
          "key": "b3fb73ba-1447-4c4d-b975-d7cc0504bebc",
          "title": "Practice — Assigning lists to variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b3fb73ba-1447-4c4d-b975-d7cc0504bebc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675250,
              "key": "c9136d29-f911-4da1-a051-5d9fd858111c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Assigning lists to variables\n\nIn the last part of this lesson, we're going to get into some more complex `for` loops. These can be a little tricky, so let's make sure some of the key ideas are solid before we go further.\n\nFirst, you've seen that we can take a list and assign it to a variable, like this:\n\n`some_list = [1, 2, 3, 4]`\n\nAnd then if we want to use that list somewhere, we can simply put the name `some_list` wherever we need it, and our code will behave as if we had put the list in that spot.\n\nFor example, in the workspace below, you'll see that we have a shape with a lot of sides. To draw the shape, we're using a list with a lot of items in it. Currently, the code uses the list directly in the loop. Instead of doing that, let's change it so that the list is first assigned to a variable.",
              "instructor_notes": ""
            },
            {
              "id": 675251,
              "key": "60bdd376-46a5-47ba-8446-26a62d8e1d82",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "60bdd376-46a5-47ba-8446-26a62d8e1d82",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code to see what it does.",
                "Add an assignment statement that assigns the list to a variable called `some_list`.",
                "In the spot where the list used to be, put the variable name `some_list` there instead.",
                "**Run** the code again to make sure it still works."
              ],
              "positive_feedback": "Great!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 675249,
              "key": "b168e4eb-e3d1-4211-94af-302427e1c712",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewS1lIqk8O7X",
              "pool_id": "webterminal",
              "view_id": "html-live-r1Uc1IOXm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/lists_and_variables.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace//workspace-turtle-support/student_files/lesson_one/lists_and_variables.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 675253,
              "key": "7b7e20dc-fa87-4298-9b0c-f52ed73f7648",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 675252,
              "key": "c3ad5c2f-3d56-42d0-8d82-bbc37983c33d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\namy = turtle.Turtle()\namy.color(\"cyan\")\n\nsome_list = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nfor item in some_list:\n    amy.forward(50)\n    amy.right(30)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 457619,
          "key": "402392ea-aa5e-4549-9243-95350d5b9ce8",
          "title": "Lists and loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "402392ea-aa5e-4549-9243-95350d5b9ce8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 458782,
              "key": "0dc3ba15-2057-4de0-ae9b-acc4deb9454a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 🔣 Lists and Loops\n\nIn Python, a **list** of items is written with square brackets around it, and commas separating the items. You've seen these since the very first example in this lesson, back when our turtle was named `george` and drawing a square:\n\n```python\nfor side in [1, 2, 3, 4]:\n    george.forward(100)\n    george.right(90)\n```\nThe list in this code is `[1, 2, 3, 4]`. Lists and `for` loops work closely together. But in the above example (and all of the examples we've seen so far), we're not actually _using_ the numbers in the list — we're just using the fact that there are _four_ of them.\n\nHowever, we _can_ use the numbers in the list, in the code that's inside the `for` loop. Here's an example —",
              "instructor_notes": ""
            },
            {
              "id": 464617,
              "key": "e4151f91-8323-4cd6-8ef6-3ac01612d0ad",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e4151f91-8323-4cd6-8ef6-3ac01612d0ad",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Read the new code in the workspace below.",
                "**Run** that code.",
                "Try changing the numbers in the list and **Run** the code again to see what happens."
              ],
              "positive_feedback": "As you can see, the turtle here is somehow using the lengths from the list to decide how far forward to go each time the loop runs.",
              "video_feedback": null,
              "description": "Check off these activities once you complete them —"
            },
            {
              "id": 458808,
              "key": "5e403eb1-8362-4c71-8237-c59594d15869",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "a3b5f862-b4b8-46a2-b6eb-52a119b88a65",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/squiral.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/squiral.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674617,
              "key": "5c01da88-8491-4c5e-8ee8-89bf158ecf36",
              "title": "Python: Looping Over Lists",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Lqpn7C-RBzY",
                "china_cdn_id": "Lqpn7C-RBzY.mp4"
              }
            },
            {
              "id": 461238,
              "key": "e87665e3-4f96-4a54-a467-cbfdcafaf1fc",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e87665e3-4f96-4a54-a467-cbfdcafaf1fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's a line from the code above.\n```python\nfor length in lengths:\n```\nWhat kind of a thing is `lengths`?",
                "answers": [
                  {
                    "id": "a1510357576565",
                    "text": "A turtle object.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510357605272",
                    "text": "A variable containing a list of numbers.",
                    "is_correct": true
                  },
                  {
                    "id": "a1510357606171",
                    "text": "A method belonging to a turtle object.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510357693840",
                    "text": "An array variable containing pointers to strings.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 675255,
              "key": "44b31c5d-8814-4fd6-8e70-c0de316f4aba",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "44b31c5d-8814-4fd6-8e70-c0de316f4aba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's that same line again:\n\n```python\nfor length in lengths:\n```\n\nWhat can we say about `length` (without the `s`)?\n\n**Two** of these statements are true. Mark the **two** true statements:",
                "answers": [
                  {
                    "id": "a1531633781303",
                    "text": "It's also a variable that contains a list of numbers, just like `lengths`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531633841031",
                    "text": "It's also a variable, but unlike `lengths` it _doesn't_ contain a whole list.",
                    "is_correct": true
                  },
                  {
                    "id": "a1531633864783",
                    "text": "Each time the loop runs, the `length` variable gets assigned a single item from the`lengths` list.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 571439,
          "key": "8884472f-5b3b-4e20-9ff2-873f43ad08de",
          "title": "Practice — Loop variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8884472f-5b3b-4e20-9ff2-873f43ad08de",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 571440,
              "key": "99a1225b-4a5f-48c3-8208-98ac899ad3fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Loop variables",
              "instructor_notes": ""
            },
            {
              "id": 571441,
              "key": "e9c7a854-d410-4cd8-9361-6c7e0f73c104",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e9c7a854-d410-4cd8-9361-6c7e0f73c104",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In this loop, what kind of a thing is `length`?\n\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(length)\n    dizzy.right(90)\n```",
                "answers": [
                  {
                    "id": "a1521860553914",
                    "text": "A string.",
                    "is_correct": false
                  },
                  {
                    "id": "a1521860577904",
                    "text": "A method.",
                    "is_correct": false
                  },
                  {
                    "id": "a1521860578809",
                    "text": "A variable",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 571442,
              "key": "a98b34b2-f929-4ae8-b0ce-75554178e260",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a98b34b2-f929-4ae8-b0ce-75554178e260",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's that same loop again:\n\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(length)\n    dizzy.right(90)\n```\n\nWhich of the following are true statements about this loop?",
                "answers": [
                  {
                    "id": "a1521860896110",
                    "text": "The loop will run six times.",
                    "is_correct": true
                  },
                  {
                    "id": "a1521860916781",
                    "text": "The third time the loop runs, the value `30` will get assigned to the `length` variable.",
                    "is_correct": true
                  },
                  {
                    "id": "a1521860938821",
                    "text": "The fourth time the loop runs, `dizzy` will move forward by 40 pixels.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 571443,
              "key": "20a20d32-816c-4c88-a610-c4638c54acad",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "20a20d32-816c-4c88-a610-c4638c54acad",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And again, the same loop:\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(length)\n    dizzy.right(90)\n```\nWhich of the loops below will draw the same shape as this loop?"
                },
                "concepts_label": "Loop",
                "answers_label": "Same or different?",
                "concepts": [
                  {
                    "text": "```python\nfor length in [1, 2, 3, 4, 5, 6]:\n    dizzy.forward(length)\n    dizzy.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521861240646",
                      "text": "Different"
                    }
                  },
                  {
                    "text": "```python\nfor side in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(side)\n    dizzy.right(90)\n```",
                    "correct_answer": {
                      "id": "a1521861328686",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\nfor angle in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(100)\n    dizzy.right(angle)\n```",
                    "correct_answer": {
                      "id": "a1521861380219",
                      "text": "Different"
                    }
                  },
                  {
                    "text": "```python\nfor angle in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(angle)\n    dizzy.right(90)\n```",
                    "correct_answer": {
                      "id": "a1525546519887",
                      "text": "Same"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1525546519887",
                    "text": "Same"
                  },
                  {
                    "id": "a1521861380219",
                    "text": "Different"
                  },
                  {
                    "id": "a1521861240646",
                    "text": "Different"
                  },
                  {
                    "id": "a1521861328686",
                    "text": "Same"
                  }
                ]
              }
            },
            {
              "id": 675256,
              "key": "d366ff2d-bb03-4019-9bc2-8a46d43a3a18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The first line of the loop\nThe key idea behind all of this is that a `for` loop has a special variable built into the **first line** of the loop. In these examples, the variable is called `length`.\n\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n```\n\nAnd each time the first line of the loop runs, one of the items from the list gets assigned to that variable.\n\nAfter the value has been assigned in that first line, the code inside the loop gets run.\n\nAn important concept to understand is that this assignment happens in the *first line* of the `for` loop—but _after_ that first line, we can assign a different value to the variable if we want to (using a regular assignment statement).\n\nFor example, check out this next question:",
              "instructor_notes": ""
            },
            {
              "id": 675257,
              "key": "7ef3643a-1c74-4069-98cc-cd882fb93903",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7ef3643a-1c74-4069-98cc-cd882fb93903",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's the same loop we've been looking at, but with a slight modification.\n\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n    length = 100\n    dizzy.forward(length)\n    dizzy.right(90)\n```\n\nWhat can we say about this code? (This one might be a little tricky!)\n\n**Two** of these statements are true:",
                "answers": [
                  {
                    "id": "a1531635232304",
                    "text": "The line `length = 100` has no effect; it might as well not be there.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531635302518",
                    "text": "`dizzy` will move forward by `100` pixels _every time_ the loop runs.",
                    "is_correct": true
                  },
                  {
                    "id": "a1531635333366",
                    "text": "`dizzy` will move forward by `100` pixels, but only the first time the loop runs.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531635352527",
                    "text": "The first time the loop runs, `length` gets assigned a value of `10`—but then immediately gets re-assigned a value of `100`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 675261,
              "key": "6faba4be-0cb9-4ebd-a1b1-8c8520a190a2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6faba4be-0cb9-4ebd-a1b1-8c8520a190a2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "OK, here's a weird one:\n\n```python\nfor length in [10, 20, 30, 40, 50, 60]:\n    dizzy.forward(length)\n    length = 100\n    dizzy.forward(length)\n```\nThe first time the loop runs, how far would `dizzy` move?",
                "answers": [
                  {
                    "id": "a1531636914325",
                    "text": "`10` pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1531637038973",
                    "text": "`20` pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1531637064758",
                    "text": "`100` pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1531637087669",
                    "text": "`110` pixels",
                    "is_correct": true
                  },
                  {
                    "id": "a1531637094478",
                    "text": "`200` pixels",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 463280,
          "key": "a02a3760-f86a-46c9-9d64-814f3ec9ae19",
          "title": "Mystery shape",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a02a3760-f86a-46c9-9d64-814f3ec9ae19",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 463381,
              "key": "0223c7d9-bb07-4225-aa4a-0f74b617239b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `∠` Lists of angles\n\nWith the previous example, you saw a list of numbers, and a program that treated each number as a *distance*. Here's a different list of numbers. Each of these numbers is meant to be treated as an *angle*:\n\n```python\nangles = [-90, 0, 0, -90,\n          135, 0, 0, 0, \n          90, 0, 0, 0,\n          135, -90, 0, 0,\n          90, 0, 0, 0]\n```\n\nCopy this list of angles into the code below. Then fill out the `for` loop that uses it.\n\nThis loop needs to work like the one you just saw ... but instead of keeping the _angle_ the same and changing the _distance_, we're going to keep the _distance_ the same and change the _angle._ So, inside the loop, have the turtle turn `right` by the number from the list (the `angle` variable), then go `forward` by `25` pixels.\n\nWhat shape does it draw?\n\n_(If you get stuck, there's a solution below.)_",
              "instructor_notes": ""
            },
            {
              "id": 464398,
              "key": "3944b251-9873-49b7-a383-f348886e69f0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3944b251-9873-49b7-a383-f348886e69f0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Copy the `angles` assignment statement into the code.",
                "Write a **for** loop that uses the list called `angles` to guide the turtle.",
                "See what shape it makes!"
              ],
              "positive_feedback": "Sounds like you know how to loop over a list!",
              "video_feedback": null,
              "description": "Check off these activities once you complete them —"
            },
            {
              "id": 463379,
              "key": "0fd55327-c787-469a-8e96-8ce62ccd4f1e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "205d5cd2-8be3-4b8c-8482-89837e109507",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/mystery.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/mystery.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 463387,
              "key": "21bbfea1-d227-4614-86ae-eb9803239bcb",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "21bbfea1-d227-4614-86ae-eb9803239bcb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What shape did it make?",
                "answers": [
                  {
                    "id": "a1510865485796",
                    "text": "A balloon — or maybe a computer mouse.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510865492638",
                    "text": "A house — or maybe an arrow.",
                    "is_correct": true
                  },
                  {
                    "id": "a1510865493466",
                    "text": "The outline of a map of California.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510867369342",
                    "text": "It didn't make a shape; it made a `SyntaxError`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 675270,
              "key": "84ac50df-1811-4725-8d97-cc9cec0ae3e3",
              "title": "Python: Mystery Shape Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9yEiInrUQAU",
                "china_cdn_id": "9yEiInrUQAU.mp4"
              }
            }
          ]
        },
        {
          "id": 464412,
          "key": "15f90dba-a5e1-480a-b18b-9d38b3772d5b",
          "title": "Loops within loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "15f90dba-a5e1-480a-b18b-9d38b3772d5b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674619,
              "key": "1a7d2ff1-fe2b-4a6d-a25b-8b52f02c6ab4",
              "title": "Python: Nested Loops",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TmnSQqfTvws",
                "china_cdn_id": "TmnSQqfTvws.mp4"
              }
            },
            {
              "id": 464634,
              "key": "926c8ab4-403d-4344-804f-57e3263add11",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "926c8ab4-403d-4344-804f-57e3263add11",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code in the workspace below.",
                "Try changing it so that the turtle draws another pattern."
              ],
              "positive_feedback": "**Great!** Nested loops are a really important tool for programming.",
              "video_feedback": null,
              "description": "Check off these activities once you complete them —"
            },
            {
              "id": 464633,
              "key": "d63549d1-64fc-46cd-a373-891627373d10",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a160033_screen-shot-2017-11-22-at-2.54.14-pm/screen-shot-2017-11-22-at-2.54.14-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d63549d1-64fc-46cd-a373-891627373d10",
              "caption": "_Try modifying the program to make a different pattern. Here's one example you could make!_",
              "alt": "A pattern of six interlocking hexagons.",
              "width": 165,
              "height": 165,
              "instructor_notes": null
            },
            {
              "id": 464414,
              "key": "283df722-ed41-4e91-a669-57867fb28bab",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "2f3e4d77-b91f-4a66-9198-d9af8afb5a09",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/chain.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/chain.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 464621,
              "key": "4b1f1f27-4699-4e63-8daa-1fe56f391e43",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4b1f1f27-4699-4e63-8daa-1fe56f391e43",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's a piece of code using a nested loop. How far will the turtle go forward, in total?\n\n```python\nimport turtle\nanna = turtle.Turtle()\nfor path in [1, 2, 3, 4]:\n    for step in [1, 2, 3]:\n        anna.forward(10)\n```",
                "answers": [
                  {
                    "id": "a1511389355978",
                    "text": "12 pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1511389552937",
                    "text": "40 pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1511389581356",
                    "text": "120 pixels",
                    "is_correct": true
                  },
                  {
                    "id": "a1511389780188",
                    "text": "There's not enough information to tell.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 593985,
          "key": "b2953232-33f9-45b8-b4bd-951818ad5b5b",
          "title": "Practice — Turtle methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2953232-33f9-45b8-b4bd-951818ad5b5b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 593986,
              "key": "8205fcbe-c91f-45dc-b5ed-1c7b056de6d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — Turtle methods\n\nYou've learned a bunch of different _methods_ for making the turtle do different things. Let's review them to make sure they're fresh in your mind.",
              "instructor_notes": ""
            },
            {
              "id": 593987,
              "key": "dd00994a-0dc2-424a-a6b2-2ffd9fb3fff3",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd00994a-0dc2-424a-a6b2-2ffd9fb3fff3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the _method call_ with what it does."
                },
                "concepts_label": "What it does",
                "answers_label": "Method call",
                "concepts": [
                  {
                    "text": "Turn left by 100 degrees.",
                    "correct_answer": {
                      "id": "a1523216924031",
                      "text": "`amy.left(100)`"
                    }
                  },
                  {
                    "text": "Back up 100 pixels.",
                    "correct_answer": {
                      "id": "a1523216933277",
                      "text": "`amy.back(100)`"
                    }
                  },
                  {
                    "text": "Change the color.",
                    "correct_answer": {
                      "id": "a1523216946152",
                      "text": "`amy.color(\"blue\")`"
                    }
                  },
                  {
                    "text": "Go forward 100 pixels.",
                    "correct_answer": {
                      "id": "a1523218811336",
                      "text": "`amy.forward(100)`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1523216933277",
                    "text": "`amy.back(100)`"
                  },
                  {
                    "id": "a1523218811336",
                    "text": "`amy.forward(100)`"
                  },
                  {
                    "id": "a1523216924031",
                    "text": "`amy.left(100)`"
                  },
                  {
                    "id": "a1523216946152",
                    "text": "`amy.color(\"blue\")`"
                  }
                ]
              }
            },
            {
              "id": 593998,
              "key": "7063bcf2-e0a6-45f9-af13-e3d35f3a8331",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7063bcf2-e0a6-45f9-af13-e3d35f3a8331",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "And here are some of the newer ones that you've learned.\n\nAgain, match the _method call_ with what it does."
                },
                "concepts_label": "What it does",
                "answers_label": "Method call",
                "concepts": [
                  {
                    "text": "Change how thick the line is.",
                    "correct_answer": {
                      "id": "a1523218864554",
                      "text": "`amy.width(5)`"
                    }
                  },
                  {
                    "text": "Draw as fast as possible.",
                    "correct_answer": {
                      "id": "a1523218868478",
                      "text": "`amy.speed(0)`"
                    }
                  },
                  {
                    "text": "Stop drawing.",
                    "correct_answer": {
                      "id": "a1523218997307",
                      "text": "`amy.penup()`"
                    }
                  },
                  {
                    "text": "Start drawing.",
                    "correct_answer": {
                      "id": "a1523219008179",
                      "text": "`amy.pendown()`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1523218868478",
                    "text": "`amy.speed(0)`"
                  },
                  {
                    "id": "a1523219008179",
                    "text": "`amy.pendown()`"
                  },
                  {
                    "id": "a1523218997307",
                    "text": "`amy.penup()`"
                  },
                  {
                    "id": "a1523218864554",
                    "text": "`amy.width(5)`"
                  }
                ]
              }
            },
            {
              "id": 593989,
              "key": "0406fd9d-ca9c-4ad4-90f9-20bcfb575867",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now it's time to get practice typing the methods yourself. This will help you remember the correct syntax when you need the method later on.",
              "instructor_notes": ""
            },
            {
              "id": 593988,
              "key": "71258642-37c7-4c26-a145-389a7bee7776",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "71258642-37c7-4c26-a145-389a7bee7776",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ to make `amy` go forward 100 pixels.",
                "matchers": [
                  {
                    "expression": "amy.forward\\(100\\)"
                  }
                ]
              }
            },
            {
              "id": 593991,
              "key": "b9a771e0-0589-42de-9870-70f6bcd79afc",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b9a771e0-0589-42de-9870-70f6bcd79afc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ to make `amy` back up by 100 pixels.",
                "matchers": [
                  {
                    "expression": "amy.back\\(100\\)"
                  }
                ]
              }
            },
            {
              "id": 593992,
              "key": "80b6a7bb-b2d4-41f3-b527-f51bc5552155",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "80b6a7bb-b2d4-41f3-b527-f51bc5552155",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ to make `amy` turn _left_ by 100 degrees.",
                "matchers": [
                  {
                    "expression": "amy.left\\(100\\)"
                  }
                ]
              }
            },
            {
              "id": 593993,
              "key": "ea062983-be58-463b-9882-f50a45fd9350",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea062983-be58-463b-9882-f50a45fd9350",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ that will set `amy`'s drawing color to blue.",
                "matchers": [
                  {
                    "expression": "amy.color\\(\"blue\"\\)"
                  }
                ]
              }
            },
            {
              "id": 593994,
              "key": "ada80239-3bd9-4975-8ba7-f7b83d58e77e",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ada80239-3bd9-4975-8ba7-f7b83d58e77e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Sometimes we want to make the turtle move around the screen without drawing anything. Type the _method call_ that turns off `amy`'s pen.",
                "matchers": [
                  {
                    "expression": "amy.penup\\(\\)"
                  }
                ]
              }
            },
            {
              "id": 593995,
              "key": "9485d4d1-cd25-4133-97a0-655ba0a10a74",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9485d4d1-cd25-4133-97a0-655ba0a10a74",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ that turns `amy`'s pen back on, so that she draws when moving.",
                "matchers": [
                  {
                    "expression": "amy.pendown\\(\\)"
                  }
                ]
              }
            },
            {
              "id": 594000,
              "key": "7b1fdbb7-ed69-4688-a7d6-4a782abbae0f",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7b1fdbb7-ed69-4688-a7d6-4a782abbae0f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ that would make `amy` draw as fast as possible.",
                "matchers": [
                  {
                    "expression": "amy.speed\\(0\\)"
                  }
                ]
              }
            },
            {
              "id": 593999,
              "key": "9b9ecfb6-cdb7-4ce2-9a6a-67903c65feac",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9b9ecfb6-cdb7-4ce2-9a6a-67903c65feac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Type the _method call_ to change the thickness of `amy`s line to 5 pixels.",
                "matchers": [
                  {
                    "expression": "amy.width\\(5\\)"
                  }
                ]
              }
            },
            {
              "id": 594002,
              "key": "cfeaffb0-fe12-45c1-9f7c-373df5862ea8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now let's use these methods to draw something simple—three colored lines, with spaces in between them. Like this:",
              "instructor_notes": ""
            },
            {
              "id": 594003,
              "key": "8ea2654a-de2f-4a20-9252-2c6e213930b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5aca7cac_red-orange-yellow-lines/red-orange-yellow-lines.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8ea2654a-de2f-4a20-9252-2c6e213930b4",
              "caption": "",
              "alt": "A turtle has drawn three short line segments, red, orange, and yellow; with gaps between them.",
              "width": 260,
              "height": 45,
              "instructor_notes": null
            },
            {
              "id": 594004,
              "key": "1429de6e-d5bb-4144-8b4f-3e693587cb5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the workspace below, see if you can draw this yourself. We've added comments to remind you of the steps you'll need to take\n\n_(If you get stuck, you can find our solution below the workspace.)_",
              "instructor_notes": ""
            },
            {
              "id": 674855,
              "key": "f5823688-b773-4526-9b82-3e9ba499b13e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewBygzkqKIQm",
              "pool_id": "webterminal",
              "view_id": "html-live-HkzkcF8QQ",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/turtle_methods.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/turtle_methods.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674820,
              "key": "602dfad1-9805-4d5d-881d-92564749ea42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 674821,
              "key": "e224bd5a-2f68-4bc7-a0e3-253dab9ff4fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution\n\n```python\nimport turtle\namy = turtle.Turtle()\n\n# Make the width thicker so that the line will be easier to see\namy.width(5)\n\n# Move back without drawing anything\namy.penup()\namy.back(140)\namy.pendown()\n\n# Draw a red line\namy.color(\"red\")\namy.forward(50)\n\n# Move forward without drawing anything\namy.penup()\namy.forward(50)\namy.pendown()\n\n# Draw an orange line\namy.color(\"orange\")\namy.forward(50)\n\n# Move forward without drawing anything\namy.penup()\namy.forward(50)\namy.pendown()\n\n# Draw a yellow line\namy.color(\"yellow\")\namy.forward(50)\n```",
              "instructor_notes": ""
            },
            {
              "id": 727946,
              "key": "b55c6ec2-a897-47cf-8ce5-ad47dd6fbc3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Reference sheet\n\nWe hope that the practice here will help you remember how to use the different methods that we've learned. We've also put together a PDF that lists all the methods we've covered so far, which you can get [here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/September/5ba98083_ipnd-reference-sheet-turtle-methods/ipnd-reference-sheet-turtle-methods.pdf). Feel free to download it or print it out for future reference.\n\nYou can also download it at any time by going to the **Resources** tab, over on the left (at the top of the left-hand menu).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 593983,
          "key": "bfb18a39-cb93-44d7-9739-a55f912c7036",
          "title": "Practice — More loop variables (1/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bfb18a39-cb93-44d7-9739-a55f912c7036",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 593984,
              "key": "80d37284-73bf-487b-99e2-7ed2cb855de2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice - More loop variables (1/2)\n\nYou just wrote some code for drawing three colored lines, like this:",
              "instructor_notes": ""
            },
            {
              "id": 594006,
              "key": "44b9c54e-4ad3-410a-9487-16cedd61c384",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5aca7cac_red-orange-yellow-lines/red-orange-yellow-lines.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/44b9c54e-4ad3-410a-9487-16cedd61c384",
              "caption": "",
              "alt": "A turtle has drawn three short line segments, red, orange, and yellow; with gaps between them.",
              "width": 260,
              "height": 45,
              "instructor_notes": null
            },
            {
              "id": 594007,
              "key": "9343d4c7-846a-4ace-97d7-ab969357c899",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You may have noticed that the code repeats itself quite a bit. Let's see if we can make the code less repetitive by using a `for` loop to draw the three lines.\n\nMaking each line a different color might be a little tricky, so let's simplify it (for now) and make all the lines red.\n\nThe code in the workspace below will draw three red lines, with spaces in between. As you can see, some of the code repeats itself. Change the code so that those lines are inside a `for` loop.",
              "instructor_notes": ""
            },
            {
              "id": 674566,
              "key": "e80d0088-f979-4a7d-bc2c-b0046db42df3",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewBJeS5dIB7m",
              "pool_id": "webterminal",
              "view_id": "html-live-ryrq_Ir7Q",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/more_loops.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/more_loops.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 674824,
              "key": "c0c00970-ee7f-4813-b5ad-d5158f035406",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 594010,
              "key": "f08ecf0c-39d9-41c9-ae2c-ebe558d30ef9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nIf you got this to work, your code should look something like this:\n\n```python\nimport turtle\namy = turtle.Turtle()\n\n# Make the width thicker so that the line will be easier to see\namy.width(5)\n\n# Move back without drawing anything\namy.penup()\namy.back(140)\namy.pendown()\n\n# Draw three red lines, with space in between\nfor line in [1, 2, 3]:\n    amy.color(\"red\")\n    amy.forward(50)\n    amy.penup()\n    amy.forward(50)\n    amy.pendown()\n```\n\nWe'll work with this code some more on the next page.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 675339,
          "key": "255e5956-2104-47f5-ba05-9e701965c9cb",
          "title": "Practice — More loop variables (2/2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "255e5956-2104-47f5-ba05-9e701965c9cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675340,
              "key": "f04b5f5e-976b-458d-b7d7-386f22b40397",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice — More loop variables (2/2)",
              "instructor_notes": ""
            },
            {
              "id": 675341,
              "key": "aabbf882-1472-438b-8fb7-c5558a68a375",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so we have a loop that will draw three lines. But each time the loop runs, it uses the _same color_, so all the lines are just red. We don't want that—we want it to use a _different_ color each time.\n\nWe'd like it to be:\n\n```python\namy.color(\"red\")\n```\n\nAnd then:\n\n```python\namy.color(\"orange\")\n```\n\nAnd then:\n\n```python\namy.color(\"yellow\")\n```\n\nBut how can we do that? Well, the fact that we want the color to change (i.e., _vary_) gives us a clue that we need to use a _variable_. So rather than directly using a string, as in `amy.color(\"red\")`, we'll use a variable, as in `amy.color(prettycolor)`.\n\nThen the turtle will draw whatever color we assign to this variable.",
              "instructor_notes": ""
            },
            {
              "id": 675343,
              "key": "38e43efd-81a4-44bc-b16b-0e541d6cd1cf",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "38e43efd-81a4-44bc-b16b-0e541d6cd1cf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Should `amy.color(prettycolor)` go _inside_ the `for` loop, like this:\n\n```python\nfor line in [1, 2, 3]:\n  amy.color(prettycolor)\n  amy.forward(50)\n  amy.penup()\n  amy.forward(50)\n  amy.pendown()\n```\n\nOr _outside_ the `for` loop, like this:\n\n```python\namy.color(prettycolor)\n\nfor line in [1, 2, 3]:\n  amy.forward(50)\n  amy.penup()\n  amy.forward(50)\n  amy.pendown()\n```",
                "answers": [
                  {
                    "id": "a1531695653683",
                    "text": "Inside the loop",
                    "is_correct": true
                  },
                  {
                    "id": "a1531695715680",
                    "text": "Outside the loop",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 675344,
              "key": "71d79d68-b8f6-49f9-b3be-04ea752c4e1c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "OK, so each time the loop runs, we want to assign `prettycolor` a new color.\n\nThis idea of \"changing the value of something each time the loop runs\" keeps coming back up. For example, earlier we saw a loop where the _length_ changed each time the loop ran. That allowed us to draw this funky spiral shape:",
              "instructor_notes": ""
            },
            {
              "id": 675352,
              "key": "65f6b577-6084-4dfd-835d-b25d1fac67cc",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b4bddba_squiral/squiral.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/65f6b577-6084-4dfd-835d-b25d1fac67cc",
              "caption": "",
              "alt": "The blue squared-off spiral shape we draw earlier.",
              "width": 150,
              "height": 164,
              "instructor_notes": null
            },
            {
              "id": 675355,
              "key": "d6efce07-35a5-4c38-ad99-b5b674164100",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And in another example, we saw a loop where the _angle_ changed each time the loop ran:",
              "instructor_notes": ""
            },
            {
              "id": 675353,
              "key": "aec6b201-5668-4f7a-9015-704a3576d9af",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b4bdde4_mystery-shape/mystery-shape.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aec6b201-5668-4f7a-9015-704a3576d9af",
              "caption": "",
              "alt": "The red house or arrow shape we drew earlier.",
              "width": 150,
              "height": 215,
              "instructor_notes": null
            },
            {
              "id": 675356,
              "key": "4bc2d064-5a21-4fa1-b8b0-6dd2e01975b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For our current problem, we're doing pretty much the same thing. But instead of changing the _length_ or the _angle_, we want to change the _color_:",
              "instructor_notes": ""
            },
            {
              "id": 675357,
              "key": "94397355-9ba2-4263-8845-3d9f48efb7e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5aca7cac_red-orange-yellow-lines/red-orange-yellow-lines.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/94397355-9ba2-4263-8845-3d9f48efb7e0",
              "caption": "",
              "alt": "Three colored lines (red, orange, and yellow).",
              "width": 260,
              "height": 45,
              "instructor_notes": null
            },
            {
              "id": 675358,
              "key": "0bf58d1b-9361-44a2-8c5e-d2f4e5273bee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In all three cases, **the key lies in the _first line_ of the `for` loop**. Right now, that line looks like this:\n\n```python\nfor line in [1, 2, 3]:\n```\n\nRemember, the first line of a `for` loop comes with a special sort of variable. We say it's a \"special\" variable because of the fact that each time the loop runs, the variable gets assigned the next value from the list. You don't see any assignment statements, but that's how `for` loops work.\n\nIn this case, the variable has the name `line`, and it gets assigned one of the numbers from the list `[1, 2, 3]`. The first time the loop runs, `line` will get assigned the value `1`, the second time, it will get assigned the value `2`, and the last time it will get assigned the value `3`.\n\nHm, that sounds an awful lot like what we want to do with the turtle's colors!",
              "instructor_notes": ""
            },
            {
              "id": 675345,
              "key": "0e408803-5235-4852-954f-1c8a14251078",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0e408803-5235-4852-954f-1c8a14251078",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Change the list from `[1, 2, 3]` to something more useful.",
                "Change the name of the variable from `line` to something that makes more sense.",
                "Use the variable inside the loop to set the turtle's color."
              ],
              "positive_feedback": "Excellent! Using the variable in a `for` loop like this is a key concept that can be pretty confusing at first.",
              "video_feedback": null,
              "description": "Below is the same workspace you used on the last page (it should still have your code for drawing three red lines).\n\nSee if you can figure out how to change the code so that each time the loop runs it uses a different color (like `\"red\"`, `\"orange\"`, and `\"yellow\"`).\n\nHere are some of the things you'll need to do:"
            },
            {
              "id": 675347,
              "key": "244722e8-3eb2-4ed5-b4b1-acf30d021da1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "_(If you get stuck, don't feel bad—just take a look at our solution below!)_",
              "instructor_notes": ""
            },
            {
              "id": 675346,
              "key": "564d0b6f-95ea-4418-99a4-697fc71744e7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewBJeS5dIB7m",
              "pool_id": "webterminal",
              "view_id": "html-live-Hy0IPIYXX",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/more_loops.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/more_loops.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 675349,
              "key": "c1ecfa8c-d143-4ecd-8b90-43d5f1543d15",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 675348,
              "key": "c141415c-ff07-4951-9ae8-dd97938a7789",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\namy = turtle.Turtle()\n\n# Make the width thicker so that the line will be easier to see\namy.width(5)\n\n# Move back without drawing anything\namy.penup()\namy.back(140)\namy.pendown()\n\n# Draw three lines of different colors, with space in between\nfor prettycolor in [\"red\", \"orange\", \"yellow\"]:\n    amy.color(prettycolor)\n    amy.forward(50)\n    amy.penup()\n    amy.forward(50)\n    amy.pendown()\n```\n\nNote that the only reason we keep using the name `prettycolor` rather than simply calling it `color` is because we don't want you to get it confused with the `color` method (as in `amy.color(color)`. Python would not be confused by this, though — you can use `color` as a variable if you want to.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 594011,
          "key": "a55a5244-9c90-46ea-8364-9ac24cff24cd",
          "title": "Practice — Nested loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a55a5244-9c90-46ea-8364-9ac24cff24cd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 594012,
              "key": "984c0ccc-15f5-4765-95d6-4d83c026adf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice - Nested loops\n\nWe have seen how we can place one loop _inside_ of another loop. Like this:\n\n```python\nfor side in [1, 2, 3, 4]:\n    paul.forward(100)\n    paul.right(90)\n    for side in [1, 2, 3, 4]:\n        paul.forward(10)\n        paul.right(90)\n```\nIf you recall, this loop draws a big square, with four smaller squares at the corners:",
              "instructor_notes": ""
            },
            {
              "id": 675301,
              "key": "f881d541-0354-4615-8576-0770b7591e12",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b4b8318_nested-loops-squares/nested-loops-squares.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f881d541-0354-4615-8576-0770b7591e12",
              "caption": "",
              "alt": "A big square, with four smaller squares at the corners.",
              "width": 200,
              "height": 237,
              "instructor_notes": null
            },
            {
              "id": 675299,
              "key": "16b7724d-ed9d-42dd-98e2-e46c87d0edeb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nWriting _nested loops_ like this can be tricky at first, so let's get some practice. Below is a workspace that has the code (that you were just working on) for drawing the three colored lines. Instead of drawing three colored lines, what if we wanted to draw three colored shapes?\n\nIn our current code, `amy` simply goes forward each time the loop runs. Instead of that, you could replace the line `amy.forward(50)` with an entire second `for` loop! And you can use that loop to have `amy` draw a square (or any shape you like).\n\n```python\nfor prettycolor in [\"red\", \"orange\", \"yellow\"]:\n    amy.color(prettycolor)\n    amy.forward(50) # Replace this line with a for loop!\n    amy.penup()\n    amy.forward(50)\n    amy.pendown()\n```\n\nYour goal is to use nested loops to draw multiple shapes, like this:",
              "instructor_notes": ""
            },
            {
              "id": 644851,
              "key": "cd1813bb-f2d3-4eb8-a010-b19700c752ac",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/June/5b1ee4f4_nested-loops-boxes/nested-loops-boxes.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cd1813bb-f2d3-4eb8-a010-b19700c752ac",
              "caption": "",
              "alt": "A turtle has drawn three squares, red, orange, and yellow; with gaps between them.",
              "width": 353,
              "height": 118,
              "instructor_notes": null
            },
            {
              "id": 644852,
              "key": "50a20ec1-8bc6-4b60-a387-6185c7e6d31a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Give this a try in the workspace below.\n\n_(If you get stuck, you can find our solution below the workspace.)_",
              "instructor_notes": ""
            },
            {
              "id": 674942,
              "key": "e1e871ba-d777-4175-a250-edcca68be64b",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewrye9PVjIX7",
              "pool_id": "webterminal",
              "view_id": "html-live-S1cwEi8mX",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/nested_loops.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/nested_loops.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 644845,
              "key": "a09d4105-2150-4844-82f1-825ddf4ac1f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ⚠️ Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 594014,
              "key": "a102c9dc-fcaa-497b-815c-e2bec06b1751",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our solution. Notice that we also adjusted how far `amy` moves when _not_ drawing, in order to give some more space between the shapes.\n\n```python\nimport turtle\n\namy = turtle.Turtle()\n\n# Make the width thicker so that the line will be easier to see\namy.width(5)\n\n# Move back without drawing anything\namy.penup()\namy.back(140)\namy.pendown()\n\n# Draw three shapes of different colors, with space in between\nfor prettycolor in [\"red\", \"orange\", \"yellow\"]:\n    amy.color(prettycolor)\n    for side in [1, 2, 3, 4]:\n        amy.forward(50)\n        amy.right(90)\n    amy.penup()\n    amy.forward(100)\n    amy.pendown()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 464658,
          "key": "089ae2d4-55a2-4cb3-bf10-3d8d13aac14d",
          "title": "Thinking about errors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "089ae2d4-55a2-4cb3-bf10-3d8d13aac14d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 464659,
              "key": "2d888de1-5fc9-411a-8955-67f220b6275e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 🚧 Three kinds of errors\n\nIn my experience, there are really three major kinds of errors that come up in programming: **syntax errors**, **usage errors**, and **logic errors**.\n\n### Syntax errors are like spelling errors\n\nThe first are **syntax errors**. This is when you write something that doesn't make sense in the grammar of the language. In Python, if you write a `)` with no opening `(` before it, that's a syntax error. If you leave the `:` off of a **for** loop, that's also a syntax error.\n\n```python\nimport turtle\nalison = turtle.Turtle()\nfor angle in [15, 30, 45]     # missing colon\n    alison.right 90)          # missing parenthesis\n```\n\nSyntax errors are like spelling errors. When you're learning a new language, you'll probably make a lot of them. But once you're used to the language, you'll make very few.\n\n### Usage errors are like nonsense answers\n\nThe second kind of errors are what we might call **usage errors**. This is when you ask the computer to do something that doesn't make sense. For instance, `alison.forward(\"orange\")` is a usage error. It's completely grammatical, but the `forward` method expects a _number_, a distance in pixels, not a string. The turtle can't go forward by `\"orange\"` pixels.\n\nErrors like this are similar to saying something absurd, or giving a nonsense answer to a question:\n\n> **Q:** What would you like for lunch today?  \n> **A:** The distance from New York to London.\n\n> **Q:** What's your favorite color?  \n> **A:** A penguin.\n\nYou can't eat a distance; a penguin isn't a color. These answers don't make sense for these questions, just like `\"orange\"` doesn't make sense as an input to the `forward` method.\n\nPython's `NameError` and `TypeError` messages usually mean an error of this sort. So, in a way, does the `ZeroDivisionError` you saw earlier.\n\n### Logic errors are like asking for the wrong thing\n\nFinally, the third kind of errors are **logic errors**. The program runs fine — it doesn't crash — but it doesn't do what you wanted it to do, because what you *wrote* isn't what you *meant*. These are what people mean when they say, \"The computer doesn't do what you *want* it to; it only does what you *tell* it to do.\"\n\nFor instance, if I want to make an octagon 🛑 and I wrote this code —\n\n```python\nimport turtle\nmichael = turtle.Turtle()\nfor side in [1, 2, 3, 4, 5, 7, 8]:\n    michael.forward(100)\n    michael.right(45)\n```\n\n... then my code has a logic error. Look closely and see if you can find it.",
              "instructor_notes": ""
            },
            {
              "id": 464660,
              "key": "34973d98-765c-4a92-96a8-09644b82bb92",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "34973d98-765c-4a92-96a8-09644b82bb92",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Without running the `michael` code above, what line do you think has the error?",
                "answers": [
                  {
                    "id": "a1511442000944",
                    "text": "The line with the **import** statement",
                    "is_correct": false
                  },
                  {
                    "id": "a1511442066510",
                    "text": "The line where **michael** is defined",
                    "is_correct": false
                  },
                  {
                    "id": "a1511442077697",
                    "text": "The line that starts the **for** loop",
                    "is_correct": true
                  },
                  {
                    "id": "a1511442089233",
                    "text": "The line where the turtle goes **forward**",
                    "is_correct": false
                  },
                  {
                    "id": "a1511442090090",
                    "text": "The line where the turtle goes **right**",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 542777,
              "key": "aeaf5814-8b29-424b-817c-da7d4742eb74",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Indentation can be tricky\n\nOne place that errors can sneak into your code is in the indentation of loops. If you find that some lines of code are running more times (or fewer) than you expect, take a careful look at how your loops are indented.\n\n```python\nfor a in [1, 2, 3]:\n    # code here will run 3 times.\n    for b in [4, 5, 6]:\n        # code in here will run 9 times\n    # but code here will run only 3 times!\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 542778,
              "key": "8c25268b-6b4f-4c15-a69a-67a137ffbd5d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8c25268b-6b4f-4c15-a69a-67a137ffbd5d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When this code runs, what is the _total_ distance that `willow` goes forward?\n\n```python\nwillow = turtle.Turtle()\nfor x in [1, 2, 3]:\n    willow.forward(1)\n    for y in [4, 5, 6, 7]:\n        willow.forward(1)\n    willow.forward(1)\n```",
                "answers": [
                  {
                    "id": "a1518121791172",
                    "text": "3 pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1518121984386",
                    "text": "7 pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1518121985607",
                    "text": "13 pixels",
                    "is_correct": false
                  },
                  {
                    "id": "a1518121996764",
                    "text": "18 pixels",
                    "is_correct": true
                  },
                  {
                    "id": "a1518122015780",
                    "text": "21 pixels",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 458783,
          "key": "c4ea9fbc-6b67-4ae6-9407-7379b599ac59",
          "title": "Rainbow turtles",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c4ea9fbc-6b67-4ae6-9407-7379b599ac59",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 674620,
              "key": "6b95987f-15f9-4290-b512-a941b42ff277",
              "title": "Python: Rainbow Turtle",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jV_0sC9BVUw",
                "china_cdn_id": "jV_0sC9BVUw.mp4"
              }
            },
            {
              "id": 461515,
              "key": "462363bd-2ef2-411a-b592-12679ba45559",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 🌈Drawing the rainbow\n\nUse the workspace below to draw a rainbow-colored shape or pattern of your choice!\n\nA few extra turtle methods that might come in handy (assuming you have a turtle called `terry`):\n\n* `terry.hideturtle()` will make the turtle itself disappear.\n* `terry.showturtle()` will make it appear again.\n\nAnd as you saw earlier:\n\n* `terry.width(10)` will make it draw a very thick line.\n* `terry.penup()` will cause it to \"pick the pen up\" and _not_ draw a line as it moves.\n* `terry.pendown()` will cause it to start drawing as it moves again.\n\nDon't forget to create a turtle first. (You don't have to call it `terry`.)\n\n_Not sure what to do after that? Try a `for` loop!_",
              "instructor_notes": ""
            },
            {
              "id": 461511,
              "key": "68463537-8cb0-4904-8bea-8751a9edb67a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view69c608dc",
              "pool_id": "webterminal",
              "view_id": "79984a71-46a8-40e1-b69e-50b78eeaf774",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_one/anything.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_one/anything.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 461531,
              "key": "884b7993-25ac-4883-bcee-6ce3ab4d1a36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is an open-ended exercise. You can do as much or as little with it as you like! _(The more you do, the more you will learn.)_\n\nWhen you've done as much as you choose to, watch the videos below on this page to see some worked examples.",
              "instructor_notes": ""
            },
            {
              "id": 464637,
              "key": "e09d5f9f-0752-408d-8671-855f7c489e17",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e09d5f9f-0752-408d-8671-855f7c489e17",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Write code that draws a multicolored pattern using the list of colors.",
                "If you like, take a screenshot of your work and share it with your friends!"
              ],
              "positive_feedback": "**I wish I could see your colorful code!**",
              "video_feedback": null,
              "description": "Before you go on, make sure that you've done each of these steps!"
            },
            {
              "id": 674621,
              "key": "17acb346-ccb4-4396-9bcf-1ede887a8d29",
              "title": "Python: Rainbow Turtle Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "P50aMPx-zYI",
                "china_cdn_id": "P50aMPx-zYI.mp4"
              }
            },
            {
              "id": 674622,
              "key": "dcc37c98-8194-4a8c-8f51-ccf46b49330c",
              "title": "Python: Rainbow Turtle Walkthrough, Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uIg5-eaaqGs",
                "china_cdn_id": "uIg5-eaaqGs.mp4"
              }
            }
          ]
        },
        {
          "id": 457400,
          "key": "07851f83-f173-4517-8929-f7260c88b347",
          "title": "Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "07851f83-f173-4517-8929-f7260c88b347",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 461221,
              "key": "4686f3b2-9f2e-441f-b0ac-dfb2ceaf0900",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Review\n\nCongratulations! You've made it to the end of this lesson. Before going on to the next lesson, take a moment to review some of the stuff you've learned. It's quite a lot! The quizzes on this page are to help you consolidate what you've learned so far. ",
              "instructor_notes": ""
            },
            {
              "id": 461535,
              "key": "26c3b48c-8fa3-4a55-b882-564b55ea8023",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "26c3b48c-8fa3-4a55-b882-564b55ea8023",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these lines of code is a **method call**?",
                "answers": [
                  {
                    "id": "a1510617490245",
                    "text": "`import turtle`",
                    "is_correct": false
                  },
                  {
                    "id": "a1510617519820",
                    "text": "`for side in sides:`",
                    "is_correct": false
                  },
                  {
                    "id": "a1510617520602",
                    "text": "`george.forward(90)`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 461539,
              "key": "b2771933-4d3e-466b-9020-d32b2844f7b5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b2771933-4d3e-466b-9020-d32b2844f7b5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In a `for` loop using a list, what decides how many times the loop will run?",
                "answers": [
                  {
                    "id": "a1510617717079",
                    "text": "The width of the turtle's pen.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510617736793",
                    "text": "The number of items in the list, e.g. three times for `[5, 6, 7]`",
                    "is_correct": true
                  },
                  {
                    "id": "a1510617737556",
                    "text": "How many copies of the loop's code there are.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510617873570",
                    "text": "The largest number in the list, e.g. `17` in `[3, 17, 5]`.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 461542,
              "key": "0d57b597-9ecb-4c5c-992b-1516d44f9d6b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0d57b597-9ecb-4c5c-992b-1516d44f9d6b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In Python, what does it mean if something is in `\"quotes\"`?",
                "answers": [
                  {
                    "id": "a1510618066266",
                    "text": "It's a string, a piece of text.",
                    "is_correct": true
                  },
                  {
                    "id": "a1510618103584",
                    "text": "It's the name of a variable, which could contain a turtle or a number.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510618118734",
                    "text": "It is a numbered location in computer memory.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510618136045",
                    "text": "It is a module.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 461543,
              "key": "c17c2de5-1f52-4dd1-a636-aca155cd0fc5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c17c2de5-1f52-4dd1-a636-aca155cd0fc5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does `NameError` mean?",
                "answers": [
                  {
                    "id": "a1510618355878",
                    "text": "Your code tried to give a turtle a rude or nasty name.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510618364604",
                    "text": "Your code tried to create a string that was too big to fit in memory.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510618365360",
                    "text": "Your code tried to use a variable before defining it.",
                    "is_correct": true
                  },
                  {
                    "id": "a1510687024406",
                    "text": "It could mean anything, or nothing at all; you can't tell.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 461545,
              "key": "9dad8b96-0e96-4cb6-ba8c-d9ad80f07f1e",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9dad8b96-0e96-4cb6-ba8c-d9ad80f07f1e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these pieces of information can you find in error messages from Python?\n\nMark **all** that apply.",
                "answers": [
                  {
                    "id": "a1510618561067",
                    "text": "The type of error, such as `ZeroDivisionError` or `NameError`",
                    "is_correct": true
                  },
                  {
                    "id": "a1510618598845",
                    "text": "The corrected version of the code.",
                    "is_correct": false
                  },
                  {
                    "id": "a1510618599696",
                    "text": "The line number where the error occurred.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 728724,
              "key": "f55e98b2-8460-4898-b9bf-4a514e4f6c9d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ... and you're done with the lesson! Way to go!\nThere were definitely some tricky concepts in this lesson, so the fact that you stuck with it and made it to the end really says something about you.\n\nYou probably struggled in places, and had to sometimes check the solution. Some of the ideas may have been hard to grasp, and you might be worried that this is a sign that you don't have the \"right kind of brain\" to be a programmer.\n\nYou should know that these concerns are incredibly common among beginning programmers. But all of the above experiences are _completely normal_. This is a challenging subject and learning it requires a sustained effort!\n\nSo, we hope you'll take a moment to appreciate your own tenacity, progress, and growth. If you've made it this far, you've proven that you have what it takes to learn to code!\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}