{
  "data": {
    "lesson": {
      "id": 817311,
      "key": "ce44e4e0-c3f1-4657-a4bc-2b71fd2cda91",
      "title": "Functions, Part 2",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn more advanced functions, conditional statements, and loops.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ce44e4e0-c3f1-4657-a4bc-2b71fd2cda91/817311/1582017610980/Functions%2C+Part+2+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ce44e4e0-c3f1-4657-a4bc-2b71fd2cda91/817311/1582017605805/Functions%2C+Part+2+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 466653,
          "key": "f0f79bcb-dd6f-4977-b7a3-994ef1bac4be",
          "title": "If this equals that",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0f79bcb-dd6f-4977-b7a3-994ef1bac4be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675107,
              "key": "97f89d7a-58db-4969-9ae0-b3d1f6f8f9d5",
              "title": "Python: If Statements",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iLCDdu6Zugo",
                "china_cdn_id": "iLCDdu6Zugo.mp4"
              }
            },
            {
              "id": 477799,
              "key": "aba141d7-7191-4ed0-8e15-9b4d02d3ccf9",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aba141d7-7191-4ed0-8e15-9b4d02d3ccf9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match up these conditional sentences so they make sense."
                },
                "concepts_label": "If this is true, ...",
                "answers_label": "... then do this!",
                "concepts": [
                  {
                    "text": "If the \"add fuel\" light comes on, ...",
                    "correct_answer": {
                      "id": "a1513120560986",
                      "text": "... drive to the nearest gas station."
                    }
                  },
                  {
                    "text": "If you're about to sneeze, ...",
                    "correct_answer": {
                      "id": "a1513120667713",
                      "text": "... cover your nose and mouth."
                    }
                  },
                  {
                    "text": "If it's cold outside, ...",
                    "correct_answer": {
                      "id": "a1513120696068",
                      "text": "... wear a warm coat and hat."
                    }
                  },
                  {
                    "text": "If you're thirsty, ...",
                    "correct_answer": {
                      "id": "a1513120788409",
                      "text": "... drink some water."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1513120811948",
                    "text": "... pack your parachute and go skydiving."
                  },
                  {
                    "id": "a1513120696068",
                    "text": "... wear a warm coat and hat."
                  },
                  {
                    "id": "a1513120560986",
                    "text": "... drive to the nearest gas station."
                  },
                  {
                    "id": "a1513120667713",
                    "text": "... cover your nose and mouth."
                  },
                  {
                    "id": "a1513120852747",
                    "text": "... scoop ice cream into your computer."
                  },
                  {
                    "id": "a1513120788409",
                    "text": "... drink some water."
                  }
                ]
              }
            },
            {
              "id": 477843,
              "key": "681f353f-6b55-403b-be85-ea9f2c36925b",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "681f353f-6b55-403b-be85-ea9f2c36925b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "After running this code, what color will `becky` be drawing in?\n\n```python\nsquids = 17\nbecky = turtle.Turtle()\nbecky.color(\"red\")\nif squids == 42:\n    becky.color(\"blue\")\nbecky.width(5)\n```",
                "answers": [
                  {
                    "id": "a1513123778346",
                    "text": "`\"red\"`",
                    "is_correct": true
                  },
                  {
                    "id": "a1513123781755",
                    "text": "`\"blue\"`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 478276,
              "key": "efee7dcd-e8c2-485c-82eb-0306ae9cdf86",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "efee7dcd-e8c2-485c-82eb-0306ae9cdf86",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Read the code.",
                "**Run** the code to see `romeo` draw his half.",
                "Modify the `if` statement so that `juliet` draws the other half.",
                "**Run** the code again to check that it works."
              ],
              "positive_feedback": "üê¢ ‚ù§Ô∏è  üê¢",
              "video_feedback": null,
              "description": "In the workspace below, you'll find our star-crossed turtles, `romeo` and `juliet`. (They're having a bit of a problem because of `romeo`'s last name.)\n\nBefore doing anything else, read through the code and see if you can predict what it does (this may make your brain hurt, but it's _excellent_ practice).\n\nThen, change the `if` statement so that `juliet` draws her half of the picture."
            },
            {
              "id": 722741,
              "key": "8ee09a90-8786-4478-8541-dfae6687610c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9ls43qna9du",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-shj8v5kd7cp",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 722742,
              "key": "b1e0bbd5-1791-4a20-91fa-fa182d7043fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 671120,
              "key": "2536ee25-6c5e-4da8-ba85-afaf06c04307",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our code. You could also have changed the name that is assigned to `romeo_last_name`, or even removed the `if` statement altogether (and un-indented the code beneath it). Any of those changes would result in `juliet` drawing the other half of the heart.\n\n```python\nimport turtle\n\nromeo = turtle.Turtle()\njuliet = turtle.Turtle()\n\njuliet.color(\"misty rose\")\njuliet.width(3)\n\nromeo.color(\"violet\")\nromeo.width(3)\n\nromeo_last_name = \"montague\"\n\nromeo.left(40)\nromeo.forward(100)\nfor side in range(185):\n    romeo.forward(1)\n    romeo.left(1)\nromeo.hideturtle()\n\nif romeo_last_name == \"montague\": # It's just one little change down here.\n    juliet.left(140)\n    juliet.forward(100)\n    for side in range(185):\n        juliet.forward(1)\n        juliet.right(1)\n    juliet.hideturtle()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 722728,
          "key": "39c22489-d20c-483e-85d8-8ceee58654ac",
          "title": "Conditionals in loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "39c22489-d20c-483e-85d8-8ceee58654ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 722729,
              "key": "f8ea1a40-b364-45c6-bdba-e04235f00d4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Conditionals in loops",
              "instructor_notes": ""
            },
            {
              "id": 722730,
              "key": "4a3ecd3a-f0c3-4d6a-81ec-58c5a8dc0951",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One of the nice things about loops is, of course, that they do the same thing over and over.\n\nBut sometimes you don't want them to do _exactly_ the same thing each time. For example, maybe you'd like a loop that draws lines to make a shape, but you'd like one of the sides on that shape to be a different color:",
              "instructor_notes": ""
            },
            {
              "id": 722743,
              "key": "0c0d0e9c-d2e3-4160-9a03-f59d558170d1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5ba84453_square-with-blue-side/square-with-blue-side.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0c0d0e9c-d2e3-4160-9a03-f59d558170d1",
              "caption": "",
              "alt": "A yellow square with one blue side.",
              "width": 133,
              "height": 123,
              "instructor_notes": null
            },
            {
              "id": 722731,
              "key": "0324e97b-1f96-497c-913c-81479368a35c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We can get a result like this by using **an `if` statement inside of the `for` loop**.\n\nIn fact, the technique of putting **conditionals inside loops** is useful for solving a wide range of problems, so it's something you'll see a lot of in programming. Let's look at some examples!",
              "instructor_notes": ""
            },
            {
              "id": 722733,
              "key": "dfabebff-a170-4923-aaa8-e2af7ca647c2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dfabebff-a170-4923-aaa8-e2af7ca647c2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's the familiar code that we used earlier to draw a yellow square. But in this case, we have added an `if` statement inside the `for` loop.\n\n```python\nimport turtle\njack = turtle.Turtle()\njack.color(\"yellow\")\n\nfor side in range(4):\n    if side == 3:\n        jack.color(\"blue\")\n    jack.forward(100)\n    jack.right(90)\n```\n\nWhat effect does adding the `if` statement have on the square?",
                "answers": [
                  {
                    "id": "a1537749956823",
                    "text": "It makes the third side blue.",
                    "is_correct": false
                  },
                  {
                    "id": "a1537749963533",
                    "text": "It makes the fourth side blue.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 722734,
              "key": "29b7d5f8-41e0-43b7-b6d5-e696ead48332",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "29b7d5f8-41e0-43b7-b6d5-e696ead48332",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's the same code again, but with the `if` statement placed at the end of the `for` loop:\n\n```python\nimport turtle\njack = turtle.Turtle()\njack.color(\"yellow\")\n\nfor side in range(4):\n    jack.forward(100)\n    jack.right(90)\n    if side == 3:\n        jack.color(\"blue\")\n```\n\nWhat would this do?",
                "answers": [
                  {
                    "id": "a1537750038517",
                    "text": "The same thing as before‚Äîit would make the fourth side blue.",
                    "is_correct": false
                  },
                  {
                    "id": "a1537750046052",
                    "text": "The whole square would be yellow, because it would not change the color to blue until after drawing the fourth side.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 722735,
              "key": "0de0eded-fec2-4e90-9f0b-d1b3c5418b4a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0de0eded-fec2-4e90-9f0b-d1b3c5418b4a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "And here's that same code one more time, but with another small change:\n\n```python\nimport turtle\njack = turtle.Turtle()\njack.color(\"yellow\")\n\nfor side in range(4):\n    if side == 2:\n        jack.color(\"blue\")\n    jack.forward(100)\n    jack.right(90)\n```\n\nWhat does the `if` statement do in this case?",
                "answers": [
                  {
                    "id": "a1537750092253",
                    "text": "It makes **only** the *third* side blue.",
                    "is_correct": false
                  },
                  {
                    "id": "a1537750104317",
                    "text": "It makes **both** the *third* and *fourth* sides blue.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 722737,
              "key": "52ba5e75-5be1-43a1-a9f1-7f15f0c38649",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "52ba5e75-5be1-43a1-a9f1-7f15f0c38649",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "First, try to make the **third** and **fourth** sides blue.",
                "Next, try to make **only** the **second** side blue (and the rest of the sides yellow)."
              ],
              "positive_feedback": "Hold on to this concept‚Äîit's something you'll make use of a lot as a programmer!",
              "video_feedback": null,
              "description": "In the workspace below, you'll find the code for drawing a yellow square. See if you can change the colors of _some_ of the sides of the square by placing conditionals (`if` statements) inside the loop."
            },
            {
              "id": 722732,
              "key": "5147e9a0-b508-4835-9c68-fdac57a77340",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewq0k6moj5l9g",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-kb8ze758yos",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 722738,
              "key": "d131443b-cff4-4fe3-a176-78d2205af64d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 722736,
              "key": "e089c2d5-9ee2-41b8-9454-8236b5a3490a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\njack = turtle.Turtle()\njack.width(5)\n\njack.color(\"yellow\")\nfor side in range(4):\n    if side == 1:\n        jack.color(\"blue\")\n    if side == 2:\n        jack.color(\"yellow\")\n    jack.forward(100)\n    jack.right(90)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466654,
          "key": "43f5d592-40d5-4174-9a66-7524ad2778e7",
          "title": "if / else",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43f5d592-40d5-4174-9a66-7524ad2778e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 478484,
              "key": "f1476f1f-4998-4ae4-9051-d7eafa6640ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `if` / `else`\n\nFor reference, here's the code that we just looked at, where we have an `if` statement that makes only the second side blue (and all other sides yellow):\n\n```python\njack.color(\"yellow\")\nfor side in range(4):\n    if side == 1:\n        jack.color(\"blue\")\n    if side == 2:\n        jack.color(\"yellow\")\n    jack.forward(100)\n    jack.right(90)\n```\n\nIn the above code, we start out by setting the color to `\"yellow\"`, and then later set it to `\"blue\"`‚Äîand then set it back to `\"yellow\"` again! That seems inefficient, to have to change the color to yellow twice.\n\nThere's a different way we can do this, using an `if` / `else` structure:\n\n```python\nfor side in range(4):\n    if side == 1:\n        jack.color(\"blue\")\n    else:\n        jack.color(\"yellow\")\n    jack.forward(100)\n    jack.right(90)\n```\n\nThis is called an `if`/`else` statement, and it's a variation on the `if` statement. The way it works is that the condition `side == 1` is checked, and if it's true, then the code under the `if` line will run; but if the condition is false, the code under the `else` line will run instead.\n\nYou can think of this as saying, \"If `side` is 1, then set the color to blue; *otherwise*, set the color to yellow.\"\n\nYou will see a lot of `if`/`else` statements as you continue coding.",
              "instructor_notes": ""
            },
            {
              "id": 478485,
              "key": "2c7103a3-e3d2-46cd-8a9f-4478d7de59a9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2c7103a3-e3d2-46cd-8a9f-4478d7de59a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here are two pieces of code. Do they do the same thing?\n\n```python\nif code == \"clever\":\n    dance()\nelse:\n    sigh()\n```\n\n```python\nsigh()\nif code == \"clever\":\n    dance()\n```",
                "answers": [
                  {
                    "id": "a1513203556362",
                    "text": "Yes, these will always do the same thing.",
                    "is_correct": false
                  },
                  {
                    "id": "a1513203629447",
                    "text": "No, these do different things sometimes.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 722772,
              "key": "b351209a-514d-4baf-a6b6-a00789a20198",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b351209a-514d-4baf-a6b6-a00789a20198",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Delete the current line `jack.color(\"yellow\")`‚Äîyou won't need it!",
                "Replace the second `if` statement with an `else` block.",
                "**Run** the code to make sure it still draws a yellow square with one blue side."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find our code for drawing the yellow box with one blue side. The current approach uses two `if` statements and requires setting the color to `\"yellow\"` twice.\n\nTry changing it to use `else` instead. You will only need to set the color to `\"yellow\"` one time (inside the `else` block)!"
            },
            {
              "id": 722769,
              "key": "f1b4be6f-3e09-41bc-9b30-d68271d408d0",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view9vrloc6tlh7",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-p82tszu6gl",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 722776,
              "key": "ed406d68-ca7d-43a1-8c0d-a94c5357e5bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 722774,
              "key": "68e45d62-5589-4078-a48d-3261660c6a18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\njack = turtle.Turtle()\njack.width(5)\n\nfor side in range(4):\n    if side == 1:\n        jack.color(\"blue\")\n    else:\n        jack.color(\"yellow\")\n    jack.forward(100)\n    jack.right(90)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466655,
          "key": "8474eb66-2fd9-49d6-aac6-79de8c81aee6",
          "title": "Modulo (1/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8474eb66-2fd9-49d6-aac6-79de8c81aee6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675108,
              "key": "70b54bb4-cbc0-4016-8396-b57c44bcbf2d",
              "title": "Python: The Modulo Operation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XN18DdE4B14",
                "china_cdn_id": "XN18DdE4B14.mp4"
              }
            },
            {
              "id": 723081,
              "key": "9c8a601f-0056-44bb-9065-66a05c012426",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Like Karl discussed in the video, the **modulo operator**, `%`, divides one number by another‚Äîand then gives the _remainder_ of that division.\n\nFor this whole **modulo** business to make sense, it helps to have a solid idea of how to do basic division with remainders . We don't want to get too deep into the math here (that's not the key point anyway), but let's try a few problems to make sure we've got the basics.",
              "instructor_notes": ""
            },
            {
              "id": 725494,
              "key": "66da17f9-0d56-4862-a29b-dc14056ec3e5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66da17f9-0d56-4862-a29b-dc14056ec3e5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is **7 divided by 3**?\n\n(It may help to ask yourself, \"How many times does 3 _go into_ 7?\" or \"How many groups of 3 are in 7, and how much is left over?\")",
                "answers": [
                  {
                    "id": "a1537822318685",
                    "text": "2, with a remainder of 1",
                    "is_correct": true
                  },
                  {
                    "id": "a1537822667065",
                    "text": "3, with a remainder of 2",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 728549,
              "key": "f7ab34ae-1066-467d-acf2-4bbd85ed4948",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How to find the result of a modulo operation\nSo, if you see something like `7 % 3` in a piece of code, how can you figure out the result that this will give? What number will this expression evaluate to?\n\nHere's one way of thinking about it:  \n\n** 1. How many groups of `3` are in the number `7`?  **  \nWell, `7` is the same as `3` + `3` + `1`. So there are two groups of `3`. (Another way of asking this is, \"How many times does `3` 'go into' `7`?\")\n\n** 2. Once we have divided `7` up into as many groups of `3` as possible, what is remaining?**  \nIn this case, `1` is left over. We cannot evenly divide `1` into any more groups of `3`. So `1` is the remainder. Thus, the expression `7 % 3` will evaluate to the result `1`.",
              "instructor_notes": ""
            },
            {
              "id": 723115,
              "key": "50987860-8f15-45bc-823d-82a9a6df582b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Want more help understanding remainders?\n\nIf this is all making sense to you, great! But this stuff _can_ be confusing, so if you find yourself scratching your head and want a more thorough explanation of division and remainders, check out [this great video](https://www.khanacademy.org/math/arithmetic/arith-review-multiply-divide/arith-review-remainders/v/introduction-to-remainders) from our friends over at Khan Academy. They also have [practice problems you can try out](https://www.khanacademy.org/math/arithmetic/arith-review-multiply-divide/arith-review-remainders/e/division-with-remainders-1).\n\nAnd remember, the most important concept here is not the math itself. The key idea is that **we need a way to create a repeating pattern**‚Äîand the modulo operator gives us a way to do that.",
              "instructor_notes": ""
            },
            {
              "id": 593207,
              "key": "9d9ecd30-cf1a-4646-b3c4-84dfaad4c5be",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9d9ecd30-cf1a-4646-b3c4-84dfaad4c5be",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Let's get some practice with the modulo operation. What remainder would each of these operations give?"
                },
                "concepts_label": "Modulo operation",
                "answers_label": "Remainder",
                "concepts": [
                  {
                    "text": "`3 % 2`",
                    "correct_answer": {
                      "id": "a1522976739609",
                      "text": "1"
                    }
                  },
                  {
                    "text": "`8 % 3`",
                    "correct_answer": {
                      "id": "a1522976925489",
                      "text": "2"
                    }
                  },
                  {
                    "text": "`6 % 3`",
                    "correct_answer": {
                      "id": "a1522976926209",
                      "text": "0"
                    }
                  },
                  {
                    "text": "`1 % 5`",
                    "correct_answer": {
                      "id": "a1522976926873",
                      "text": "1"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1522976926209",
                    "text": "0"
                  },
                  {
                    "id": "a1522976739609",
                    "text": "1"
                  },
                  {
                    "id": "a1522976926873",
                    "text": "1"
                  },
                  {
                    "id": "a1522976925489",
                    "text": "2"
                  }
                ]
              }
            },
            {
              "id": 725502,
              "key": "c530df63-01e7-42aa-846c-7d7fb7966dd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the above exercise, that last problem (`1 % 5`) may have seemed trickier than the others. Remember, one way to think of this is as if we are asking, \"how many times can we divide 1 up into groups of 5‚Äîand how much is left over after we finish dividing?\"\n\nWell, we can't divide 1 up into _any_ groups of 5. So we have 0 groups of five, with that original 1 left over (the remainder is 1).",
              "instructor_notes": ""
            },
            {
              "id": 728535,
              "key": "d2f50f50-a17a-4fec-a84e-a9841d721a60",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d2f50f50-a17a-4fec-a84e-a9841d721a60",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some more. What remainder would each of these operations give?"
                },
                "concepts_label": "Modulo operation",
                "answers_label": "Remainder",
                "concepts": [
                  {
                    "text": "`1 % 100`",
                    "correct_answer": {
                      "id": "a1537999708784",
                      "text": "1"
                    }
                  },
                  {
                    "text": "`7 % 10`",
                    "correct_answer": {
                      "id": "a1537999806613",
                      "text": "7"
                    }
                  },
                  {
                    "text": "`2 % 5`",
                    "correct_answer": {
                      "id": "a1537999845783",
                      "text": "2"
                    }
                  },
                  {
                    "text": "`7 % 1000`",
                    "correct_answer": {
                      "id": "a1537999876734",
                      "text": "7"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1537999876734",
                    "text": "7"
                  },
                  {
                    "id": "a1537999845783",
                    "text": "2"
                  },
                  {
                    "id": "a1537999708784",
                    "text": "1"
                  },
                  {
                    "id": "a1537999806613",
                    "text": "7"
                  }
                ]
              }
            },
            {
              "id": 728541,
              "key": "b6b582cf-7156-4eb1-915e-e66282251dfb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Did you notice a consistent result there? If we have `a % b` and `b` is bigger, then the remainder will simply be `a`. \n\nFor example:\n\n`7 % 10` gives the result `7`  \n`7 % 100` gives the result `7`  \n`7 % 1000` gives the result `7`\n\nIn all of these cases, the number on the right is bigger, so we just end up with the number on the left as the result.",
              "instructor_notes": ""
            },
            {
              "id": 725513,
              "key": "0301f34a-ce43-477b-a049-a1429ac856c0",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0301f34a-ce43-477b-a049-a1429ac856c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "A common thing to do with the  **modulo operator** is to use it with an **increasing sequence** of numbers. For example, we can do `1 % 5`, then `2 % 5`, then `3 % 5`, and so on. \n\nIt helps to see this for yourself. So here is an increasing sequence like that. See if you can match up each modulo operation with its result:"
                },
                "concepts_label": "Modulo operation",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "`0 % 3`",
                    "correct_answer": {
                      "id": "a1537823259875",
                      "text": "`0`"
                    }
                  },
                  {
                    "text": "`1 % 3`",
                    "correct_answer": {
                      "id": "a1537823715559",
                      "text": "`1`"
                    }
                  },
                  {
                    "text": "`2 % 3`",
                    "correct_answer": {
                      "id": "a1537823727527",
                      "text": "`2`"
                    }
                  },
                  {
                    "text": "`3 % 3`",
                    "correct_answer": {
                      "id": "a1537823748486",
                      "text": "`0`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1537823259875",
                    "text": "`0`"
                  },
                  {
                    "id": "a1537823748486",
                    "text": "`0`"
                  },
                  {
                    "id": "a1537823727527",
                    "text": "`2`"
                  },
                  {
                    "id": "a1537823715559",
                    "text": "`1`"
                  }
                ]
              }
            },
            {
              "id": 725514,
              "key": "0bb46fdf-7f32-4921-9c0c-81c488c21208",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the above exercise, notice that the result counts up (`0`, `1`, `2`) , until the two numbers are the same (`3 % 3`), and then the result starts over at `0`.\n\nIf we keep counting up, this pattern will just keep on repeating forever! Every time we get to a number that is evenly divisible by `3`, the remainder will be `0`, and we'll start over.",
              "instructor_notes": ""
            },
            {
              "id": 728561,
              "key": "3f5da92a-cae5-4e32-bf8f-a281bad1965c",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3f5da92a-cae5-4e32-bf8f-a281bad1965c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's another example of using modulo with an increasing sequence of numbers. What result do you get for each of them?"
                },
                "concepts_label": "Modulo operation",
                "answers_label": "Result",
                "concepts": [
                  {
                    "text": "`2 % 2`",
                    "correct_answer": {
                      "id": "a1538001831254",
                      "text": "0"
                    }
                  },
                  {
                    "text": "`3 % 2`",
                    "correct_answer": {
                      "id": "a1538001835173",
                      "text": "1"
                    }
                  },
                  {
                    "text": "`4 % 2`",
                    "correct_answer": {
                      "id": "a1538001836718",
                      "text": "0"
                    }
                  },
                  {
                    "text": "`5 % 2`",
                    "correct_answer": {
                      "id": "a1538001837573",
                      "text": "1"
                    }
                  },
                  {
                    "text": "`6 % 2`",
                    "correct_answer": {
                      "id": "a1538001862318",
                      "text": "0"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538001835173",
                    "text": "1"
                  },
                  {
                    "id": "a1538001862318",
                    "text": "0"
                  },
                  {
                    "id": "a1538001836718",
                    "text": "0"
                  },
                  {
                    "id": "a1538001837573",
                    "text": "1"
                  },
                  {
                    "id": "a1538001831254",
                    "text": "0"
                  }
                ]
              }
            },
            {
              "id": 690434,
              "key": "0512a848-7360-47c4-9903-752ac58f2c4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Again, did you see a pattern there? If the number can be divided evenly by `2`, then there's no remainder‚Äîso we get `0` as the result.\n\nThis table shows the values of `x % 2` and `x % 3` for different values of `x`. Check out how the values repeat, even though `x` is increasing:\n\n|`x`|`x % 2`|`x % 3`|\n|:---:|:---:|:---:|\n|0|0|0|\n|1|1|1|\n|2|0|2|\n|3|1|0|\n|4|0|1|\n|5|1|2|\n|6|0|0|\n|7|1|1|\n|...|\t...|...|\n",
              "instructor_notes": ""
            },
            {
              "id": 478314,
              "key": "f6ca9ecd-fe61-49b6-946e-b6656b1f0f68",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f6ca9ecd-fe61-49b6-946e-b6656b1f0f68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Looking at the above table, which of these statements is true about `x % 2`?",
                "answers": [
                  {
                    "id": "a1513191926879",
                    "text": "`x % 2` always gets larger if `x` gets larger.",
                    "is_correct": false
                  },
                  {
                    "id": "a1513191949521",
                    "text": "`x % 2` is zero only when `x` is an even number.",
                    "is_correct": true
                  },
                  {
                    "id": "a1513191951124",
                    "text": "`x % 2` is always an odd number.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 478316,
              "key": "d44e89be-ae47-45a7-90d3-e25ab36be8c6",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d44e89be-ae47-45a7-90d3-e25ab36be8c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these statements is true about `x % 3`?",
                "answers": [
                  {
                    "id": "a1513192229232",
                    "text": "Regardless of what `x` is, `x % 3` is always less than 3.",
                    "is_correct": true
                  },
                  {
                    "id": "a1513192239909",
                    "text": "`x % 3` is always a multiple of 3.",
                    "is_correct": false
                  },
                  {
                    "id": "a1513192312311",
                    "text": "If `x` is a multiple of 3, then `x % 3` will be 1.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 495663,
              "key": "6196c28c-3d8a-4d7f-8991-01fb2be8d165",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6196c28c-3d8a-4d7f-8991-01fb2be8d165",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The modulo operation is kind of like the hands of a clock. The minute hand starts at `0` and counts up to `59`, then goes back to `0` at the beginning of the next hour. Like this:\n\n> 0, 1, 2, 3 . . . 57, 58, 59, 0, 1, 2, 3 . . . 57, 58, 59, 0, 1, 2, 3 . . . \n\nWhat Python expression could we use for this pattern?\n\n",
                "answers": [
                  {
                    "id": "a1514915135602",
                    "text": "`x % 0`",
                    "is_correct": false
                  },
                  {
                    "id": "a1514915221467",
                    "text": "`x % 58`",
                    "is_correct": false
                  },
                  {
                    "id": "a1514915226008",
                    "text": "`x % 60`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 478326,
              "key": "9aad107a-f52d-4263-84fd-a6f98f438796",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## OK, but what is it good for?\nHow would we actually use this in some code? Here's one way: Modulo is really common in a particular pattern with `for` and `if`. Here's an example:\n\n```python\nfor n in range(12):\n   if n % 3 == 0:\n      draw_triangle()\n   else:\n      draw_square()\n```\n\nThis loop will run 12 times. When `n` is 0, 3, 6, or 9, the result will be 0. And that means the `draw_triangle` function will be called. When `n` is 1, 2, 4, 5, 7, 8, 10, or 11, the `draw_square` function will be called.\n\nIn other words, this is the same as (but much shorter than) the following code ‚Äî\n\n```python\ndraw_triangle()\ndraw_square()\ndraw_square()\n\ndraw_triangle()\ndraw_square()\ndraw_square()\n\ndraw_triangle()\ndraw_square()\ndraw_square()\n\ndraw_triangle()\ndraw_square()\ndraw_square()\n```\nAgain, notice the repeating pattern that we can create by using modulo!",
              "instructor_notes": ""
            },
            {
              "id": 478462,
              "key": "407ba133-07e4-426a-92f8-1b5df1d20590",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "407ba133-07e4-426a-92f8-1b5df1d20590",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code in the workspace below to see the turtle draw a string of beads.",
                "Modify the code so that the beads alternate in color between red and blue. Use the `%` modulo operation.",
                "**Run** it again to see it work!"
              ],
              "positive_feedback": "**Great!** Using modulo this way is really common any time a program needs to alternate between doing two or more different kinds of things in a loop.",
              "video_feedback": null,
              "description": "It's time to try it out for yourself! In the workspace below, you'll find code that draws a chain of beads. Currently, all of the beads are red, except the 6th bead (which is blue).\n\nChange the code so that the turtle draws an alternating chain of red and blue beads.\n\nThe part you'll want to change is in the main loop that starts on line **23**.\n\n**A reminder:** Some of the exercises we throw at you are quite challenging. As always, remember that it's good to put in your best effort, but it's also totally OK to check out the solution! The purpose of these exercises is to learn, not to prove that you already know how to do the thing! So give it a try, but don't drive yourself crazy. üôÇ"
            },
            {
              "id": 467931,
              "key": "4fc665d3-4d36-4f1e-98b1-2a1088b622a7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "94354ddf-4c9b-4287-b95e-26da5d36dd77",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/10_beads.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/10_beads.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 671125,
              "key": "8d3d3b4a-dd94-4451-b9d1-958fae805644",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 671124,
              "key": "a32427f1-454f-4e14-82f0-2b34961893ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\nHere is one way to make alternating red and blue beads:\n```python\n# Draw ten beads.\nfor n in range(10):\n    if n % 2 == 0:\n        t.color(\"red\")\n    else:\n        t.color(\"blue\")\n    bead(t)\n    t.forward(40)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478489,
          "key": "b77dac31-bdcf-4726-b5e7-8ec3b6563bd6",
          "title": "Modulo (2/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b77dac31-bdcf-4726-b5e7-8ec3b6563bd6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675109,
              "key": "f779f6c3-13c1-432e-9707-0100c1cff8f2",
              "title": "Python:  If And Modulo, Turtle Draws Staircase",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LIPizPJKKjM",
                "china_cdn_id": "LIPizPJKKjM.mp4"
              }
            },
            {
              "id": 495674,
              "key": "04801a37-3384-4d62-bfc2-7cb7b11e7fac",
              "title": "Staircase challenge",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "04801a37-3384-4d62-bfc2-7cb7b11e7fac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Write code in the workspace to draw a staircase pattern.",
                "Make sure your code contains _only one_ use of the `forward` method.",
                "**Run** your code to test it!",
                "Compare your code to the instructor's version at the bottom of the page."
              ],
              "positive_feedback": "**Great!** I think you've mastered using modulo in loops.",
              "video_feedback": null,
              "description": "In the workspace below, draw a staircase pattern like the one above. But do it with _only one_ use of the `forward` method in your code. This can be done! \n\nIf you get stuck, you can check out our solution below the workspace.\n\nCheck off these activities as you complete them."
            },
            {
              "id": 495665,
              "key": "c571ccf1-0c10-405d-87d4-b84cbfc20cbe",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "e6bc1861-82b0-41f8-9fe6-c3cfb010aade",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/11b_stairs.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/11b_stairs.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 671135,
              "key": "82236ce0-34cc-41df-a69e-e6aa70dce5d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 671132,
              "key": "e6f75c57-cf7e-4b4f-a8ff-a04c104310b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one solution to the staircase challenge. Notice that there's only one use of `forward` ‚Äî¬†we're using `step % 2` to switch between directions.\n\n```python\nimport turtle\nt = turtle.Turtle()\nt.width(5)\nt.color(\"limegreen\")\n\nfor step in range(21):\n  t.forward(10)  # just one!\n\n  # Alternate turning left and right.\n  if step % 2 == 0:\n    t.left(90)\n  else:\n    t.right(90)\n\nt.hideturtle()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 728604,
          "key": "3118c08c-4cb0-4dbe-a64e-8f580f9c8294",
          "title": "Modulo (3/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3118c08c-4cb0-4dbe-a64e-8f580f9c8294",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 728609,
              "key": "507e07cf-426b-40be-9854-99daede67195",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modulo (3/3)\n\nIn the last couple exercises, you used `%` to alternate between _two_ things‚Äîchoosing between left or right, or choosing between `\"red\"` and `\"blue\"`.\n\nTo do that, you used code like this:\n\n```python\nif n % 2 == 0:\n    t.color(\"red\")\n```\nBut modulo isn't limited to patterns with just two possibilities. You can use it to create patterns that repeat every 3rd number, or every 5th number, or every 1000th number!\n\nFor example, here's a 12-sided shape (a dodecagon) that has a repeating pattern of three colors:",
              "instructor_notes": ""
            },
            {
              "id": 728615,
              "key": "39b341ce-8e2c-46eb-907d-de2873666997",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5bac2259_dodecagon-roy/dodecagon-roy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/39b341ce-8e2c-46eb-907d-de2873666997",
              "caption": "",
              "alt": "A dodecagon with sides that cycle through red, orange, and yellow colors.",
              "width": 217,
              "height": 211,
              "instructor_notes": null
            },
            {
              "id": 728617,
              "key": "e7338bbd-a72b-4a51-b185-fb2ba3c2444c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The code for drawing a dodecagon is in the workspace below. See if you can get it to have the same colors as shown above.",
              "instructor_notes": ""
            },
            {
              "id": 728608,
              "key": "d6d44bd0-c205-4b6e-b10c-5276c797ff90",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view7brzsqbllti",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-sel9byomzo",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 728620,
              "key": "3c2029a4-9a93-4324-b856-a2d7f9d766bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 728616,
              "key": "a8d363fb-ef38-49e7-9460-7e34b738e1af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\n\nt = turtle.Turtle()\nt.width(5)\n\nfor n in range(12):\n    t.color(\"gray\")\n    if n % 3 == 0:\n        t.color(\"red\")\n    if n % 3 == 1:\n        t.color(\"orange\")\n    if n % 3 == 2:\n        t.color(\"yellow\")\n    t.forward(50)\n    t.right(360/12)\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478959,
          "key": "432cba4c-012f-4680-8e32-5ad7a1541214",
          "title": "Fizz Buzz, turtle style",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "432cba4c-012f-4680-8e32-5ad7a1541214",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675115,
              "key": "a3fbd777-55e9-4ba0-989b-60375e293350",
              "title": "Python: Fizzing And Buzzing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-uSNPbUdSag",
                "china_cdn_id": "-uSNPbUdSag.mp4"
              }
            },
            {
              "id": 728874,
              "key": "927bb1d6-0214-47f7-a770-ce80afebe8ff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The rules\n\nBefore you start coding, let's make sure the basic idea of Fizz Buzz is clear. You count up through a series of numbers (**0, 1, 2, 3, 4, 5 ... **) and for each number:\n\n* If the number is evenly divisible by **3**, you say **\"Fizz\"**\n* If the number is evenly divisible by **5**, you say **\"Buzz\"**\n* If the number is evenly divisible by both **3** _and_ **5**, you say **\"FizzBuzz\"**\n\n## What does \"evenly divisible\" mean?\nWhen we say \"evenly divisible\", we just mean that we can divide the one number by the other and not get any remainder.\n\nFor example, **6** is evenly divisible by **3**. We can think of **6** as **3 + 3**, so if we divide it by **3** there isn't going to be any remainder left over.\n\nIn contrast, **7** is _not_ evenly divisible by **3**. We can think of **7** as **3 + 3 + 1**. So if we divide it up into groups of **3**, we still have that extra **1** left over.",
              "instructor_notes": ""
            },
            {
              "id": 486241,
              "key": "a3a84df9-d450-4e54-ba6a-eec99abbc515",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a3a84df9-d450-4e54-ba6a-eec99abbc515",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Three students are trying to play Fizz Buzz. Which one got it right?",
                "answers": [
                  {
                    "id": "a1513611590986",
                    "text": "Alice says, \"1, 2, fizz, 4, 5, fizz, 7, 8, fizz, buzz, 11, 12, 13, 14, fizzbuzz.\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1513611621269",
                    "text": "Bob says, \"1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, buzz, 13, 14, fizzbuzz.\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1513611621935",
                    "text": "Carla says, \"1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz.\"",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 728880,
              "key": "7cc497f2-cb46-4753-b2a7-364ab658dad2",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7cc497f2-cb46-4753-b2a7-364ab658dad2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some numbers. Match them up according to the _Fizz Buzz_ rules!"
                },
                "concepts_label": "Number",
                "answers_label": "What you would say",
                "concepts": [
                  {
                    "text": "`3`",
                    "correct_answer": {
                      "id": "a1538092591515",
                      "text": "\"Fizz\""
                    }
                  },
                  {
                    "text": "`4`",
                    "correct_answer": {
                      "id": "a1538092698992",
                      "text": "`4`"
                    }
                  },
                  {
                    "text": "`5`",
                    "correct_answer": {
                      "id": "a1538092749096",
                      "text": "\"Buzz\""
                    }
                  },
                  {
                    "text": "`6`",
                    "correct_answer": {
                      "id": "a1538092766234",
                      "text": "\"Fizz\""
                    }
                  },
                  {
                    "text": "`15`",
                    "correct_answer": {
                      "id": "a1538092768466",
                      "text": "\"FizzBuzz\""
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538092698992",
                    "text": "`4`"
                  },
                  {
                    "id": "a1538092749096",
                    "text": "\"Buzz\""
                  },
                  {
                    "id": "a1538092766234",
                    "text": "\"Fizz\""
                  },
                  {
                    "id": "a1538092835865",
                    "text": "`5`"
                  },
                  {
                    "id": "a1538092768466",
                    "text": "\"FizzBuzz\""
                  },
                  {
                    "id": "a1538092829657",
                    "text": "`3`"
                  },
                  {
                    "id": "a1538092838984",
                    "text": "\"FizzBuzz\""
                  },
                  {
                    "id": "a1538092591515",
                    "text": "\"Fizz\""
                  }
                ]
              }
            },
            {
              "id": 728890,
              "key": "bd60cf4c-2f1c-45ee-926c-80b69cfb9e2d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bd60cf4c-2f1c-45ee-926c-80b69cfb9e2d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "In order to write the Fizz Buzz code, we are going to need some way of identifying whether a number is evenly divisible by `3` or `5` (or neither). How are we going to do that?\n\nThe trick is to use the modulo operater `%`. To see how that works, let's take the same numbers from the exercise above, and try doing `% 3` on those numbers. What results do you get for each?"
                },
                "concepts_label": "Modulo operation",
                "answers_label": "Result (remainder)",
                "concepts": [
                  {
                    "text": "`3 % 3`",
                    "correct_answer": {
                      "id": "a1538093483035",
                      "text": "`0`"
                    }
                  },
                  {
                    "text": "`4 % 3`",
                    "correct_answer": {
                      "id": "a1538093515402",
                      "text": "`1`"
                    }
                  },
                  {
                    "text": "`5 % 3`",
                    "correct_answer": {
                      "id": "a1538093516427",
                      "text": "`2`"
                    }
                  },
                  {
                    "text": "`6 % 3`",
                    "correct_answer": {
                      "id": "a1538093517226",
                      "text": "`0`"
                    }
                  },
                  {
                    "text": "`15 % 3`",
                    "correct_answer": {
                      "id": "a1538093531770",
                      "text": "`0`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538093531770",
                    "text": "`0`"
                  },
                  {
                    "id": "a1538093517226",
                    "text": "`0`"
                  },
                  {
                    "id": "a1538093515402",
                    "text": "`1`"
                  },
                  {
                    "id": "a1538093516427",
                    "text": "`2`"
                  },
                  {
                    "id": "a1538093483035",
                    "text": "`0`"
                  }
                ]
              }
            },
            {
              "id": 728942,
              "key": "0381a3b5-9fb9-40c1-9b27-c2f8909a6850",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If we put this in an `if` statement, we can do something like this:\n```python\nif x % 3 == 0:\n    # Code here for whatever you want to do when numbers are evenly divisible by 3.\n```\nWhatever code you place inside this `if` statement will only get run when the number assigned to `x` is evenly divisible by 3. And of course,  you can create a similar statement to check whether a number is divisible by 5.",
              "instructor_notes": ""
            },
            {
              "id": 730340,
              "key": "6d6c97c2-4e36-468e-ad0b-a6a3e2821aaa",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6d6c97c2-4e36-468e-ad0b-a6a3e2821aaa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some tricky ones! \n\nSuppose that we set `x` equal to `15` (which is divisible by both `3` _and_ `5`).\n\nFor each of these pieces of code, what will happen?"
                },
                "concepts_label": "Code",
                "answers_label": "Does it work?",
                "concepts": [
                  {
                    "text": "```python\nif x % 5 == 0:\n    # Buzz\n```",
                    "correct_answer": {
                      "id": "a1538771157579",
                      "text": "Buzz"
                    }
                  },
                  {
                    "text": "```python\nif x % 3 == 0:\n    # Fizz\nelse x % 5 == 0:\n    # Buzz\n```",
                    "correct_answer": {
                      "id": "a1538772423911",
                      "text": "Fizz"
                    }
                  },
                  {
                    "text": "```python\nif x % 3 == 0:\n    # Fizz\n    if x % 5 == 0:\n        # Buzz\n```",
                    "correct_answer": {
                      "id": "a1538773090266",
                      "text": "FizzBuzz"
                    }
                  },
                  {
                    "text": "```python\nif x % 5 == 0:\n    # Buzz\n    if x % 3 == 0:\n        # Fizz\n```",
                    "correct_answer": {
                      "id": "a1538773197587",
                      "text": "BuzzFizz"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538773197587",
                    "text": "BuzzFizz"
                  },
                  {
                    "id": "a1538772423911",
                    "text": "Fizz"
                  },
                  {
                    "id": "a1538771157579",
                    "text": "Buzz"
                  },
                  {
                    "id": "a1538773090266",
                    "text": "FizzBuzz"
                  }
                ]
              }
            },
            {
              "id": 730343,
              "key": "221bb527-867b-44ba-9ee6-bf7ce9aa25b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## This _and_ that\n\nNotice that the last two options in the above exercise were both _nested_ `if` statements. This is one way we can check for a number that is divisible by both `3` _and_ `5`:\n\n```python\nif x % 3 == 0:\n    # Fizz\n    if x % 5 == 0:\n        # Buzz\n```\n\nFirst, we check if the number is divisible by `3`. If it's _not_, then the whole structure gets skipped over (none of the code inside gets run!). But if the number *is* divisible by `3`, then it will _also_ check whether the number is divisible by `5`.\n\nNested statements are often difficult to wrap your brain around‚Äîso it's normal to struggle with these when you're first learning. But they *do* get easier with practice!",
              "instructor_notes": ""
            },
            {
              "id": 728944,
              "key": "2790d6bf-fe9d-414d-a180-e8045745076b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## And now, with turtles!\nOK, so now let's do a version of Fizz Buzz using turtles, like Kelly and Karl showed in the video. Your goal is to make a string of beads that looks like this:",
              "instructor_notes": ""
            },
            {
              "id": 480758,
              "key": "29b6c85e-d7c4-4303-9b02-33f7108611a2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a330e60_screen-shot-2017-12-14-at-3.50.33-pm/screen-shot-2017-12-14-at-3.50.33-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/29b6c85e-d7c4-4303-9b02-33f7108611a2",
              "caption": "",
              "alt": "Beads repeating in the Fizz Buzz pattern. Notice how every third space has a red bead, and every fifth space has a green bead. The green beads fit inside the red beads so you can tell a \"Fizz Buzz\" from a \"Fizz\" or \"Buzz\".",
              "width": 372,
              "height": 44,
              "instructor_notes": null
            },
            {
              "id": 728960,
              "key": "20290dbc-da75-4807-b450-8f41da24a13b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are 16 beads here, numbered **0** through **15**. Notice the pattern:\n* If the number is divisible by **3,** then the bead is **red** (a **\"Fizz\"**).\n* If the number is divisible by **5**, then the bead is **green** (a **\"Buzz\"**)\n* If the number is divisible by **3 _and_ 5,** then there's a **green bead *in* a red bead** (a **\"FizzBuzz\"**)",
              "instructor_notes": ""
            },
            {
              "id": 486450,
              "key": "05996023-a3e4-4e43-ad37-75537cbfb0c0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "05996023-a3e4-4e43-ad37-75537cbfb0c0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code to see what it does.",
                "Inside the `for` loop, add `if` / `else` statements that check if the current `num` is divisible by `3` or `5`. You'll probably need to use some nesting here.",
                "Inside the `if` statements, call the `fizz` or `buzz` functions.",
                "Compare your result with the picture above. Did you get the same pattern?"
              ],
              "positive_feedback": "**Awesome!**\n\nMost folks find this to be a pretty tricky one!",
              "video_feedback": null,
              "description": "In the workspace, you'll see that there's already code for drawing a string of 16 beads (numbered **0** through **15**).\n\nYou'll also see that there's a `fizz` function for drawing red beads, and a `buzz` function for drawing green beads."
            },
            {
              "id": 480411,
              "key": "cdf08e19-cab0-4545-a654-7055f2ebf439",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "a48d3699-5c52-4c4f-b029-ca80b7649f30",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/16_fizzbuzz.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/16_fizzbuzz.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 728707,
              "key": "42e43585-47b4-4a37-a230-1f199f9b50d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 728706,
              "key": "2fe377f4-57b2-4a3a-92af-d593fdd285ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\n\ndef fizz(tur):\n    # A red square bead.\n    tur.color(\"red\")\n    tur.left(90)\n    for side in [10, 20, 20, 20, 10]:\n        tur.forward(side)\n        tur.right(90)\n\ndef buzz(tur):\n    # A green hexagonal bead.\n    # Fits inside the red bead.\n    tur.color(\"green\")\n    tur.left(60)\n    for side in range(6):\n        tur.forward(10)\n        tur.right(60)\n    tur.right(60)\n\ndef plain(tur):\n    # A gray octagonal bead.\n    tur.color(\"gray\")\n    tur.left(90)\n    for side in [4, 8, 8, 8, 8, 8, 8, 8, 4]:\n        tur.forward(side)\n        tur.right(45)\n    tur.right(45)\n\n# Set up the turtle to draw beads.\nt = turtle.Turtle()\nt.speed(0)\nt.width(2)\nt.penup()\nt.back(180)  # Back up to make room!\nt.pendown()\n\nfor num in range(16):\n    if num % 3 == 0:\n        fizz(t)\n        if num % 5 == 0:\n            buzz(t)\n    else:\n        if num % 5 == 0:\n            buzz(t)\n        else:\n            plain(t)\n        \n    # Advance to the next bead spot.\n    t.color(\"gray\")\n    t.forward(22)\nt.hideturtle()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 727820,
          "key": "9ed16276-b268-4ed7-9132-619149bf34e4",
          "title": "Nice work!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ed16276-b268-4ed7-9132-619149bf34e4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 727822,
              "key": "fbf58e26-106b-479e-9ffe-aeed8964cfd6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Nice work! üí™\n\nThat \"Fizz Buzz\" exercise you just did may have seemed a little silly, but it's actually commonly used as an interview question for software engineering job candidates. It's usually done by having the program display numbers and words in text form ‚Äî but the turtle version here is mathematically equivalent to that.\n\nIt's considered a pretty challenging interview question. Many _computer science graduates_ don't succeed at it. Putting an `if` statement, with a modulo operator, inside a `for` loop, is actually quite a bit of complexity!",
              "instructor_notes": ""
            },
            {
              "id": 729218,
              "key": "29e7174b-074c-417a-966a-fc90dfc11224",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Compound statements reference sheet\n\nYou've now learned a few different types of **compound statements**. You can download a reference sheet for these [here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/September/5baed140_ipnd-reference-sheet-python-compound-statements/ipnd-reference-sheet-python-compound-statements.pdf), or by going to the **Resources** tab (on the left) at any time.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 675728,
          "key": "32aa2c07-803d-48a4-8bd8-760103c1b30c",
          "title": "Returning a value (1/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32aa2c07-803d-48a4-8bd8-760103c1b30c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 728129,
              "key": "d336de7b-8255-42a6-8fa2-37438d6e0f76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Returning a value\n\nIn the next video, you'll see some tables that look like this:",
              "instructor_notes": ""
            },
            {
              "id": 728130,
              "key": "b6bd0a4a-0ac6-4f76-b218-5d795e4bec26",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baa6795_variables-table-02/variables-table-02.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b6bd0a4a-0ac6-4f76-b218-5d795e4bec26",
              "caption": "",
              "alt": "A table showing some variables and their associated values.",
              "width": 300,
              "height": 280,
              "instructor_notes": null
            },
            {
              "id": 728131,
              "key": "d936e756-63ce-4909-a80e-9b6b9d6b86c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We don't want this visual to confuse you. This is just showing some different variables (which you'll see in the code during the video), and what values those variables have been assigned in the computer's memory.\n\nSo in the above example, the table says that there are two _global_ variables, named `emily` and `distance`. And it says that `emily` refers to a turtle object, while `distance` refers to the number `50`.\n\nIn the video, we'll show both the tables and the code that they go with. That can be a lot of information to look at all at once, so it may help to pause the video here and there to give yourself time to look everything over.",
              "instructor_notes": ""
            },
            {
              "id": 675729,
              "key": "2a972b91-8c7e-4b29-84f7-fe78d4823ce1",
              "title": "Python: Returning A Value",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AT54fz6fqOg",
                "china_cdn_id": "AT54fz6fqOg.mp4"
              }
            },
            {
              "id": 728134,
              "key": "03c96a4f-eea5-4b8b-834d-659c0e6ed277",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This may seem complicated, but the basics of a `return` statement are actually very simple. For example, here is a function that simply returns the number `10`:\n\n```python\ndef simple_function():\n    return 10\n\ndistance = simple_function()\n```\n\nWhen we say that it \"returns the number `10`\" what we mean is this: This code works the same _as if_ the function call, `simple_function()`, were replaced by the number `10`.\n\nIn other words, this ...\n\n```python\ndistance = simple_function()\n```\n... is equivalent to this:\n```python\ndistance = 10\n```\n\nSo a `return` statement takes a value and _returns it back to the place from which the function was called._\n\nLet's look at some more examples.",
              "instructor_notes": ""
            },
            {
              "id": 728136,
              "key": "82962c7b-534b-44e9-8a82-96690da050c2",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "82962c7b-534b-44e9-8a82-96690da050c2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's some code:\n\n```python\nt.color(\"green\")\n```\n\nWhich of these pieces of code would have the exact same result?"
                },
                "concepts_label": "Code",
                "answers_label": "Same result or different?",
                "concepts": [
                  {
                    "text": "```python\ndef make_it_green():\n    return \"green\"\n\ncolor = make_it_green()\nt.color(color)\n```",
                    "correct_answer": {
                      "id": "a1537896776018",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\ndef make_it_green():\n    return \"green\"\n\nt.color(make_it_green())\n```",
                    "correct_answer": {
                      "id": "a1537896793238",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\ndef make_it_green():\n    \"green\"\n\nt.color(make_it_green())\n```",
                    "correct_answer": {
                      "id": "a1537896988660",
                      "text": "Different"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1537896776018",
                    "text": "Same"
                  },
                  {
                    "id": "a1537896988660",
                    "text": "Different"
                  },
                  {
                    "id": "a1537896793238",
                    "text": "Same"
                  }
                ]
              }
            },
            {
              "id": 675743,
              "key": "ab46cbb4-a18a-410f-9eef-753dce61e9a0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ab46cbb4-a18a-410f-9eef-753dce61e9a0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will this code do?\n\n```\nimport turtle\n\ndef square(number):\n    return number * number\n\nmarissa = turtle.Turtle()\ndistance = square(8)\nmarissa.forward(distance)\n```",
                "answers": [
                  {
                    "id": "a1531765494772",
                    "text": "Create a turtle and have it draw a square.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531765577682",
                    "text": "Create a turtle and have it go forward 8 pixels.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531765578638",
                    "text": "Create a turtle and have it go forward 16 pixels.",
                    "is_correct": false
                  },
                  {
                    "id": "a1531765638913",
                    "text": "Create a turtle and have it go forward 64 pixels.",
                    "is_correct": true
                  },
                  {
                    "id": "a1531765754312",
                    "text": "Nothing; this code contains an error.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 728246,
              "key": "f9d84b6d-3fec-454a-a8d1-bbc8eab3c16c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f9d84b6d-3fec-454a-a8d1-bbc8eab3c16c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add a `return` statement to the `square` function‚Äîit should take whatever input is given to the function, square it, and then return the result.",
                "Complete the line `angle = ` by adding a call to the `square` function (use `n` as the argument).",
                "**Run** the code to see the turtle draw a weird squiggly shape."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, we've written some code that draws a very strange (and fancy-looking) shape. But the code isn't finished‚Äîcan you get it working by completing the `square` function? It's just like the one above."
            },
            {
              "id": 728244,
              "key": "ba5d7d0f-1531-439e-9939-8e05d7e746fb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewuwdc6zhgn8",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-mg5k7gp1b4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 728257,
              "key": "11ef1df0-3915-4d8b-aa82-d12c057aa32e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 728247,
              "key": "250264b8-341b-4ab4-b977-31f194045ec2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\nt = turtle.Turtle()\nt.color(\"white\")\nt.width(1)\nt.speed(0)\nt.hideturtle()\n\ndef square(number):\n    return number * number\n\nfor n in range(540):\n    angle = square(n)\n    t.right(angle + .5)\n    t.forward(5)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 728261,
          "key": "caf9196f-3a92-44e6-89b7-2d5a0d102be2",
          "title": "Returning a value (2/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "caf9196f-3a92-44e6-89b7-2d5a0d102be2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 728263,
              "key": "6507a2b0-5a7c-4722-a3a5-127efa2648b2",
              "title": "Python: Returning A Value, Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "f7UawEhi3Xo",
                "china_cdn_id": "f7UawEhi3Xo.mp4"
              }
            },
            {
              "id": 728266,
              "key": "25b90503-bcbc-44a4-b864-55a78ab0b6bd",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25b90503-bcbc-44a4-b864-55a78ab0b6bd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Complete the `super_reptile` function.",
                "Complete the line `clark = ` by adding a call to the `super_reptile` function."
              ],
              "positive_feedback": "It's a bird ... it's a plane ... no, it's a turtle data object!",
              "video_feedback": null,
              "description": "In the workspace below, you can play around with Karls code.\n\nCreate your own super reptile by completing the function and then calling it."
            },
            {
              "id": 728269,
              "key": "5b724ba5-b651-4555-b48b-b0a6a9b75fff",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewvmd277wtn9",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-isx7wqdhzd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 728389,
              "key": "112351b0-c566-4c07-bf60-098b5576052a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 728267,
              "key": "3b4d9bb1-c344-442b-940f-5873800ea77c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's Karl's full code, for reference:\n\n```python\nimport turtle\n\ndef super_reptile():\n    t = turtle.Turtle()\n    t.width(10)\n    t.color(\"green\")\n    return t\n\nclark = super_reptile()\nclark.forward(100)\nclark.left(45)\nclark.forward(100)\n# up, up, and away!\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466656,
          "key": "fb9d3eae-15cc-47f7-af5a-ea38c3c95842",
          "title": "Returning a value (3/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fb9d3eae-15cc-47f7-af5a-ea38c3c95842",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675113,
              "key": "dbd799cf-b8c9-4e0e-b5df-e481dca4253c",
              "title": "Python: You Only Return Once",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rSTfCQ_CTt4",
                "china_cdn_id": "rSTfCQ_CTt4.mp4"
              }
            },
            {
              "id": 486048,
              "key": "28f251fe-855c-4695-b7e9-d25b04089635",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "28f251fe-855c-4695-b7e9-d25b04089635",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think this function will return?\n```python\ndef mystery():\n    for word in [\"love\", \"peace\", \"kittens\"]:\n        return word\n    return \"doom\"\n```",
                "answers": [
                  {
                    "id": "a1513385695662",
                    "text": "`\"love\"`",
                    "is_correct": true
                  },
                  {
                    "id": "a1513385784036",
                    "text": "`\"peace\"`",
                    "is_correct": false
                  },
                  {
                    "id": "a1513385784759",
                    "text": "`\"kittens\"`",
                    "is_correct": false
                  },
                  {
                    "id": "a1513385785541",
                    "text": "`\"doom\"`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 505010,
              "key": "9485e159-968c-4c52-802f-612d4f6d5ffe",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9485e159-968c-4c52-802f-612d4f6d5ffe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code to see what it does now.",
                "Read the `bead_color` function.",
                "Modify that function so that the colors of the beads will match the picture.",
                "**Run** the code again to test it!"
              ],
              "positive_feedback": "**Great!** Controlling the return value of a function is a big step toward writing larger-scale code.",
              "video_feedback": null,
              "description": "**Run** the code in the workspace below, then take a close look at the function `bead_color`, and the code that calls it. See if you can modify this function so that the beads will be red, green, and blue, as in the picture.\n\nCheck off these activities as you complete them ‚Äî"
            },
            {
              "id": 486051,
              "key": "51654e3f-6386-4c73-b02d-8ccbee2110cb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a347119_screen-shot-2017-12-15-at-5.03.58-pm/screen-shot-2017-12-15-at-5.03.58-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/51654e3f-6386-4c73-b02d-8ccbee2110cb",
              "caption": "_Change the code so it draws beads with red, green, and blue colors._",
              "alt": "Ten beads: red, green, blue, red, green, blue, red, green, blue, red",
              "width": 419,
              "height": 65,
              "instructor_notes": null
            },
            {
              "id": 467933,
              "key": "b473b6f2-4ff9-4efd-b9ba-475f89cd21b9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "ee304948-36b5-45ed-88aa-44bb2baf4d81",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/11_beads.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/11_beads.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 671012,
              "key": "ffc1e758-adea-41a0-8007-d2bd1e393503",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 671013,
              "key": "c31a2aa3-d87a-47b1-a143-00b950ebce76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's one way to write the `bead_color` function:\n\n```python\ndef bead_color(num):\n    if num % 3 == 0:\n        return \"red\"\n    if num % 3 == 1:\n        return \"green\"\n    if num % 3 == 2:\n        return \"blue\"\n```\n\nAnd here's a trickier version that uses `else` (and some nesting):\n\n\n```python\ndef bead_color(num):\n    if num % 3 == 0:\n        return \"red\"\n    else:\n        if num % 3 == 1:\n            return \"green\"\n        else:\n            return \"blue\"\n```\n\nWhy does this work? If `num` is an integer, the only possible values for `num % 3` are `0`, `1`, and `2`. So by the end of this function, after we've handled the cases for `0` and `1`, we know the only remaining possibility is `2`. That's why we can just use an `else:` instead of a third `if` statement.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 467942,
          "key": "d3fc830d-e947-4751-9fef-773136e77d98",
          "title": "Passing arguments in loops (1/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d3fc830d-e947-4751-9fef-773136e77d98",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675114,
              "key": "a199c2a4-9e7d-4517-a5e3-8e6990d8761d",
              "title": "Python: Looping Around Things",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "v7on5PvGOXE",
                "china_cdn_id": "v7on5PvGOXE.mp4"
              }
            },
            {
              "id": 729104,
              "key": "29a222c7-3564-41e8-a1b9-73e54df5b709",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n>**Key concept:** When we call a function from inside a loop, we can use the loop variable as input for that function. This allows us to call the same function repeatedly, but pass it a different input each time.\n\nYou can get a feel for what this means by experimenting with the `star` function that Karl showed in the video. You can find the function in the workspace at the bottom of the page. Here are some different things to try with it ...",
              "instructor_notes": ""
            },
            {
              "id": 729107,
              "key": "6d26070e-b208-4c7d-a62a-92f73e46396f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Simply call the function (not in a loop)\n\nFirst, just try adding a function call. Here's one that draws a white, five-pointed star:\n\n```python\nstar(\"white\", 5, 50, 0, 0)\n```\n\nGive it a try‚Äîscroll down and copy this into the workspace!\n",
              "instructor_notes": ""
            },
            {
              "id": 478707,
              "key": "2624035f-d798-42af-bb84-039663ce8d4f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2624035f-d798-42af-bb84-039663ce8d4f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "And here's another function call you can try:\n```python\nstar(\"blue\", 7, 50, 45, 100)\n```\nWhat does it do?\n\nThere are a bunch of arguments in this _call_, so you may need to experiment a little to get familiar with what each one does.",
                "answers": [
                  {
                    "id": "a1513241976745",
                    "text": "A seven-pointed blue star in the middle of the screen.",
                    "is_correct": false
                  },
                  {
                    "id": "a1513242007505",
                    "text": "A seven-pointed blue star in the top right quarter of the screen.",
                    "is_correct": true
                  },
                  {
                    "id": "a1513242008571",
                    "text": "A 50-pointed star with 7 sides blue and the others red, off to one side of the screen",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 729115,
              "key": "7cfce0f3-2897-432c-8457-505391477c2d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## An arc of stars\n\nNow, let's try drawing an arc of stars, like this:\n",
              "instructor_notes": ""
            },
            {
              "id": 729121,
              "key": "7f407aa0-8a29-4140-9a73-8a103091fb7b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baeae1e_arc-of-stars/arc-of-stars.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7f407aa0-8a29-4140-9a73-8a103091fb7b",
              "caption": "",
              "alt": "An arc of red five-pointed stars.",
              "width": 317,
              "height": 208,
              "instructor_notes": null
            },
            {
              "id": 729123,
              "key": "0a08d3cf-cb3b-4586-a682-766dc9979d70",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0a08d3cf-cb3b-4586-a682-766dc9979d70",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Each time we draw a star in this arc, almost everything stays the same‚Äîbut one thing does change. What changes?\n",
                "answers": [
                  {
                    "id": "a1538174525762",
                    "text": "The color",
                    "is_correct": false
                  },
                  {
                    "id": "a1538174532716",
                    "text": "The number of points in the stars",
                    "is_correct": false
                  },
                  {
                    "id": "a1538174536313",
                    "text": "The distance from the center (where the turtle starts out)",
                    "is_correct": false
                  },
                  {
                    "id": "a1538174547216",
                    "text": "The angle between each star",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 729124,
              "key": "f5fad99d-7eff-4c6b-98bd-ac6369e6756f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So we want to draw the same star repeatedly, but we want to change the angle the turtle turns each time.\n\nTo do that, we can create a list of the angles we want, and then use this in the loop:\n\n```python\nfor angle in [180, 135, 90, 45, 0]:\n    star(\"red\", 5, 50, angle, 100)\n```\n\nEach time through the loop, the `angle` variable will get a new number assigned to it (from the list), and we can then pass this to the `star` function when we call it.\n\nCopy this into the workspace and give it a try!",
              "instructor_notes": ""
            },
            {
              "id": 729125,
              "key": "3edd5f9d-a73d-44b7-83ca-7bc43c8c4fec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Starburst\n\nNow, see if you can draw something like this:\n",
              "instructor_notes": ""
            },
            {
              "id": 478717,
              "key": "4e1673bc-2b2f-4bc3-beb5-b7331dc9293a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a324465_screen-shot-2017-12-14-at-1.28.41-am/screen-shot-2017-12-14-at-1.28.41-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4e1673bc-2b2f-4bc3-beb5-b7331dc9293a",
              "caption": "",
              "alt": "A starburst composed of ten five-sided stars. Five of the stars are larger, further from the center, and red; the other five are smaller, closer, and blue.",
              "width": 356,
              "height": 228,
              "instructor_notes": null
            },
            {
              "id": 729127,
              "key": "c1c69f50-c41b-4997-a3f6-48853a53a7e5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you like, you can change the turtle's speed to `0`, so that it draws faster (see line **7** in the code).",
              "instructor_notes": ""
            },
            {
              "id": 478719,
              "key": "700cfe6d-e1f2-4cab-a5bf-26a81fd1822d",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "700cfe6d-e1f2-4cab-a5bf-26a81fd1822d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add a second `for` loop, similar to the one for drawing the arc of red stars.",
                "Inside the loop, modify the arguments being passed to the function so that it draws smaller, blue stars."
              ],
              "positive_feedback": "**Awesome!**",
              "video_feedback": null,
              "description": "Modify the code you have in order to add the second arc of blue stars."
            },
            {
              "id": 478714,
              "key": "b8171404-71e5-4f13-bcc7-e89b2c59182f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "3fca59dc-e14e-454b-8a34-2bab5ff1ae32",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/12_starburst.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/12_starburst.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729129,
              "key": "09ff84bd-4411-46e0-be2b-6e586df5f31f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729128,
              "key": "9ef71816-5b6e-447a-82d4-f7eeb1162e5e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n```python\nimport turtle\n\ndef star(color, sides, length, angle, distance):\n    galileo = turtle.Turtle()\n    galileo.color(color)  # colorful!\n    galileo.width(5)  # visible!\n    galileo.speed(0)  # fast!\n    galileo.penup()\n    galileo.left(angle)  # away from center\n    galileo.forward(distance)\n    galileo.pendown()  # start drawing\n    for side in range(sides):\n        galileo.forward(length)\n        galileo.left(720 / sides)\n    galileo.hideturtle()  # just the star\n    \nfor angle in [180, 135, 90, 45, 0]:\n    star(\"red\", 5, 50, angle, 100)\n         \nfor angle in [180, 135, 90, 45, 0]:\n    star(\"blue\", 5, 30, angle, 60)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 729131,
          "key": "67f11f3a-3590-4bd3-8baa-789d778d4dcb",
          "title": "Passing arguments in loops (2/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "67f11f3a-3590-4bd3-8baa-789d778d4dcb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 729132,
              "key": "c734f593-24e6-4ddb-a018-0a76ecb91fc0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Passing arguments in loops (2/3)",
              "instructor_notes": ""
            },
            {
              "id": 729186,
              "key": "b8de3ef5-65fc-4b1b-8f3e-8eab4a431ecf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's one more starburst to try:",
              "instructor_notes": ""
            },
            {
              "id": 729187,
              "key": "d94c8df3-97af-49bb-b2e5-eef4798eafde",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baeb9ec_starburst-circle/starburst-circle.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d94c8df3-97af-49bb-b2e5-eef4798eafde",
              "caption": "",
              "alt": "A circle of small white stars inside a circle of violet stars.",
              "width": 320,
              "height": 305,
              "instructor_notes": null
            },
            {
              "id": 729189,
              "key": "455b6ce3-91e5-433a-9589-ffa04ea46f55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You'll find the code from the last page in the workspace. Modify the two `for` loops to see if you can get a pattern like this.\n\n(The color on the big stars is `\"violet\"`.)",
              "instructor_notes": ""
            },
            {
              "id": 729177,
              "key": "46e33abf-11f0-4342-8d4b-b78c6212beed",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewlq812ag8hnc",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-kwn9njqnpd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729197,
              "key": "de435de0-ea7c-4744-b2a6-1480611df70c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729199,
              "key": "c5687725-b63c-47e1-9f4e-0a289e8a76f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere are the loops we used:\n\n```python\nfor angle in [315, 270, 225, 180, 135, 90, 45, 0]:\n    star(\"violet\", 5, 50, angle, 100)\n\nfor angle in [315, 270, 225, 180, 135, 90, 45, 0]:\n    star(\"white\", 5, 30, angle, 60)\n```",
              "instructor_notes": ""
            },
            {
              "id": 729207,
              "key": "73024a68-3ca7-466e-bf65-9cb1be4e91af",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "73024a68-3ca7-466e-bf65-9cb1be4e91af",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "So far, we've kept all the stars the same, and just used the list in the `for` loop to change the angle between the stars.\n\nBut we could use that list to change whatever we like‚Äîthe color, number of points, size, and so on.\n\n Here are some examples. See if you can figure out what each one does.\n\n(You can try these in the workspace too!)"
                },
                "concepts_label": "Code",
                "answers_label": "What does it do?",
                "concepts": [
                  {
                    "text": "```python\nfor e in [\"violet\", \"pink\", \"white\"]:\n    star(e, 5, 50, 0, 0)\n```",
                    "correct_answer": {
                      "id": "a1538178342306",
                      "text": "Draw three stars with different colors."
                    }
                  },
                  {
                    "text": "```python\nfor e in [50, 100, 200]:\n    star(\"red\", 5, e, 0, 0)\n```",
                    "correct_answer": {
                      "id": "a1538179403971",
                      "text": "Draw three stars with different sizes."
                    }
                  },
                  {
                    "text": "```python\nfor e in [0, 70, 140]:\n    star(\"red\", 5, 50, 0, e)\n```",
                    "correct_answer": {
                      "id": "a1538179419546",
                      "text": "Draw three stars at different distances from the starting location."
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538179403971",
                    "text": "Draw three stars with different sizes."
                  },
                  {
                    "id": "a1538179419546",
                    "text": "Draw three stars at different distances from the starting location."
                  },
                  {
                    "id": "a1538178342306",
                    "text": "Draw three stars with different colors."
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 466657,
          "key": "606884ec-df10-42db-baed-9884ec58c2da",
          "title": "Passing arguments in loops (3/3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "606884ec-df10-42db-baed-9884ec58c2da",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 729217,
              "key": "5c1813bb-aa25-4bb1-8483-4433358b9431",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Passing arguments in loops (3/3)",
              "instructor_notes": ""
            },
            {
              "id": 729210,
              "key": "37ce0892-03be-4883-b18c-73e235ed5e27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We want you to be comfortable passing the loop variable as an argument to a function, so here's one more example ...\n\nIn the workspace near the bottom of this page, you'll find a function that draws polygons. You give it the number of sides and the length of the sides, and it draws the corresponding shape. (It's basically the same as our `draw_shape` function from earlier.)\n\nYour goal will be to use the function to draw this:\n",
              "instructor_notes": ""
            },
            {
              "id": 729211,
              "key": "8e04789e-a022-40f0-9768-f3ae7d7f6901",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5baec871_passing-polygons/passing-polygons.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8e04789e-a022-40f0-9768-f3ae7d7f6901",
              "caption": "",
              "alt": "Nested polygons from triangle to 14-gon.",
              "width": 168,
              "height": 159,
              "instructor_notes": null
            },
            {
              "id": 729212,
              "key": "ee7ac1f8-f9f5-43a2-a061-5d2d1bdbfcac",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ee7ac1f8-f9f5-43a2-a061-5d2d1bdbfcac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Just like with the starbursts, we can draw this shape by repeatedly calling the `polygon` function from inside a loop (and passing it the loop variable as one of the arguments).\n\nEach time we call the function, everything stays the same ... except for one thing. What changes?",
                "answers": [
                  {
                    "id": "a1538181350544",
                    "text": "The color.",
                    "is_correct": false
                  },
                  {
                    "id": "a1538181402208",
                    "text": "The length.",
                    "is_correct": false
                  },
                  {
                    "id": "a1538181402879",
                    "text": "The number of sides.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 729214,
              "key": "fe7977cf-c64f-4cb6-afed-63ff52e04cb1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Give it a try and see if you can draw the shape from the picture above. Here are a few tips:\n\n* So that you don't have to try to count them, there are **12** polygons in the image.\n* Notice that it starts with a _triangle_ as the innermost polygon.\n* This exercise is _very_ similar to the exercises with the `star` function on the previous pages!",
              "instructor_notes": ""
            },
            {
              "id": 467935,
              "key": "867e7208-57b8-471d-b887-bf9f668df783",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "49ae868b-e91a-47e8-ae12-7ca73a8ac8a0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/13_poly.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/13_poly.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729216,
              "key": "90d73dde-6410-4733-9320-c26d015c2cf7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729215,
              "key": "f60c2cf8-0583-4df1-b024-7666b03dce7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\n\ndef polygon(sides, length):\n  t = turtle.Turtle()\n  t.color(\"lime\")\n  t.speed(0)\n  angle = 360 / sides\n  for side in range(sides):\n    t.forward(length)\n    t.right(angle)\n  t.hideturtle()\n\nfor n in [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]:\n    polygon(n, 35)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466658,
          "key": "87d3129d-c6eb-4d9d-ac41-c301673a59e5",
          "title": "The random module",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "87d3129d-c6eb-4d9d-ac41-c301673a59e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675865,
              "key": "7645d11c-432d-445e-83e7-2a9ad96c6613",
              "title": "Python: The Random Module",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IPGCcHkgxUM",
                "china_cdn_id": "IPGCcHkgxUM.mp4"
              }
            },
            {
              "id": 486295,
              "key": "d55bbe80-a2f3-4621-aff8-df4e9c7d39ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `random.choice`\nHere's an example of using `random.choice`:\n\n```python\ncolor = random.choice([\"red\", \"green\", \"blue\"])\n```\nTo use the function, we simply _call_ it and pass it a list‚Äîin this case, a list of colors. The function then _returns_ a random item from the list. If we want to capture that returned value, we can assign it to a variable, like with `color`, above.\n\nHere's another example:\n\n```python\ncards = [\"ace\", 2, 3, 4, 5, 6, 7, 8, 9, \"jack\", \"queen\", \"king\"]\nmy_card = random.choice(cards)\n```\nHere, we first assign a list to the variable `cards`, and then pass this to the `random.choice` function. It then returns an item from the list, which gets assigned to the `my_card` variable.",
              "instructor_notes": ""
            },
            {
              "id": 729239,
              "key": "45e98377-2fba-4d69-89d5-6f38702b0644",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## `random.randint`\n\n`randint` stands for \"random integer\", because that's exactly what it does‚Äîit returns a random integer. Here's an example:\n\n```python\ndie_roll = random.randint(1, 6)\n```\n\nAs you can see, the function takes two arguments: the lower and upper bounds. It will then return a number at random from within that range. The function call above will generate a random number from 1 through 6‚Äîjust like rolling a six-sided die.",
              "instructor_notes": ""
            },
            {
              "id": 486296,
              "key": "b9cd376f-2b06-4c6f-9b5c-59a88aa4d520",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b9cd376f-2b06-4c6f-9b5c-59a88aa4d520",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In many board games, such as *Monopoly* or *Settlers of Catan*, players roll *two* six-sided dice and add the values together. Which of these Python expressions could we use to do this?",
                "answers": [
                  {
                    "id": "a1513622231277",
                    "text": "`random.randint(1, 12)`",
                    "is_correct": false
                  },
                  {
                    "id": "a1513622287026",
                    "text": "`random.randint(1, 6) + random.randint(1, 6)`",
                    "is_correct": true
                  },
                  {
                    "id": "a1513622299338",
                    "text": "`random.randint(1, 6) * 2`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 729236,
              "key": "0a5a094f-4bc9-4b75-b7aa-0ab179acf38a",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0a5a094f-4bc9-4b75-b7aa-0ab179acf38a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Your friend just tried to use the `random.randint` function, but they got this error:\n```\nNameError\nLine:12\nError: name 'random' is not defined\n```\nWhat's the most likely explanation?",
                "answers": [
                  {
                    "id": "a1538201605343",
                    "text": "They forgot to `import` the module before using it.",
                    "is_correct": true
                  },
                  {
                    "id": "a1538201705503",
                    "text": "They passed the function a bad argument.",
                    "is_correct": false
                  },
                  {
                    "id": "a1538201749728",
                    "text": "They forgot to assign the `random` result to a variable.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 729240,
              "key": "880d55ff-06db-4ce5-b695-c9f50c517a6f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "880d55ff-06db-4ce5-b695-c9f50c517a6f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Here's some code your friend wrote:\n\n```python\nimport turtle\n\nt = turtle.Turtle\n\nimport random\n\nt.forward(randint(100, 200))\n```\nBut when they try to run it, they get this error:\n\n```\nNameError\nLine: 7\nError: name 'randint' is not defined\n```\n\nWhat do you think the problem might be?",
                "answers": [
                  {
                    "id": "a1538203795090",
                    "text": "`import random` has to be at the very top of the code or it will fail.",
                    "is_correct": false
                  },
                  {
                    "id": "a1538203871161",
                    "text": "`import random` has been placed _after_ the `randint` function call.",
                    "is_correct": false
                  },
                  {
                    "id": "a1538203872210",
                    "text": "It needs to be `random.randint`, not just `randint`.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 729235,
              "key": "dc88ad6d-5475-48ff-b9cb-2d070a4b5272",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Wandering turtle\n\nIn the workspace below, you'll find a program that doesn't have any randomness yet. Instead of wandering in an interesting pattern, the turtle just goes around in a tight loop.\n\nYour goal is to make it both move and change color randomly, like this:",
              "instructor_notes": ""
            },
            {
              "id": 729234,
              "key": "ccb6be52-95b7-4ba4-911b-c6b870e304fe",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a380587_wander/wander.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ccb6be52-95b7-4ba4-911b-c6b870e304fe",
              "caption": "",
              "alt": "A pattern drawn by a turtle walking randomly, and changing colors randomly too.",
              "width": 200,
              "height": 500,
              "instructor_notes": null
            },
            {
              "id": 486321,
              "key": "d931f240-9813-4fb7-b680-c4954c3bd824",
              "title": "üé∞ Make it random!",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d931f240-9813-4fb7-b680-c4954c3bd824",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code to see a non-random turtle walk.",
                "Add a line to `import` the `random` module.",
                "Use `random.randint` to make the turtle turn randomly. (What arguments will you use? You choose! Try different ones and see what happens.)",
                "Use `random.choice` to make the turtle change colors randomly.",
                "**Run** the program again. See what it does!"
              ],
              "positive_feedback": "You've just demonstrated that you can use a new module and get very different behavior out of your program. Nice!",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 467947,
              "key": "5f4bfe28-35e3-42d2-b812-93e17022d206",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "d2ce1f6d-485d-4b3e-a2c3-291c92fc3a5a",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/14_wander.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/14_wander.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729230,
              "key": "9a0adf2e-df90-4146-9b40-c2bd0f20e6a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729229,
              "key": "27112e46-8e1f-4859-a428-9b24b67f14f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's our code:\n\n```python\nimport turtle\nimport random\n\n\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\n\nt = turtle.Turtle()\nt.width(20)\n\nfor step in range(100):\n    # Change this to use a random number.\n    angle = random.randint(-90,90)\n\n    # Change this to use a random color.\n    color = random.choice(colors)\n\n    t.color(color)\n    t.right(angle)\n    t.forward(10)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466659,
          "key": "e2766950-a898-4777-967e-a3c5ce434041",
          "title": "Comparison operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e2766950-a898-4777-967e-a3c5ce434041",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 467948,
              "key": "5173c53b-26b9-4f36-8ab3-d1c7eb1087ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# `‚â∑` Comparison operators\n\nYou've been using the _equality operator_ `==` with `if` statements, to do things like:\n\n```python\nif side == 2:\n    jack.color(\"blue\")\n```\n\nThe `==` operator _compares_ two things (to see if they are equal), so for that reason we would say it is an example of a **comparison operator**. And Python has several other comparison operators that we haven't yet used. Let's check them out:\n\n| **Operation** | **What it means** |\n|:-:|:-:|\n| `a == b` | Is `a` equal to `b`? |\n| `a < b` | Is `a` less than `b`? |\n| `a > b` | Is `a` greater than `b`? |\n| `a <= b` | Is `a` less than or equal to `b`? |\n| `a >= b` | Is `a` greater than or equal to `b`? |\n| `a != b` | Is `a` _not_ equal to `b`? |\n\nAll of these can be used in an `if` statement.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 729276,
              "key": "dc5ebf88-5fef-4137-840b-c1f60ecbe017",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dc5ebf88-5fef-4137-840b-c1f60ecbe017",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Below are some different `if` statements that use comparison operators. In some cases, the code inside the `if` statement will run; in others, it will _not_ run. Can you tell which is which?"
                },
                "concepts_label": "if statement",
                "answers_label": "Does it run?",
                "concepts": [
                  {
                    "text": "```python\nif 2 < 5:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262049659",
                      "text": "Runs"
                    }
                  },
                  {
                    "text": "```python\nif 10 > 10:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262325366",
                      "text": "Doesn't run"
                    }
                  },
                  {
                    "text": "```python\nif 10 >= 10:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262330573",
                      "text": "Runs"
                    }
                  },
                  {
                    "text": "```python\nif 2 + 2 <= 0:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262331463",
                      "text": "Doesn't run"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538262330573",
                    "text": "Runs"
                  },
                  {
                    "id": "a1538262049659",
                    "text": "Runs"
                  },
                  {
                    "id": "a1538262325366",
                    "text": "Doesn't run"
                  },
                  {
                    "id": "a1538262331463",
                    "text": "Doesn't run"
                  }
                ]
              }
            },
            {
              "id": 729277,
              "key": "034f5db9-f16a-4f40-bd78-cde215bf97e6",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "034f5db9-f16a-4f40-bd78-cde215bf97e6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "How about these?"
                },
                "concepts_label": "If statement",
                "answers_label": "Does it run?",
                "concepts": [
                  {
                    "text": "```python\nif 2 + 2 == 5:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262586844",
                      "text": "Doesn't run"
                    }
                  },
                  {
                    "text": "```python\nif 2 + 2 != 5:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262611146",
                      "text": "Runs"
                    }
                  },
                  {
                    "text": "```python\nif 2 + 2 != 4:\n    # Will I run?\n```",
                    "correct_answer": {
                      "id": "a1538262611811",
                      "text": "Doesn't run"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538262611146",
                    "text": "Runs"
                  },
                  {
                    "id": "a1538262586844",
                    "text": "Doesn't run"
                  },
                  {
                    "id": "a1538262611811",
                    "text": "Doesn't run"
                  }
                ]
              }
            },
            {
              "id": 729278,
              "key": "669cc4a6-b5ae-4731-9c28-d5cb2c303dc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## üå° Turtle thermometer (Thurtlometer?)\n\nThe code in the workspace below is supposed to draw a thermometer, like this:",
              "instructor_notes": ""
            },
            {
              "id": 479025,
              "key": "e8d4eea3-09fe-4da3-a141-a91405612b9e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a32c6ba_screen-shot-2017-12-14-at-10.44.55-am/screen-shot-2017-12-14-at-10.44.55-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e8d4eea3-09fe-4da3-a141-a91405612b9e",
              "caption": "",
              "alt": "Thermometer with blue, purple, and red levels.",
              "width": 283,
              "height": 75,
              "instructor_notes": null
            },
            {
              "id": 729279,
              "key": "08ed30b1-9b31-4cc5-adbd-5880d9fa8799",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The turtle draws a box first, and then draws a thick line that's _supposed_ to be different colors based on a temperature variable. But the code doesn't quite work ...",
              "instructor_notes": ""
            },
            {
              "id": 479033,
              "key": "a00ae2dc-83fe-4c22-adb1-1eaf1d959438",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a00ae2dc-83fe-4c22-adb1-1eaf1d959438",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the existing code to see what it does.",
                "Add some `if` statements (with comparison operators) to the `temperature_color` function.",
                "When you're done, the function should never get to the line that returns `\"green\"`."
              ],
              "positive_feedback": "**Awesome!**\n\nComparison operators are used all the time in code, and not just for code that runs on a thermostat.",
              "video_feedback": null,
              "description": "Modify the `temperature_color` function so that it returns `\"red\"` for hot temperatures, `\"purple\"` for medium temperatures, and `\"blue\"` for cold temperatures.\n\n(You can decide what temperature values should count as hot, medium, and cold.)"
            },
            {
              "id": 467950,
              "key": "661c9e88-0baa-4df5-8d15-7e78b8eb48d8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewb75b0f93",
              "pool_id": "webterminal",
              "view_id": "3bd22b19-a017-4539-a011-1bb616d748b1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "openFiles": [
                      "/home/workspace/workspace-turtle-support/student_files/lesson_two/15_thermo.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "autoRefresh": false,
                    "previewFile": "/home/workspace/workspace-turtle-support/student_files/lesson_two/15_thermo.html"
                  },
                  "kind": "html-live"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729281,
              "key": "6f4d7ab9-bc4b-40ef-8ff4-edb733fabf04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729280,
              "key": "73d4c4fb-348a-487f-9790-b7ec96765e6e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nHere's one way to do it:\n\n```python\nimport turtle\n\ndef temperature_color(temp):\n    # Change this code!\n    if temp < 20:\n        return \"blue\"\n    if temp < 50:\n        return \"purple\"\n    if temp >= 50:\n        return \"red\"\n    return \"green\"\n\ndef draw_temperature(temp):\n    t = turtle.Turtle()\n    t.penup()\n    t.back(100)\n    t.width(20)\n    t.pendown()\n    for n in range(temp):\n        t.color(temperature_color(n))\n        t.forward(1)\n\ndef draw_therm_box():\n    t = turtle.Turtle()\n    t.speed(0)\n    t.color(\"gray\")\n    t.penup()\n    t.back(120)\n    t.pendown()\n    t.left(90)\n    for side in [20, 240, 40, 240, 20]:\n        t.forward(side)\n        t.right(90)\n    t.hideturtle()\n\ndraw_therm_box()\ndraw_temperature(120)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 729267,
          "key": "f0295c2c-dc1a-457b-b3ca-79dcf3a290fd",
          "title": "True or False",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0295c2c-dc1a-457b-b3ca-79dcf3a290fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 729268,
              "key": "00637798-ad80-43d5-bc62-738b0ceb283f",
              "title": "Python: True And False",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UpujSAJZt5g",
                "china_cdn_id": "UpujSAJZt5g.mp4"
              }
            },
            {
              "id": 729269,
              "key": "4696a5ec-cb6a-416b-9c1a-ede4ca72ed36",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4696a5ec-cb6a-416b-9c1a-ede4ca72ed36",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some pieces of code that contain different expressions using comparison operators. For each, indicate whether the expression would evaluate to `True` or `False`."
                },
                "concepts_label": "Code",
                "answers_label": "True or False?",
                "concepts": [
                  {
                    "text": "```python\n10 > 5\n```\n",
                    "correct_answer": {
                      "id": "a1538235668934",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\n10 < 5\n```",
                    "correct_answer": {
                      "id": "a1538236014881",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\nn = 5\nn > 10\n```",
                    "correct_answer": {
                      "id": "a1538236042449",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\nn = 2\nn == 2\n```",
                    "correct_answer": {
                      "id": "a1538236093338",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\nn = 2\nn >= 2\n```",
                    "correct_answer": {
                      "id": "a1538236335936",
                      "text": "`True`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538236093338",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538236042449",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538236335936",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538235668934",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538236014881",
                    "text": "`False`"
                  }
                ]
              }
            },
            {
              "id": 729275,
              "key": "af477dab-6081-48d7-a19b-bb02414b35f2",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "af477dab-6081-48d7-a19b-bb02414b35f2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's some code:\n```python\nif True:\n    color = \"blue\"\n```\nWhich of the following pieces of code will have the same result?"
                },
                "concepts_label": "Code",
                "answers_label": "Same result or different?",
                "concepts": [
                  {
                    "text": "```python\nif 2 == 2:\n    color = \"blue\"\n```",
                    "correct_answer": {
                      "id": "a1538251389986",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\nfoo = 2 == 2\nif foo:\n    color = \"blue\"\n```",
                    "correct_answer": {
                      "id": "a1538251518427",
                      "text": "Same"
                    }
                  },
                  {
                    "text": "```python\nfoo = True\nif foo:\n    color = \"blue\"\n```",
                    "correct_answer": {
                      "id": "a1538251519148",
                      "text": "Same"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538251389986",
                    "text": "Same"
                  },
                  {
                    "id": "a1538251662292",
                    "text": "Different"
                  },
                  {
                    "id": "a1538251518427",
                    "text": "Same"
                  },
                  {
                    "id": "a1538251519148",
                    "text": "Same"
                  },
                  {
                    "id": "a1538251649396",
                    "text": "Different "
                  }
                ]
              }
            },
            {
              "id": 729274,
              "key": "ea0d4215-b4d8-4e7b-ae34-e69b23c9aa45",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea0d4215-b4d8-4e7b-ae34-e69b23c9aa45",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose that I have a function for drawing snowflakes, called `draw_snowflake`.\n\nFor each of these pieces of code, figure out whether the turtle will draw a snowflake."
                },
                "concepts_label": "Code",
                "answers_label": "Snowflake or no snowflake?",
                "concepts": [
                  {
                    "text": "```python\nif -2 < 0:\n    draw_snowflake()\n```",
                    "correct_answer": {
                      "id": "a1538247009437",
                      "text": "Snowflake!"
                    }
                  },
                  {
                    "text": "```python\ntemp = -2\nfreezing = temp < 0\nif freezing:\n    draw_snowflake()\n```",
                    "correct_answer": {
                      "id": "a1538247109868",
                      "text": "Snowflake!"
                    }
                  },
                  {
                    "text": "```python\ntemp = 2\nfreezing = temp < 0\nif freezing:\n    draw_snowflake()\n```",
                    "correct_answer": {
                      "id": "a1538247111364",
                      "text": "No snowflake"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538247009437",
                    "text": "Snowflake!"
                  },
                  {
                    "id": "a1538247109868",
                    "text": "Snowflake!"
                  },
                  {
                    "id": "a1538247111364",
                    "text": "No snowflake"
                  }
                ]
              }
            },
            {
              "id": 729271,
              "key": "16b8b386-c17e-47c0-b8c1-34aab3e67da6",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "16b8b386-c17e-47c0-b8c1-34aab3e67da6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the code to see the turtle draw a silver coin.",
                "Figure out whether `coins >= 1000` evaluates to `True` or `False`.",
                "Figure out whether the code under `if rich:` will run.",
                "Modify the code so that the turtle draws a gold coin, rather than a silver one."
              ],
              "positive_feedback": "üí∞üí∞üí∞üê¢",
              "video_feedback": null,
              "description": "In the workspace below, you will find a poor turtle who only has a silver coin.\n\nUsing your new knowledge of `True` and `False`, make this turtle rich!"
            },
            {
              "id": 729270,
              "key": "c008a37d-1e79-4418-a020-d138591a3d0a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view5is19d39vlc",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-2xkn7qax8bg",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729273,
              "key": "55ce3525-1380-46f7-9041-bf06e0fdf354",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729272,
              "key": "de69f1b2-b194-4994-897e-6956b95e6134",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\nOne way to make the coin gold is to change the value assigned to the `coins` variable, like this:\n\n```python\nimport turtle\nt = turtle.Turtle()\nt.width(100)\n\ncoins = 1000 # This is the line we changed.\nrich = coins >= 1000\n\nif rich:\n    t.color(\"gold\")\nelse:\n    t.color(\"silver\")\n\nt.forward(0)\n```\n\nThis causes `coins >= 1000` to evaluate to `True`. With that change, `if rich:` will be the equivalent of `if True:`, so the code under it will run.\n\nThere are other ways you could have gotten the coin to turn gold. For example, another solution would have been to change the assignment statement so that the turtle is satisfied with less money:\n\n```python\ncoins = 100\nrich = coins >= 100\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466660,
          "key": "e44e1657-750d-4128-81cd-88e9196f9f1e",
          "title": "if and elif",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e44e1657-750d-4128-81cd-88e9196f9f1e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675116,
              "key": "664d43c0-a081-468a-8618-b13597ff268f",
              "title": "Python: Nested If Statements And Elif",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "K3x-4gxoSNM",
                "china_cdn_id": "K3x-4gxoSNM.mp4"
              }
            },
            {
              "id": 729289,
              "key": "5375a32e-ca68-44f7-960b-a6c9f88d9408",
              "title": "üòÄü§îü§™ Mood turtle",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5375a32e-ca68-44f7-960b-a6c9f88d9408",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "First, try to do it by just using `if` and `else` (with no nesting). Can you replicate the mistake Kelly made?",
                "Next, see if you can use a nested structure to fix the problem. This one may be tricky, but do it anyway because it's good for your brain!",
                "Finally, try using `elif` instead of the nested structure. Hopefully you'll find this a lot easier!"
              ],
              "positive_feedback": "I hope this practice made you a happy turtle!   \nüòÄ",
              "video_feedback": null,
              "description": "You'll find the code that Kelly was using below. Just like she did in the video, add some `if` statements to check the turtle's mood and change its color.\n\nFor practice, we suggest that you _try_ to do it without looking back at the video or at the solution code below (but you certainly can when you need to!)."
            },
            {
              "id": 729286,
              "key": "110f3ed1-4d3a-4887-96c6-3dd0b2df6cbb",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewkaeh3gx7abi",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-g3ndk2pin3l",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": false,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729288,
              "key": "4c9ecc27-3333-4adb-a5a0-e1c953772551",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution ‚Äî With the mistake!\n\nHere's the code with the mistake:\n\n```python\nmood = \"happy\"\n\nimport turtle\nriley = turtle.Turtle()\nriley.width(5)\n\nif mood == \"happy\":\n    riley.color(\"yellow\")\nif mood == \"sad\":\n    riley.color(\"blue\")\nelse:\n    riley.color(\"gray\")\n\nfor side in range(5):\n    riley.forward(100)\n    riley.right(144)\n```\n\nIt's really good that you tried this out for yourself! This is (understandably) a very common mistake among beginning programmers, and if you aren't aware of it, then it's very difficult to figure out why your code doesn't work as you expect it to!",
              "instructor_notes": ""
            },
            {
              "id": 729291,
              "key": "e9de10f8-7adc-4778-9648-c871a2378141",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution ‚Äî With nesting\n\nHere's the solution that uses nesting:\n\n```python\nmood = \"happy\"\n\nimport turtle\nriley = turtle.Turtle()\nriley.width(5)\n\nif mood == \"happy\":\n    riley.color(\"yellow\")\nelse:\n    if mood == \"sad\":\n        riley.color(\"blue\")\n    else:\n        riley.color(\"gray\")\n\nfor side in range(5):\n    riley.forward(100)\n    riley.right(144)\n```\n\nSometimes nesting is very useful, or even necessary, but ... it kind of makes my brain hurt! And in this case, it's avoidable if we use `elif`.",
              "instructor_notes": ""
            },
            {
              "id": 729292,
              "key": "defab54d-f033-416b-80d5-645d64154e7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution ‚Äî elif\nAnd here's the solution that uses `elif`:\n\n```python\nmood = \"happy\"\n\nimport turtle\nriley = turtle.Turtle()\nriley.width(5)\n\nif mood == \"happy\":\n    riley.color(\"yellow\")\nelif mood == \"sad\":\n    riley.color(\"blue\")\nelse:\n    riley.color(\"gray\")\n\nfor side in range(5):\n    riley.forward(100)\n    riley.right(144)\n```\n\nMuch better!",
              "instructor_notes": ""
            },
            {
              "id": 729293,
              "key": "ef01f345-0b3a-415f-b748-0e02d36175aa",
              "title": "Randomize it!",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ef01f345-0b3a-415f-b748-0e02d36175aa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Import the `random` module and use the `random.choice` function to select the turtle's mood.",
                "If you like, add some additional moods, like `\"angry\"` and `\"party\"` (for our turtle, `\"party\"` is a mood).",
                "For any additional moods you add, make sure to also add corresponding `elif` tests."
              ],
              "positive_feedback": "Yay!\n\nüéâ üê¢ üéâ",
              "video_feedback": null,
              "description": "Before we move on, here's one more change you can make to the code: Make the turtle's mood random, so that it's different each time the code runs!"
            },
            {
              "id": 729294,
              "key": "6ad77c3b-7bc8-4951-bd58-479bca65e8d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution ‚Äî Random moods!\n\n```python\n\nimport turtle\nimport random\nriley = turtle.Turtle()\nriley.width(5)\n\nmood = random.choice([\"happy\", \"sad\", \"angry\", \"party\"])\n\nif mood == \"happy\":\n    riley.color(\"yellow\")\nelif mood == \"sad\":\n    riley.color(\"blue\")\nelif mood == \"angry\":\n    riley.color(\"red\")\nelif mood == \"party\":\n    riley.color(\"magenta\")\nelse:\n    riley.color(\"gray\")\n\nfor side in range(5):\n    riley.forward(100)\n    riley.right(144)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 729308,
          "key": "be2ac3c6-7520-4c39-a917-388e90216aa3",
          "title": "Logical operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be2ac3c6-7520-4c39-a917-388e90216aa3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 729309,
              "key": "2203c804-72db-4264-8e5d-05bf1826e719",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Logical operators",
              "instructor_notes": ""
            },
            {
              "id": 729310,
              "key": "29c2ef8d-f0ac-4fe9-a64a-ae0d1a622daa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We've seen how we can use the _comparison operators_ to do things like:\n\n```python\nif side == 2:\n    # Do something\n```\n\nOr:\n\n```python\nif x < 10:\n    # Do something\n```\n\nThese are great, but sometimes we may want to do two comparisons at the same time! Like this:\n\n```python\nif x > 0 and x < 10:\n    # Do something\n```\n\nIn this case, _both_ `x > 0` _and_ `x < 10` have to be `True` for the code in the `if` statement to run. In other words, this is saying \"if x is both greater than 0 _and_ less than 10, run this code. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 729311,
              "key": "c7a8b98b-4f27-4101-aca7-97cbe8957852",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c7a8b98b-4f27-4101-aca7-97cbe8957852",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "When we use the `and` operator, each comparison is evaluated. If _both_ evaluate to `True`, then the whole thing evaluates to `True`. Otherwise, it evaluates to `False`.\n\nWith that in mind, see if you can work out whether each of these expressions will come out to `True` or `False`."
                },
                "concepts_label": "Expression",
                "answers_label": "True or False?",
                "concepts": [
                  {
                    "text": "```python\n2 == 2 and 3 == 3\n```",
                    "correct_answer": {
                      "id": "a1538283800205",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\nx = 5\nx > 0 and x < 10\n```",
                    "correct_answer": {
                      "id": "a1538284020749",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\nx = 11\nx > 0 and x < 10\n```",
                    "correct_answer": {
                      "id": "a1538284042990",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n2 == 3 and 3 == 2\n```",
                    "correct_answer": {
                      "id": "a1538284073142",
                      "text": "`False`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538284020749",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538283800205",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538284042990",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538284073142",
                    "text": "`False`"
                  }
                ]
              }
            },
            {
              "id": 729312,
              "key": "9360619c-d913-4819-a531-b8962c89f357",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The `and` operator is an example of a **logical operator**. Another logical operator is the `or` operator. That looks like this:\n\n```python\nif x == 2 or x == 7:\n    # Do something\n```\n\nThis checks if _either_  (or both) of the expressions evaluates to `True`. In this case, `x` can be either `2` *or* `7`. If _neither_ of those conditions are met, then the whole thing comes out to `False`.",
              "instructor_notes": ""
            },
            {
              "id": 729313,
              "key": "bcb3c221-56c1-4fd4-8037-62184202c503",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bcb3c221-56c1-4fd4-8037-62184202c503",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "When we use the `or` operator, each comparison is evaluated. If _any_ of the comparisons evaluates to `True`, then the whole expression evaluates to `True`. Otherwise, if _none_ of the comparisons are `True`, then the whole expression evaluates to `False`.\n\nWith that in mind, see if you can work out whether each of these expressions will come out to `True` or `False`."
                },
                "concepts_label": "Expression",
                "answers_label": "True or false?",
                "concepts": [
                  {
                    "text": "```python\n2 == 6 or 3 == 0\n```",
                    "correct_answer": {
                      "id": "a1538284698098",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\n2 == 6 or 3 == 3\n```",
                    "correct_answer": {
                      "id": "a1538284844130",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\nx = 1\nx > 10 or x < 5\n```",
                    "correct_answer": {
                      "id": "a1538284872395",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\nx = 1\nx > 10 or x < 0\n```",
                    "correct_answer": {
                      "id": "a1538285121271",
                      "text": "`False`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538284844130",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538285121271",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538284698098",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538284872395",
                    "text": "`True`"
                  }
                ]
              }
            },
            {
              "id": 729316,
              "key": "4b5c70dd-1e9b-4a4c-962d-6ffd8de55cf6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## And ... and ... and ... !\n\nSo far, we have just looked at expressions using _one_ logical operator, like this:\n\n```python\nx > 0 and x < 10\n```\n\nBut we can string together as many of them as we want. For example:\n\n```python\nx > 0 and x < 10 and y > 0 and y < 10\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 729317,
              "key": "f9e7991a-6426-471a-aec9-afe03c4d9007",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f9e7991a-6426-471a-aec9-afe03c4d9007",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "For each of these pieces of code, will the expression evaluate to `True` or `False`?"
                },
                "concepts_label": "Code",
                "answers_label": "True or false?",
                "concepts": [
                  {
                    "text": "```python\n2 == 2 and 5 > 3 and 7 > 10\n```",
                    "correct_answer": {
                      "id": "a1538320048246",
                      "text": "`False`"
                    }
                  },
                  {
                    "text": "```python\ncolor = \"blue\"\nx = 100\nx > 0 and color == \"blue\" and 10 >= 10\n```",
                    "correct_answer": {
                      "id": "a1538320106124",
                      "text": "`True`"
                    }
                  },
                  {
                    "text": "```python\ny = 0\ny == 5 or y == 9 or y == 0\n```",
                    "correct_answer": {
                      "id": "a1538320107116",
                      "text": "`True`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1538320106124",
                    "text": "`True`"
                  },
                  {
                    "id": "a1538320048246",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538320382784",
                    "text": "`False`"
                  },
                  {
                    "id": "a1538320107116",
                    "text": "`True`"
                  }
                ]
              }
            },
            {
              "id": 729314,
              "key": "20b2dcf5-5e57-4c88-ac6c-0dd7ae73822f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We'll be looking at _logical operators_ in more detail later on. For now, you'll just need to know how to use `and` and `or` in the ways shown above.\n\nIf you're wondering when you would actually use them in your code, we'll check out a very practical example on the next page!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 466661,
          "key": "085f9510-41c5-48b4-b551-33dee588d74e",
          "title": "Staying in bounds",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "085f9510-41c5-48b4-b551-33dee588d74e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 675117,
              "key": "f409e9ca-7dac-49ce-bf6d-19feb9ed17ab",
              "title": "Python: Turtle Canvas And Bounds",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2nN3bK14H0U",
                "china_cdn_id": "2nN3bK14H0U.mp4"
              }
            },
            {
              "id": 486543,
              "key": "2762d70a-d9f2-4c15-bc98-299f858b5bee",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2762d70a-d9f2-4c15-bc98-299f858b5bee",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "After this code runs, what will be the value of `t.xcor()`?\n\n```python\nt = turtle.Turtle()\nt.forward(40)\nt.right(90)\nt.forward(30)\n```",
                "answers": [
                  {
                    "id": "a1513641571635",
                    "text": "30",
                    "is_correct": false
                  },
                  {
                    "id": "a1513641631951",
                    "text": "40",
                    "is_correct": true
                  },
                  {
                    "id": "a1513641632615",
                    "text": "70",
                    "is_correct": false
                  },
                  {
                    "id": "a1513641640454",
                    "text": "90",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 488959,
              "key": "b2d67c7c-27c3-4b8b-a5d1-46f167c0932c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b2d67c7c-27c3-4b8b-a5d1-46f167c0932c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If the turtle's canvas is **400 by 400** pixels in size, and the center has both coordinates equal to zero, then which of these statements is true?",
                "answers": [
                  {
                    "id": "a1513706354923",
                    "text": "The edges of the canvas are at **-200** and **200** in each dimension.",
                    "is_correct": true
                  },
                  {
                    "id": "a1513706535666",
                    "text": "The edges of the canvas are at **-400** and **400** in each dimension.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 488960,
              "key": "8575f87a-3a62-4444-aea8-bdb4faef70d5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8575f87a-3a62-4444-aea8-bdb4faef70d5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these comparisons will test if the turtle has gone off the **left** edge of the canvas?",
                "answers": [
                  {
                    "id": "a1513707211638",
                    "text": "`t.xcor() < -200` ‚Äî¬†is the *x* coordinate less than -200?",
                    "is_correct": true
                  },
                  {
                    "id": "a1513707258174",
                    "text": "`t.ycor() < 200` ‚Äî¬†is the *y* coordinate less than 200?",
                    "is_correct": false
                  },
                  {
                    "id": "a1513707258906",
                    "text": "`t.xcor() > 200` ‚Äî¬†is the *x* coordinate greater than 200?",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 729322,
              "key": "579642e6-ce65-4162-857f-2c8c73605cd2",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "579642e6-ce65-4162-857f-2c8c73605cd2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these comparisons will test if the turtle has gone off either the left or right side of the canvas?",
                "answers": [
                  {
                    "id": "a1538330431364",
                    "text": "`t.xcor() > -200 or t.xcor() < 200`",
                    "is_correct": false
                  },
                  {
                    "id": "a1538330457835",
                    "text": "`t.xcor() > -200 or t.xcor() > 200`",
                    "is_correct": false
                  },
                  {
                    "id": "a1538330458443",
                    "text": "`t.xcor() < -200 or t.xcor() > 200`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 729337,
              "key": "b416b8a5-8b72-49b9-9004-ccfff2007ab9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Note:** The `-200` and `200` above are _not_ necessarily the actual numbers you'll want to use. When you actually use this in your code, you can play with those numbers to find some that line up with the edges of the canvas (or wherever you want the boundaries to be).",
              "instructor_notes": ""
            },
            {
              "id": 729338,
              "key": "16bba8af-1459-480e-8ade-a8a415488586",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "16bba8af-1459-480e-8ade-a8a415488586",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "**Run** the existing code to see that the turtle goes off the screen.",
                "Add an `if` test that checks whether the turtle is too far to the left or right.",
                "If the turtle is out of bounds, have it make a `180` degree turn to go back the way it came."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "In the workspace below, you'll find a turtle that goes in a long, straight line‚Äîand walks straight off the screen.\n\nYour job is to keep that from happening! When the turtle gets near the edge of the screen, it should turn around and go back the other way.\n\n**Note:** You'll also see a new piece of code: `t.shape(\"turtle\")`. Run the code and you'll see what it does!"
            },
            {
              "id": 729336,
              "key": "bbc7ba19-b729-4fd9-a25d-32ae33486b82",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view6o002oady06",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-vzug3zry2x",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 671008,
              "key": "509b1d56-7add-45c8-9768-37cb62e17e4b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 671007,
              "key": "6920a030-1c89-4419-8c44-d6fe5a951d90",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution\n\nHere's our code:\n\n```python\nimport turtle\n\nt = turtle.Turtle()\nt.color(\"lime\")\nt.width(3)\nt.penup()\nt.shape(\"turtle\")\n\nfor step in range(2000):\n    t.forward(1)\n    if t.xcor() < -170 or t.xcor() > 170:\n        t.right(180)\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 729323,
          "key": "c5243178-94c1-4081-a3d5-00e244f7a8ab",
          "title": "Self-driving turtle",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c5243178-94c1-4081-a3d5-00e244f7a8ab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 729328,
              "key": "fcb44693-fef5-4bee-bf8e-72256d770ecc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# üöó Self-driving turtle",
              "instructor_notes": ""
            },
            {
              "id": 729325,
              "key": "80221d45-6232-4bb3-b871-0bcc18cc6143",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "On the last page, the turtle just walked in a straight line. But on this page, we'll be dealing with a turtle that turns in random directions.\n\nBecause of this, the turtle could go off the top or bottom as well as the sides!\n\nUsing your new knowledge of `if` tests,  **comparison operators** and **logical operators**, along with the `xcor` and `ycor` functions, your job will be to turn this wandering turtle into a self-driving turtle!",
              "instructor_notes": ""
            },
            {
              "id": 729329,
              "key": "ea14d817-e94f-4132-862a-76a66147084e",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea14d817-e94f-4132-862a-76a66147084e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these comparisons will evaluate to `True` when the turtle has gone off **any** of the edges?",
                "answers": [
                  {
                    "id": "a1538333411551",
                    "text": "t.xcor() < -200 or t.xcor() > 200",
                    "is_correct": false
                  },
                  {
                    "id": "a1538333483676",
                    "text": "t.xcor() < -200 and t.xcor() > 200 and t.ycor() < -200 and t.ycor() > 200",
                    "is_correct": false
                  },
                  {
                    "id": "a1538333490099",
                    "text": "t.xcor() < -200 or t.xcor() > 200 or t.ycor() < -200 or t.ycor() > 200",
                    "is_correct": true
                  },
                  {
                    "id": "a1538333492324",
                    "text": "t.xcor() > -200 or t.xcor() < 200 or t.ycor() > -200 or t.ycor() < 200",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 729330,
              "key": "c27c0e7e-b76e-42c7-b426-991bb254171a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The expression above is kind of long, so it might be a good idea to stick it in a variable:\n\n```python\nout_of_bounds = t.xcor() < -200 or t.xcor() > 200 or t.ycor() < -200 or t.ycor() > 200\n```\n\nWe decided to call it the `out_of_bounds` variable because it will have the value `True` when the turtle is out of bounds.\n\nThat allows us to have code like this:\n\n```python\nif out_of_bounds:\n    # Do something.\n```\n\nNotice that this code is pretty easy to read. It's saying \"`if` it is `True` that the turtle is `out_of_bounds`, then do such-and-such.\"\n\nThat's a lot easier to decipher than it would have been if we had never created the `out_of_bounds` variable. In that case, our `if` test would be:\n\n```python\nif t.xcor() < -200 or t.xcor() > 200 or t.ycor() < -200 or t.ycor() > 200:\n    # Do something\n```\nYikes! That's not very readable at all.",
              "instructor_notes": ""
            },
            {
              "id": 729326,
              "key": "521788fc-6e7e-4d8d-ac03-0b92190945b3",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "521788fc-6e7e-4d8d-ac03-0b92190945b3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add an `out_of_bounds` variable to the code that checks both the x- and y-coordinates. Take a look at how wide the box is and base your coordinates off of that.",
                "Add an `if` test that uses the `out_of_bounds` variable.",
                "If the turtle is out of bounds, make it turn around and go back the other way.",
                "Test and adjust the numbers for the boundaries as needed."
              ],
              "positive_feedback": "**Nice work!**\n\nBy the way, code like this is often used in video games!",
              "video_feedback": null,
              "description": "You'll find our wandering turtle in the workspace below.\n\nThere's also some code that draws a box.\n\nYour job is to make sure the turtle avoids walking over the lines so that it stays inside the box!\n\n**Note:** The box is smaller than the total canvas size, so you'll need to play with the numbers to find some that keep the turtle inside the box."
            },
            {
              "id": 729324,
              "key": "22667aa4-9865-4075-b487-18755a5df912",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewijkkz1fsnfm",
              "pool_id": "turtle",
              "view_id": "custom-iframe-app-0369v0fuczn5",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "daemons": [
                      {
                        "id": "daemon",
                        "cmd": ""
                      }
                    ],
                    "openFiles": [
                      "/home/workspace/workspace.py"
                    ],
                    "showFiles": false,
                    "allowClose": true,
                    "allowSubmit": false
                  },
                  "kind": "custom-iframe-app"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 729331,
              "key": "337a9579-0703-4e3a-92c9-430ea52ff673",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n----\n<div style=\"background-color: #a4e4f5;\">\n## ‚ö†Ô∏è Spoiler alert!\n\n**Our solution is below.** You'll learn more effectively if you give the exercise a strong effort before comparing your code with ours!\n</div>\n----\n----",
              "instructor_notes": ""
            },
            {
              "id": 729327,
              "key": "a0d926a2-18b1-4a6e-a0ce-19b660e93029",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution\n\n```python\nimport turtle\nimport random\n\ndef draw_box(length):\n    tur = turtle.Turtle()\n    tur.speed(0)\n    tur.color(\"gray\")\n    tur.penup()\n    tur.back(length/2)\n    tur.left(90)\n    tur.forward(length/2)\n    tur.right(90)\n    tur.pendown()\n    for side in range(4):\n        tur.forward(length)\n        tur.right(90)\n    tur.hideturtle()\n\ndraw_box(200)\n\nt = turtle.Turtle()\nt.shape(\"turtle\")\nt.color(\"olive\")\nt.penup()\nt.speed(1)\n\nfor e in range(2000):\n    t.right(random.randint(-10, 10))\n    t.forward(10)\n    out_of_bounds = t.xcor() < -80 or t.xcor() > 80 or t.ycor() < -80 or t.ycor() > 80\n    if out_of_bounds:\n        t.right(180)\n        t.forward(10)\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671634,
          "key": "f8e19405-3244-4814-95f9-d56ab34dec32",
          "title": "Congratulations!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f8e19405-3244-4814-95f9-d56ab34dec32",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 671635,
              "key": "eedd8151-6af6-403a-977f-5583f936b993",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# üéâ üêç Congratulations!  üêç üéâ\n\nYou just completed **Python Part One**!\n\nAlthough it may have just felt like we've been playing around and drawing pictures, the techniques you used in the last few lessons are tied directly to fundamental programming skills. You've now picked up a **lot** of core programming concepts, from nested `for` loops to functions definitions!\n\n## What's up next?\nThe next part of the program will be something very different. The **shell** is a command-line interface that many programmers use to work with files, directories, and programs. The next part of this course is a quick workshop on using the shell. This will prepare you for the next big section of the Python course, in which you'll use Python on your own computer.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}