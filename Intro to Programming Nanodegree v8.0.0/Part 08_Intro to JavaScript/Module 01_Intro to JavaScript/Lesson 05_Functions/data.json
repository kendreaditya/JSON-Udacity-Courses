{
  "data": {
    "lesson": {
      "id": 817334,
      "key": "f1a3f8b3-8632-4d00-96e0-b39dd2788527",
      "title": "Functions",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Dive into the world of JavaScript functions.  Learn to harness their power to streamline and organize your programs.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f1a3f8b3-8632-4d00-96e0-b39dd2788527/817334/1555957162356/Functions+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f1a3f8b3-8632-4d00-96e0-b39dd2788527/817334/1555957158804/Functions+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 213468,
          "key": "799e6f19-9105-4cb9-b4cc-ee86d11a14b4",
          "title": "Intro to Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "799e6f19-9105-4cb9-b4cc-ee86d11a14b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 230100,
              "key": "8906f2dd-3288-4944-9e24-f98eeb064a2c",
              "title": "Intro to Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Z6-ynqhxUnY",
                "china_cdn_id": "Z6-ynqhxUnY.mp4"
              }
            }
          ]
        },
        {
          "id": 213470,
          "key": "f57fe6c7-f497-44f6-ba0c-93d4d77bf2c9",
          "title": "Function Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f57fe6c7-f497-44f6-ba0c-93d4d77bf2c9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 253411,
              "key": "0e76656c-df4e-4af4-b98b-729719861fda",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Reverse Function Example",
              "instructor_notes": ""
            },
            {
              "id": 230301,
              "key": "0a0febb3-70b0-4123-99cf-47e0b97d255a",
              "title": "Function Example",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VhyIn2N1T54",
                "china_cdn_id": "VhyIn2N1T54.mp4"
              }
            }
          ]
        },
        {
          "id": 213472,
          "key": "27772be2-beba-459f-94a3-475695f01b5b",
          "title": "Declaring Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "27772be2-beba-459f-94a3-475695f01b5b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213473,
              "key": "e9ce151b-f7e7-49b8-b2e9-70a6b97a8444",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How to declare a function\n\n**Functions** allow you to package up lines of code that you can use (and often reuse) in your programs.\n\nSometimes they take **parameters** like the pizza button from the beginning of this lesson. `reheatPizza()` had one parameter: the number of slices.\n\n```js\nfunction reheatPizza(numSlices) {\n  // code that figures out reheat settings!\n}\n```\n\nThe `reverseString()` function that you saw also had one parameter: the string to be reversed. \n\n```js\nfunction reverseString(reverseMe) {\n  // code to reverse a string!\n}\n```\n\nIn both cases, the parameter is listed as a variable after the function name, inside the parentheses. And, if there were multiple parameters, you would just separate them with commas.\n\n```js\nfunction doubleGreeting(name, otherName) {\n  // code to greet two people!\n}\n```\n\nBut, you can also have functions that don't have any parameters. Instead, they just package up some code and perform some task. In this case, you would just leave the parentheses empty. Take this one for example. Here's a simple function that just prints out `\"Hello!\"`.\n\n```js\n// accepts no parameters! parentheses are empty\nfunction sayHello() {\n  var message = \"Hello!\"\n  console.log(message);\n}\n```\n\nIf you tried pasting any of the functions above into the JavaScript console, you probably didn't notice much happen. In fact, you probably saw `undefined` returned back to you. `undefined` is the default return value on the console when nothing is _explicitly_ returned using the special `return` keyword.\n\n### Return statements\n\nIn the `sayHello()` function above, a value is **printed** to the console with `console.log`, but not explicitly returned with a **return statement**. You can write a return statement by using the `return` keyword followed by the expression or value that you want to return.\n\n```js\n// declares the sayHello function\nfunction sayHello() {\n  var message = \"Hello!\"\n  return message; // returns value instead of printing it\n}\n```\n\n## How to _run_ a function\n\nNow, to get your function to _do something_, you have to **invoke** or **call** the function using the function name, followed by parentheses with any **arguments** that are passed into it. Functions are like machines. You can build the machine, but it won't do anything unless you also turn it on. Here's how you would call the `sayHello()` function from before, and then use the return value to print to the console:\n\n```js\n// declares the sayHello function\nfunction sayHello() {\n  var message = \"Hello!\"\n  return message; // returns value instead of printing it\n}\n\n// function returns \"Hello!\" and console.log prints the return value\nconsole.log(sayHello());\n```\n> **Prints:** \"Hello!\"\n\n## Parameters vs. Arguments\n\nAt first, it can be a bit tricky to know when something is either a parameter or an argument. The key difference is in where they show up in the code. A **parameter** is always going to be a _variable_ name and appears in the function declaration. On the other hand, an **argument** is always going to be a _value_ (i.e. any of the JavaScript data types - a number, a string, a boolean, etc.) and will always appear in the code when the function is called or invoked.\n\nTry declaring and calling some functions on your own:",
              "instructor_notes": ""
            },
            {
              "id": 213474,
              "key": "1913d587-2d75-4545-bc15-0a43fb3565b5",
              "title": "What Value Is Returned?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1913d587-2d75-4545-bc15-0a43fb3565b5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Use the following function to answer this question.\n\n```js\nfunction findAverage(x, y) {\n  var answer = (x + y) / 2;\n  return answer;\n}\n\nvar avg = findAverage(5, 9);\n```\n\nWhat value will be stored in the variable `avg`?",
                "answers": [
                  {
                    "id": "a1479432420470",
                    "text": "\"answer\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1479432452259",
                    "text": "(x + y) / 2",
                    "is_correct": false
                  },
                  {
                    "id": "a1479432460927",
                    "text": "7",
                    "is_correct": true
                  },
                  {
                    "id": "a1479432464900",
                    "text": "14",
                    "is_correct": false
                  },
                  {
                    "id": "a1479432469180",
                    "text": "4",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 213475,
              "key": "b6307b37-d14a-4c25-882c-08213504325f",
              "title": "Parameters vs. Arguments",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b6307b37-d14a-4c25-882c-08213504325f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "```js\nfunction findAverage(x, y) {\n  var answer = (x + y) / 2;\n  return answer;\n}\n\nvar avg = findAverage(5, 9);\n```\n\nAre `x` and `y` parameters or arguments for this function?",
                "answers": [
                  {
                    "id": "a1479432517884",
                    "text": "Parameters",
                    "is_correct": true
                  },
                  {
                    "id": "a1479432550199",
                    "text": "Arguments",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215741,
          "key": "27537694-88e3-4a5c-b465-521f3297110f",
          "title": "Function Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "27537694-88e3-4a5c-b465-521f3297110f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215742,
              "key": "f391a4a5-3af3-4296-8803-d26bb202faa1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What you've learned so far:\n\n**Functions** package up code so you can easily use (and reuse) a block of code.\n**Parameters** are variables that are used to store the data that's passed into a function for the function to use.\n**Arguments** are the actual data that's passed into a function when it is invoked:\n\n```js\n// x and y are parameters in this function declaration\nfunction add(x, y) {\n  // function body\n  // Here, `sum` variable has a scope within the function. \n  // Such variables defined within a function are called Local variables\n  // You can try giving it another name\n  var sum = x + y;\n  return sum; // return statement\n}\n\n// 1 and 2 are passed into the function as arguments, \n// and the result returned by the function is stored in a new variable `sum`\n// Here, `sum` is another variable, different from the one used inside the function\nvar sum = add(1, 2);\n```\n\nThe **function body** is enclosed inside curly brackets: \n\n```js\nfunction add(x, y) {\n  // function body!\n}\n```\n\n**Return statements** explicitly make your function return a value: \n\n```js\nreturn sum;\n```\n\nYou **invoke** or **call** a function to have it do something: \n\n```js\nadd(1, 2);\n```\n> **Returns:** 3",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213518,
          "key": "fb73adf6-2822-472f-a6af-3af6c29d7fdd",
          "title": "Quiz: Laugh it Off 1 (5-1)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fb73adf6-2822-472f-a6af-3af6c29d7fdd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216524,
              "key": "25707110-f959-4a4d-b23b-1d49280e1b06",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nDeclare a function called `laugh()` that returns `\"hahahahahahahahahaha!\"`. Print the value returned from the `laugh()` function to the console.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 213519,
              "key": "f5c88e79-0c41-48aa-955f-fa5f42de5aaa",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "f5c88e79-0c41-48aa-955f-fa5f42de5aaa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5304247547723776",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Laugh it Off 1 (5-1)\n */\n\n/*\n * QUIZ REQUIREMENTS\n * - Your code should have a `laugh()` function\n * - Your `laugh()` function should return the correct output\n * - Your code should print `\\\"hahahahahahahahahaha!\\\"` by calling the `laugh()` function inside `console.log()`\n * - BE CAREFUL ABOUT THE PUNCTUATION AND THE EXACT WORDS TO BE PRINTED.\n */\n\n\n// your code goes here\n\nconsole.log(/* call the laugh function */);\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014253,
              "key": "0b0aeaac-8758-4310-8587-c42d3b4aa1d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014254,
              "key": "19d96d44-b7f2-4b54-acc5-c5ffc9071beb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\n\n// function definition\nfunction laugh() {\n    // Take a variable with any name of your choice\n    var sound = \"hahahahahahahahahaha!\"\n    return sound;\n}\n\n\n// function calling\n// Don't forget to put a pair of `( )` along with the function name, while calling\nconsole.log(laugh());\n\n\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 213520,
          "key": "602d8cf0-7345-45e0-a52f-f0597a2dbf39",
          "title": "Quiz: Laugh it Off 2 (5-2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "602d8cf0-7345-45e0-a52f-f0597a2dbf39",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216525,
              "key": "bd9177a1-bc8b-4e23-bc03-f378d9a1e33f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nWrite a function called `laugh()` that takes one parameter, `num` that represents the number of `\"ha\"`s to return.\n\n> **TIP:** You might need a loop to solve this!\n\nHere's an example of the output and how to call the function that you will write:\n\n```js\nconsole.log(laugh(3));\n```\n> **Prints:** \"hahaha!\"\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 213521,
              "key": "03c44977-a3be-404f-a6e3-930a64a2ec5a",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "03c44977-a3be-404f-a6e3-930a64a2ec5a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6191552894468096",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Laugh it Off 2 (5-2)\n *\n * Write a function called `laugh` with a parameter named `num` that represents the number of \"ha\"s to return.\n *\n * Note:\n *  - make sure your the final character is an exclamation mark (\"!\")\n *  - make sure that your function produces the correct results when it is called multiple times\n */\n\n/*\n * QUIZ REQUIREMENTS\n * - Your code should have a `laugh()` function\n * - Your `laugh()` function should have one parameter named `num`\n * - Your `laugh()` function should return the correct number of laughs\n */\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014255,
              "key": "ab8b142f-1c26-41fe-84fd-12978f1091e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014256,
              "key": "7b6cc9ec-02a5-4044-83fc-45c12118b73e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\nvar sound = \"\" ; \nfunction laugh(num) {\n    for (var x = 0 ; x < num ; x++) {\n        sound = sound + \"ha\" ;  \n    }\n    sound = sound +\"!\"; \n    return sound; \n}\n\nconsole.log(laugh(3)) ;\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215698,
          "key": "699d50e7-19a9-472f-84c6-12a3b362142d",
          "title": "Return Values",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "699d50e7-19a9-472f-84c6-12a3b362142d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 230441,
              "key": "bacd1605-765f-4e4f-a44a-39a2b6008071",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Returning vs. Logging",
              "instructor_notes": ""
            },
            {
              "id": 230307,
              "key": "ff5b37d2-4889-4ae1-aaec-5fa1375301b3",
              "title": "Returning vs. Logging",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YY1QFCWGQzE",
                "china_cdn_id": "YY1QFCWGQzE.mp4"
              }
            },
            {
              "id": 215701,
              "key": "4494c7a4-7a3a-4369-b90e-f1f3afbc4a98",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It’s important to understand that **return** and **print** are not the same thing. Printing a value to the JavaScript console only displays a value (that you can view for debugging purposes), but the value it displays can't really be used for anything more than that. For this reason, you should remember to only use `console.log` to test your code in the JavaScript console. \n\nPaste the following function declaration _and_ function invocation into the JavaScript console to see the difference between logging (printing) and returning:\n\n```js\nfunction isThisWorking(input) {\n  console.log(\"Printing: isThisWorking was called and \" + input + \" was passed in as an argument.\");\n  return \"Returning: I am returning this string!\";\n}\n\nisThisWorking(3);\n```\n> **Prints:** \"Printing: isThisWorking was called and 3 was passed in as an argument\"<br>\n> **Returns:** \"Returning: I am returning this string!\"\n\nIf you don't explicitly define a return value, the function will return `undefined` by default.\n\n```js\nfunction isThisWorking(input) {\n  console.log(\"Printing: isThisWorking was called and \" + input + \" was passed in as an argument.\");\n}\n\nisThisWorking(3);\n```\n> **Prints:** \"Printing: isThisWorking was called and 3 was passed in as an argument\"<br>\n> **Returns:** undefined",
              "instructor_notes": ""
            },
            {
              "id": 215706,
              "key": "913578e2-2300-4407-a233-15b0cca8f8dd",
              "title": "Return vs. Print",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "913578e2-2300-4407-a233-15b0cca8f8dd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does this function \"return\"?\n\n```\nfunction sleep() {\n  console.log(\"I'm sleepy!\");\n  return \"zzz\";\n  return \"snore\";\n}\n\nsleep();\n```",
                "answers": [
                  {
                    "id": "a1479496794012",
                    "text": "\"I'm sleepy!\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1479496830117",
                    "text": "\"zzz\"",
                    "is_correct": true
                  },
                  {
                    "id": "a1481824979624",
                    "text": "\"snore\"",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 215707,
              "key": "36667ffc-db34-4cd9-8996-5f66f2dcab00",
              "title": "Multiple Returns",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "36667ffc-db34-4cd9-8996-5f66f2dcab00",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What number will be \"printed\" (to the JavaScript console)?\n\n```js\nfunction square(x) {\n  return x * x;\n}\n\nfunction subtractFour(x) {\n  return square(x) - 4;\n}\n\nconsole.log(subtractFour(5));\n```",
                "answers": [
                  {
                    "id": "a1479496858009",
                    "text": "25",
                    "is_correct": false
                  },
                  {
                    "id": "a1479496892084",
                    "text": "1",
                    "is_correct": false
                  },
                  {
                    "id": "a1479496894956",
                    "text": "21",
                    "is_correct": true
                  },
                  {
                    "id": "a1479496897466",
                    "text": "5",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 215708,
              "key": "51c9adda-b6c6-4661-b11d-48e3fa816d4f",
              "title": "What Returns First?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "51c9adda-b6c6-4661-b11d-48e3fa816d4f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you think will happen with the following code?\n\n```\nfunction test() {\n  return 1;\n  return 2;\n}\n\ntest();\n```",
                "answers": [
                  {
                    "id": "a1479496957123",
                    "text": "`1` will be returned",
                    "is_correct": true
                  },
                  {
                    "id": "a1479496982166",
                    "text": "`2` will be returned",
                    "is_correct": false
                  },
                  {
                    "id": "a1479496990809",
                    "text": "`3` will be returned",
                    "is_correct": false
                  },
                  {
                    "id": "a1479496996175",
                    "text": "error",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215709,
          "key": "a367c999-a9e1-40f3-abe7-041b7d3c810f",
          "title": "Using Return Values",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a367c999-a9e1-40f3-abe7-041b7d3c810f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215710,
              "key": "8a689667-c0ce-415c-b1c3-a80afc42b511",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Return Values\n\nReturning a value from a function is great, but what's the use of a return value if you're not going to use the value to do something?\n\n\n_A function's return value can be stored in a variable or reused throughout your program as a function argument_. Here, we have a function that adds two numbers together, and another function that divides a number by 2. We can find the average of 5 and 7 by using the `add()` function to add a pair of numbers together, and then by passing the sum of the two numbers `add(5, 7)` into the function `divideByTwo()` as an argument.\n\n\nAnd finally, we can even store the final answer in a variable called `average` and use the variable to perform even more calculations in more places!\n\n\n```js\n// returns the sum of two numbers\nfunction add(x, y) {\n  return x + y;\n}\n\n\n// returns the value of a number divided by 2\nfunction divideByTwo(num) {\n  return num / 2;\n}\n\n\nvar sum = add(5, 7); // call the \"add\" function and store the returned value in the \"sum\" variable\nvar average = divideByTwo(sum); // call the \"divideByTwo\" function and store the returned value in the \"average\" variable\n```",
              "instructor_notes": ""
            },
            {
              "id": 215711,
              "key": "cb0de6ef-75bd-4ff2-8269-a401118cede7",
              "title": "What Will This Function Return?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cb0de6ef-75bd-4ff2-8269-a401118cede7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Try predicting what will be printed in the `console.log` statement below. Then, check your prediction by pasting the code into the JavaScript console. Functions can be tricky, so try figuring it out _before_ running the code!\n\n```js\nfunction addTen(x) {\n  return x + 10;\n}\n\nfunction divideByThree(y) {\n  return y / 3;\n}\n\nvar result = addTen(2);\nconsole.log(divideByThree(result));\n```",
                "answers": [
                  {
                    "id": "a1479497152485",
                    "text": "2",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497172023",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497173883",
                    "text": "12",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497175211",
                    "text": "4",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215712,
          "key": "0fbb14b2-1ec4-4d3f-b896-696ce55560a6",
          "title": "Scope",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0fbb14b2-1ec4-4d3f-b896-696ce55560a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 253413,
              "key": "54d093d2-0e5d-4bfa-96c3-e83577c0fe48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Scope",
              "instructor_notes": ""
            },
            {
              "id": 230321,
              "key": "def21db6-d6c4-4ff3-ae80-142f6139db83",
              "title": "Scope",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yIP_yxMqog0",
                "china_cdn_id": "yIP_yxMqog0.mp4"
              }
            }
          ]
        },
        {
          "id": 215716,
          "key": "3926c6d6-fbe3-4828-8393-1e711478936a",
          "title": "Scope Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3926c6d6-fbe3-4828-8393-1e711478936a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 253415,
              "key": "5c18dc5e-0ce0-40e2-af8b-0898cce842b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Scope Librarian Example",
              "instructor_notes": ""
            },
            {
              "id": 230322,
              "key": "04784b74-21c5-45d2-82d2-5a7026d5d82a",
              "title": "Scope Example",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HJegRwwjYrY",
                "china_cdn_id": "HJegRwwjYrY.mp4"
              }
            },
            {
              "id": 356622,
              "key": "25c35dbc-38f3-4338-96ad-b0ef48272302",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> TIP: The JavaScript language is constantly improving. One of these updates introduces a new type of scope, called Block scope. Check out our [ES6 course](https://www.udacity.com/course/es6-javascript-improved--ud356) to learn more!",
              "instructor_notes": ""
            },
            {
              "id": 215723,
              "key": "0f5afcca-4942-43f2-8034-fa8af93cb176",
              "title": "Scope 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0f5afcca-4942-43f2-8034-fa8af93cb176",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these variables `a`, `b`, `c`, or `d`, is defined in the global scope?\n\n```js\nvar a = 1;\nfunction x() {\n  var b = 2;\n  function y() {\n    var c = 3;\n    function z() {\n      var d = 4;\n    }\n    z();\n  }\n  y();\n}\n\nx();\n```",
                "answers": [
                  {
                    "id": "a1479497703262",
                    "text": "a",
                    "is_correct": true
                  },
                  {
                    "id": "a1479497733525",
                    "text": "b",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497734800",
                    "text": "c",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497736270",
                    "text": "d",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 215725,
              "key": "bcb56c56-21b1-41aa-a57b-2f5afdec4af9",
              "title": "Scope 2",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bcb56c56-21b1-41aa-a57b-2f5afdec4af9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Where can you print out the value of variable `c` without resulting in an error?\n\n```\nvar a = 1;\nfunction x() {\n  var b = 2;\n  function y() {\n    var c = 3;\n    function z() {\n      var d = 4;\n    }\n    z();\n  }\n  y();\n}\n\nx();\n```",
                "answers": [
                  {
                    "id": "a1479497762949",
                    "text": "anywhere in the script!",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497848137",
                    "text": "anywhere inside function `x()`",
                    "is_correct": false
                  },
                  {
                    "id": "a1479497856788",
                    "text": "anywhere inside function `y()`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479497861983",
                    "text": "anywhere inside function `z()`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215726,
          "key": "5e047250-e32d-4eb0-b610-71705aa36975",
          "title": "Shadowing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e047250-e32d-4eb0-b610-71705aa36975",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 253416,
              "key": "ea1f27a3-4e04-49ac-8734-d20da3f96c00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Shadowing",
              "instructor_notes": ""
            },
            {
              "id": 268324,
              "key": "d41b63ea-ac9c-44bf-bc99-e8689ff21131",
              "title": "L5 23 L Variable Shadowing V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NMLG2PQ6RRM",
                "china_cdn_id": "NMLG2PQ6RRM.mp4"
              }
            },
            {
              "id": 215731,
              "key": "9aef36b5-1bf9-45a3-b1e1-520c0c8f2193",
              "title": "Variable Shadowing",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9aef36b5-1bf9-45a3-b1e1-520c0c8f2193",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Without pasting into your console, what do you think this code will print out?\n\n```\nvar x = 1;\n\nfunction addTwo() {\n  x = x + 2;\n}\n\naddTwo();\nx = x + 1;\nconsole.log(x);\n```",
                "answers": [
                  {
                    "id": "a1479498045123",
                    "text": "1",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498097635",
                    "text": "2",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498098740",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498099922",
                    "text": "4",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 215735,
              "key": "67d88fb2-e2f0-4a23-8c15-44a8fa709b0d",
              "title": "Shadowing 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "67d88fb2-e2f0-4a23-8c15-44a8fa709b0d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Without pasting into your console, what do you think this code will print out?\n\n```\nvar x = 1;\n\nfunction addTwo() {\n  var x = x + 2;\n}\n\naddTwo();\nx = x + 1;\nconsole.log(x);\n```\n",
                "answers": [
                  {
                    "id": "a1479498270754",
                    "text": "1",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498320602",
                    "text": "2",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498321747",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498323039",
                    "text": "4",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215737,
          "key": "ea06b264-1dd2-481b-9586-5366023eeddf",
          "title": "Global Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ea06b264-1dd2-481b-9586-5366023eeddf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215738,
              "key": "6373acf2-4f76-4c3e-b3fd-1b4770e3e671",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using global variables\n\nSo you might be wondering:\n\n> \"Why wouldn't I always use global variables? Then, I would never need to use function arguments since ALL my functions would have access to EVERYTHING!\"\n\nWell... Global variables might seem like a convenient idea at first, especially when you're writing small scripts and programs, but there are many reasons why you shouldn't use them unless you have to. For instance, global variables can conflict with other global variables of the same name. Once your programs get larger and larger, it'll get harder and harder to keep track and prevent this from happening.\n\nThere are also other reasons you'll learn more about in more advanced courses. But for now, just work on minimizing the use of global variables as much as possible.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215739,
          "key": "3d2b0e97-66e2-4211-8abd-67b2963ed888",
          "title": "Scope Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d2b0e97-66e2-4211-8abd-67b2963ed888",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215740,
              "key": "d50259eb-d2d1-4dd9-8f69-0ca925824ce4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What you've learned so far:\n* If an identifier is declared in **global scope**, it's available _everywhere_.\n* If an identifier is declared in **function scope**, it's available _in the function_ it was declared in (even in functions declared inside the function).\n* When trying to access an identifier, the JavaScript Engine will first look in the current function. If it doesn't find anything, it will continue to the next outer function to see if it can find the identifier there. It will keep doing this until it reaches the global scope.\n* Global identifiers are a bad idea. They can lead to bad variable names, conflicting variable names, and messy code.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215743,
          "key": "86acf25e-7511-4f3a-927e-050899ec87da",
          "title": "Hoisting",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "86acf25e-7511-4f3a-927e-050899ec87da",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 233463,
              "key": "12329f4c-dd3f-4058-9573-81f024a66651",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hoisting\n\nSometimes your JavaScript code will produce errors that may seem counterintuitive at first. **Hoisting** is another one of those topics that might be the cause of some of these tricky errors you're debugging. \n\nLet's take a look at an example:",
              "instructor_notes": ""
            },
            {
              "id": 230433,
              "key": "fc0912c2-cea3-405c-87fd-932a4ef1afdc",
              "title": "Hoisting",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8z-HSS34dsM",
                "china_cdn_id": "8z-HSS34dsM.mp4"
              }
            },
            {
              "id": 215751,
              "key": "1b842ec7-9b12-4159-a372-78d6680734b3",
              "title": "Hoisting 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1b842ec7-9b12-4159-a372-78d6680734b3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What value will be printed to the console?\n\n```\nsayHi(\"Julia\");\n\nfunction sayHi(name) {\n  console.log(greeting + \" \" + name);\n  var greeting;\n}\n```",
                "answers": [
                  {
                    "id": "a1479498735149",
                    "text": "error",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498771188",
                    "text": "undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498774519",
                    "text": "Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498778397",
                    "text": "undefined Julia",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498781464",
                    "text": "null",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498791322",
                    "text": "null Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498794735",
                    "text": "NaN",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498803513",
                    "text": "NaN Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498820055",
                    "text": "Hello Julia",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 215752,
              "key": "9d4826a5-f60b-4261-a430-b38345f7e883",
              "title": "Hoisting 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9d4826a5-f60b-4261-a430-b38345f7e883",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What value will be printed to the console?\n```\nsayHi(\"Julia\");\n\nfunction sayHi(name) {\n  console.log(greeting + \" \" + name);\n  var greeting = \"Hello\";\n}\n```",
                "answers": [
                  {
                    "id": "a1479498857029",
                    "text": "error",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498873390",
                    "text": "undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498877053",
                    "text": "Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498879941",
                    "text": "undefined Julia",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498884171",
                    "text": "null",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498887160",
                    "text": "null Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498890742",
                    "text": "NaN",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498893882",
                    "text": "NaN Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498899025",
                    "text": "Hello Julia",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 215754,
              "key": "5451606e-d388-4d26-9d6b-3bead56ac744",
              "title": "Hoisting 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5451606e-d388-4d26-9d6b-3bead56ac744",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What value will be printed to the console?\n\n```js\nfunction sayHi(name) {\n  var greeting = \"Hello\";\n  console.log(greeting + \" \" + name);\n}\n\nsayHi(\"Julia\");\n```",
                "answers": [
                  {
                    "id": "a1479498946780",
                    "text": "error",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498977211",
                    "text": "undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498980416",
                    "text": "Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498983010",
                    "text": "undefined Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498987286",
                    "text": "null",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498990184",
                    "text": "null Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498993705",
                    "text": "NaN",
                    "is_correct": false
                  },
                  {
                    "id": "a1479498998646",
                    "text": "NaN Julia",
                    "is_correct": false
                  },
                  {
                    "id": "a1479499003048",
                    "text": "Hello Julia",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 215756,
          "key": "ed1a21a4-33d6-46c5-831c-f9bf4a1520cb",
          "title": "Hoisting Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed1a21a4-33d6-46c5-831c-f9bf4a1520cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215757,
              "key": "f5231e28-51a6-4489-ad8c-9fe97464d2ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What you've learned so far:\n\n* JavaScript hoists function declarations and variable declarations to the top of the current scope.\n* Variable _assignments_ are not hoisted.\n* Declare functions and variables at the top of your scripts, so the syntax and behavior are consistent with each other.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215759,
          "key": "c746623a-eefd-4518-9890-2c5f320b0282",
          "title": "Quiz: Build a Triangle (5-3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c746623a-eefd-4518-9890-2c5f320b0282",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215763,
              "key": "cb1b14e6-8193-47cb-8fc7-eb2f7303d08c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nFor this quiz, you're going to create a function called `buildTriangle()` that will accept an input (the triangle at its widest width) and will return the string representation of a triangle. See the example output below.\n\n```js\nbuildTriangle(10);\n```\n\n **Returns**:\n```text\n* \n* * \n* * * \n* * * * \n* * * * * \n* * * * * * \n* * * * * * * \n* * * * * * * * \n* * * * * * * * * \n* * * * * * * * * * \n```\n\n\nWe've given you one function `makeLine()` to start with. The function takes in a line length, and builds a line of asterisks and returns the line with a newline character.\n\n\n```js\nfunction makeLine(length) {\n  var line = \"\";\n  for (var j = 1; j <= length; j++) {\n    line += \"* \"\n  }\n  return line + \"\\n\";\n}\n```\n\nYou will need to call this `makeLine()` function in `buildTriangle()`.\n\nThis will be the most complicated program you've written yet, so take some time _thinking_ through the problem before diving into the code. What tools will you need from your JavaScript tool belt? Professionals plan out their code before writing anything. Think through the steps your code will need to take and write them down in order. Then go through your list and convert each step into actual code. Good luck!\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 215760,
              "key": "b3366e7d-8824-40e8-8ac9-070b1becdf26",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b3366e7d-8824-40e8-8ac9-070b1becdf26",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4890328177967104",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Build A Triangle (5-3)\n */\n\n/*\n * QUIZ REQUIREMENTS\n * - Your code should have a `buildTriangle()` function\n * - Your `buildTriangle()` function should take one argument (or you can say parameter)\n * - Your `laugh()` function should build the triangle as describe above\n */\n\n\n// creates a line of * for a given length\nfunction makeLine(length) {\n    var line = \"\";\n    for (var j = 1; j <= length; j++) {\n        line += \"* \";\n    }\n    return line + \"\\n\";\n}\n\n// your code goes here.  Make sure you call makeLine() in your own code.\n\n\n// test your code by uncommenting the following line\n//console.log(buildTriangle(10));",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014257,
              "key": "63f0cc00-fb34-4393-9f66-2b7c995194c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014258,
              "key": "4eecbe8a-a651-499e-a933-a7f7a11e1771",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\n// creates a line of * for a given length\nfunction makeLine(length) {\n    var line = \"\";\n    for (var j = 1; j <= length; j++) {\n        line += \"* \";\n    }\n    return line + \"\\n\";\n}\n\n// your code goes here.  Make sure you call makeLine() in your own code.\nfunction buildTriangle(length) {\n    // Let's build a huge string equivalent to the triangle\n    var triangle = \"\";\n    \n    //Let's start from the topmost line\n    var lineNumber = 1;\n    \n    for(lineNumber=1; lineNumber<=length; lineNumber++){\n        // We will not print one line at a time.\n        // Rather, we will make a huge string that will comprise the whole triangle\n        triangle = triangle + makeLine(lineNumber);\n    }\n    return triangle;\n}\n\n// test your code by uncommenting the following line\n// Note that the function buildTriangle() must return a string \n// because the console.log() accepts a string argument\nconsole.log(buildTriangle(10));\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215765,
          "key": "d5db8bf6-029e-4a22-bc65-2346b810d019",
          "title": "Function Expressions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d5db8bf6-029e-4a22-bc65-2346b810d019",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 259517,
              "key": "2f81a696-d7a0-4299-83d5-0b06186f9864",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Function Expressions",
              "instructor_notes": ""
            },
            {
              "id": 259518,
              "key": "fc6660dd-c6ac-4354-8425-b1b059ba53c1",
              "title": "Function Expressions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gopMou99geg",
                "china_cdn_id": "gopMou99geg.mp4"
              }
            },
            {
              "id": 215766,
              "key": "ab5d33d6-09b0-4574-89ee-d6da05e3908b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Once you know how to declare a function, a whole new set of possibilities will open up to you.\n\nFor instance, remember how you can store anything you want in a variable? Well, in JavaScript, you can also store functions in variables. When a function is stored _inside_ a variable it's called a **function expression**.\n\n```\nvar catSays = function(max) {\n  var catMessage = \"\";\n  for (var i = 0; i < max; i++) {\n    catMessage += \"meow \";\n  }\n  return catMessage;\n};\n```\nNotice how the `function` keyword no longer has a name.\n\n```js\nvar catSays = function(max) { \n  // code here \n};\n```\nIt's an **anonymous function**, a function with no name, and you've stored it in a variable called `catSays`.\n\nAnd, if you try accessing the value of the variable `catSays`, you'll even see the function returned back to you.\n\n```js\ncatSays;\n```\n> **Returns:** <br>\n```js\nfunction(max) {\n  var catMessage = \"\"\n  for (var i = 0; i < max; i++) {\n    catMessage += \"meow \";\n  }\n  return catMessage;\n}\n```\n\n## Function expressions and hoisting\n\nDeciding when to use a function expression and when to use a function declaration can depend on a few things, and you will see some ways to use them in the next section. But, one thing you'll want to be careful of is hoisting. \n\nAll _function declarations are hoisted_ and loaded before the script is actually run. _Function expressions are not hoisted_, since they involve variable assignment, and only variable declarations are hoisted. The function expression will not be loaded until the interpreter reaches it in the script.",
              "instructor_notes": ""
            },
            {
              "id": 230469,
              "key": "5de8cfdd-bad5-4e92-98aa-17adea3243a0",
              "title": "Declared vs. Function Expression",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center;\"><font color=\"#000066\"> Note - This video does not have an audio. It was created as a visual to aid learning. </font> </div><div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">This animation is showing the difference between how hoisting impacts declared functions vs. function expressions. Notice how in the animation the function expression is not hoisted, but the declared function is hoisted.</div>",
              "video": {
                "youtube_id": "tjLDNvyhDM8",
                "china_cdn_id": "tjLDNvyhDM8.mp4"
              }
            }
          ]
        },
        {
          "id": 215769,
          "key": "2e042a55-4a17-4b26-ba49-d53b014b3f23",
          "title": "Patterns with Function Expressions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e042a55-4a17-4b26-ba49-d53b014b3f23",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 247672,
              "key": "34babf6f-4d56-43cc-b7f7-080ddf5a2e6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Functions as parameters\n\nBeing able to store a function in a variable makes it really simple to pass the function into another function. A function that is passed into another function is called a **callback**. Let's say you had a `helloCat()` function, and you wanted it to return \"Hello\" followed by a string of \"meows\" like you had with `catSays`. Well, rather than redoing all of your hard work, you can make `helloCat()` accept a callback function, and pass in `catSays`.\n\n```js\n// function expression catSays\nvar catSays = function(max) {\n  var catMessage = \"\";\n  for (var i = 0; i < max; i++) {\n    catMessage += \"meow \";\n  }\n  return catMessage;\n};\n\n// function declaration helloCat accepting a callback\nfunction helloCat(callbackFunc) {\n  return \"Hello \" + callbackFunc(3);\n}\n\n// pass in catSays as a callback function\nhelloCat(catSays);\n```\n\n## Named function expressions",
              "instructor_notes": ""
            },
            {
              "id": 230434,
              "key": "b2fd2838-f820-42a3-ab8e-7716abc51e56",
              "title": "Named Function Expressions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wAXZLwK8TU0",
                "china_cdn_id": "wAXZLwK8TU0.mp4"
              }
            },
            {
              "id": 215770,
              "key": "e8c41c11-9763-4ab0-aa7d-43e427a2ab88",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Inline function expressions\n\nA function expression is when a function is assigned to a variable. And, in JavaScript, this can also happen when you pass a function _inline_ as an argument to another function. Take the `favoriteMovie` example for instance:\n\n```js\n// Function expression that assigns the function displayFavorite \n// to the variable favoriteMovie\nvar favoriteMovie = function displayFavorite(movieName) {\n  console.log(\"My favorite movie is \" + movieName);\n};\n\n// Function declaration that has two parameters: a function for displaying\n// a message, along with a name of a movie\nfunction movies(messageFunction, name) {\n  messageFunction(name);\n}\n\n// Call the movies function, pass in the favoriteMovie function and name of movie\nmovies(favoriteMovie, \"Finding Nemo\");\n```\n> **Returns:** My favorite movie is Finding Nemo\n\nBut you could have bypassed the first assignment of the function, by passing the function to the `movies()` function inline.\n\n```js\n// Function declaration that takes in two arguments: a function for displaying\n// a message, along with a name of a movie\nfunction movies(messageFunction, name) {\n  messageFunction(name);\n}\n\n// Call the movies function, pass in the function and name of movie\nmovies(function displayFavorite(movieName) {\n  console.log(\"My favorite movie is \" + movieName);\n}, \"Finding Nemo\");\n```\n> **Returns:** My favorite movie is Finding Nemo\n\nThis type of syntax, writing function expressions that pass a function into another function inline, is really common in JavaScript. It can be a little tricky at first, but be patient, keep practicing, and you'll start to get the hang of it!",
              "instructor_notes": ""
            },
            {
              "id": 247687,
              "key": "a608dff9-bcdb-48a9-b453-982e15dfb9d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why use anonymous inline function expressions?\n\nUsing an anonymous inline function expression might seem like a very not-useful thing at first. Why define a function that can only be used once and you can't even call it by name? \n\nAnonymous inline function expressions are often used with function callbacks that are probably not going to be reused elsewhere. Yes, you could store the function in a variable, give it a name, and pass it in like you saw in the examples above. However, when you know the function is not going to be reused, it could save you many lines of code to just define it inline.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215773,
          "key": "34e80f30-f3e9-4a54-95f0-76961a0bfda2",
          "title": "Function Expression Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34e80f30-f3e9-4a54-95f0-76961a0bfda2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 215774,
              "key": "a0f71e4f-a70c-4b8b-a4ca-121577cecb29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What you've learned so far:\n\n**Function Expression**: When a function is assigned to a variable. The function can be named, or anonymous.\nUse the variable name to call a function defined in a function expression.\n\n```js\n// anonymous function expression\nvar doSomething = function(y) {\n  return y + 1;\n};\n```\n\n```js\n// named function expression\nvar doSomething = function addOne(y) {\n  return y + 1;\n};\n```\n\n```js\n// for either of the definitions above, call the function like this:\ndoSomething(5);\n```\n> **Returns:** 6\n\nYou can even pass a function into another function _inline_. This pattern is commonly used in JavaScript, and can be helpful streamlining your code.\n\n```\n// function declaration that takes in two arguments: a function for displaying\n// a message, along with a name of a movie\nfunction movies(messageFunction, name) {\n  messageFunction(name);\n}\n\n// call the movies function, pass in the function and name of movie\nmovies(function displayFavorite(movieName) {\n  console.log(\"My favorite movie is \" + movieName);\n}, \"Finding Nemo\");\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215776,
          "key": "61f50acf-0bc9-4195-adda-c46d8222fe5b",
          "title": "Quiz: Laugh (5-4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "61f50acf-0bc9-4195-adda-c46d8222fe5b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216547,
              "key": "8d7f5654-7f24-4cb7-a906-bd8d4ae88768",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\nWrite an anonymous function expression that stores a function in a variable called \"laugh\" and outputs the number of \"ha\"s that you pass in as an argument.\n\n```\nlaugh(3);\n```\n> **Returns:** hahaha!\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 215777,
              "key": "4d453a6e-0f55-435d-9c41-c1623c540e7d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "4d453a6e-0f55-435d-9c41-c1623c540e7d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6088545133527040",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Laugh (5-4)\n */\n\n/*\n * QUIZ REQUIREMENTS\n * - Your code should have a variable `laugh`\n * - Your code should include an anonymous function expression stored in the variable `laugh`\n * - Your anonymous function expression should take one argument\n * - Your anonymous function expression should return the correct number of `hahaha`\\'s\n */\n\n\nvar laugh = /* finish the function expression */\n\nconsole.log(laugh(10));\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014259,
              "key": "2305a0b5-e7aa-496f-8a4f-7a9d437e2cc8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014260,
              "key": "e0d80144-18e8-46bb-9013-8e5de25b41e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\n\n// Declare an empty string\nvar sound = \"\" ; \n\n// An anonymous function expression stored in the variable `laugh`\nvar laugh = function(num) {\n    \n    //Iterate\n    for (var x = 0 ; x < num ; x++) {\n        sound = sound + \"ha\" ;  \n    }\n    sound = sound +\"!\"; \n    return sound; \n}\n\n// It is essential that the function must return a string\nconsole.log(laugh(3)) ;\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215778,
          "key": "807696ab-6a0d-4bf7-a2ee-8f5786ea1587",
          "title": "Quiz: Cry (5-5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "807696ab-6a0d-4bf7-a2ee-8f5786ea1587",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216550,
              "key": "f09c9bbf-9770-4876-89c8-6ef93f87d1d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nWrite a named function expression that stores the function in a variable called `cry` and returns \"boohoo!\". Don't forget to call the function using the variable name, not the function name:\n\n```js\ncry();\n```\n> **Returns:** boohoo!\n\n## Your Code:\n",
              "instructor_notes": ""
            },
            {
              "id": 215779,
              "key": "3f6753c1-6d23-4724-a643-57e19d318c8d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3f6753c1-6d23-4724-a643-57e19d318c8d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4568532853587968",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Cry (5-5)\n */\n\n/*\n * QUIZ REQUIREMENTS\n * - Your code should have a variable `cry`\n * - Your code should include a named function expression stored in the variable `cry`\n * - Your code should call the function expression using the variable name, not the function name\n * - Your function expression should return the expected output\n * - BE CAREFUL ABOUT THE PUNCTUATION AND THE EXACT WORDS TO BE PRINTED.\n */\n\n\n// your code goes here\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014261,
              "key": "51b36b0b-88c7-4064-9e47-1a9e99a9b51f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014262,
              "key": "2f7ab25f-eed7-415f-9742-8b15c6216dbe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\nvar cry = function myFunction(){\n    var sound = \"boohoo!\";\n    return sound;\n    };\n\n// Call the function using the variable name, not the function name\nconsole.log(cry());\n\n// This statement is also acceptable, but it won't print anything on your console\n// cry();\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215781,
          "key": "3d40a839-ffaa-4a34-bb10-bec27b23e1c6",
          "title": "Quiz: Inline (5-6)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d40a839-ffaa-4a34-bb10-bec27b23e1c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 216551,
              "key": "6af68a8b-99aa-48be-8fe8-a886ef339642",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\nCall the `emotions()` function so that it prints the output you see below, but instead of passing the `laugh()` function as an argument, pass an inline function expression instead.\n\n```js\nemotions(\"happy\", laugh(2)); // you can use your laugh function from the previous quizzes\n```\n\n> **Prints:** \"I am happy, haha!\"\n\n## Your Code:\n",
              "instructor_notes": ""
            },
            {
              "id": 215782,
              "key": "c2943197-483e-4d8c-badf-ea38a4b0b281",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c2943197-483e-4d8c-badf-ea38a4b0b281",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5988319387320320",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Inline Functions (5-6)\n */\n \n /*\n * QUIZ REQUIREMENTS\n * - Your code should have an `emotions()` function\n * - Your code should call the `emotions()` function\n * - Your `emotions()` function call should have an inline function expression passed as the second parameter\n * - Your function expression should return the expected output\n */\n\n\n// don't change this code\n// emotions() function definition\nfunction emotions(myString, myFunc) {\n    console.log(\"I am \" + myString + \", \" + myFunc(2));\n}\n\n// your code goes here\n// Call the emotions() function with two arguments\n// Argument 1 - \"happy\" string\n// Argument 2 - an inline function expression",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 1014263,
              "key": "f21ed85c-d3f4-4d5a-8c9e-8f6cce94cfc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<font color=\"#000066\"> Note - We check your solution against a limited set of ***test-cases*** that check the minimum requirements, as mentioned in the quiz. Give the exercise a strong effort, trying to pass all test cases, before comparing your code with the solution. </font>",
              "instructor_notes": ""
            },
            {
              "id": 1014264,
              "key": "5b6eea51-b31a-48dd-9f42-db854163e57b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n<div id=\"spoiler_1\" style=\"display:none\">\n#### <font color=\"green\">Here is one of the possible solutions:</font>\n\n```Javascript\n\n// emotions() function definition\nfunction emotions(myString, myFunc) {\n    console.log(\"I am \" + myString + \", \" + myFunc(2));\n}\n\n// Call the emotions() function with two arguments\n// Argument 1 - \"happy\" string\n// Argument 2 - an inline function expression\nemotions (\"happy\", function(num) {\n    var sound = \"\"; // Local variable\n    //Iterate\n    for (var i = 0 ; i < num ; i++) {\n        sound = sound + \"ha\" ;  \n    }\n    sound = sound +\"!\"; \n    return sound; \n});\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 215783,
          "key": "099daf0f-4ed2-4d1c-b592-e39da9d54dfe",
          "title": "Lesson 5 Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "099daf0f-4ed2-4d1c-b592-e39da9d54dfe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 230437,
              "key": "1a9e165a-82b9-470a-bc6e-d44460148c46",
              "title": "Lesson 5 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "n1c11kxKmQ0",
                "china_cdn_id": "n1c11kxKmQ0.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}