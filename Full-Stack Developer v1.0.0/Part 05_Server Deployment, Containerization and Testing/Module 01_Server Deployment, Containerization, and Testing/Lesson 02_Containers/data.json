{
  "data": {
    "lesson": {
      "id": 899018,
      "key": "5311dad9-1e88-412a-8533-8631bec2b44c",
      "title": "Containers",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "An introduction to containers and Docker",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/5311dad9-1e88-412a-8533-8631bec2b44c/899018/1579728286294/Containers+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/5311dad9-1e88-412a-8533-8631bec2b44c/899018/1579728282880/Containers+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 899013,
          "key": "fe38c88c-edbb-46dc-8b88-5ad33e00145c",
          "title": "Lesson Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe38c88c-edbb-46dc-8b88-5ad33e00145c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 898970,
              "key": "4b145463-f037-41de-8bda-9060ae37f997",
              "title": "Lesson Intro Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Overview",
              "instructor_notes": ""
            },
            {
              "id": 898969,
              "key": "f1550e66-499b-42d3-89c6-c692beba7c4c",
              "title": "FSND C4 L1 A01 Lesson Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Nd00XPMibmk",
                "china_cdn_id": "Nd00XPMibmk.mp4"
              }
            },
            {
              "id": 898991,
              "key": "9f72ad58-49e2-4196-8cec-be40e327f62c",
              "title": "Lesson Intro Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Overview\n\nIf you plan to deploy your application to the cloud or other production environment, you will need your application to run in a different environment from your development machine. Unfortunately, you might not have direct control over the cloud environment or the software installed, and this could cause problems for your application. \n\nOne solution to this problem is to use an additional piece of software that can bundle your application’s dependencies with your application. Two options for this kind of software are _containers_ and _virtual machines_. In this lesson, you will:\n- Learn about containers\n- Understand the difference between containers and VMs\n- Learn about the most popular container system: Docker\n- Pull and run pre-built containers from the DockerHub container registry\n- Learn how to create your own container images using a text document called a Dockerfile\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899017,
          "key": "f6a4a00e-6178-4f06-bb8f-021f2fd2a65a",
          "title": "What is a Container?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f6a4a00e-6178-4f06-bb8f-021f2fd2a65a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899009,
              "key": "0df6a51c-b384-4060-8608-7a4c8fb548bf",
              "title": "What are containers Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is a Container?\n\nIn this concept, you will learn about containers, which will solve the problem of environment consistency when you deploy your application from a development environment to a production environment.",
              "instructor_notes": ""
            },
            {
              "id": 898971,
              "key": "f9de889c-ea44-4fa0-ba3e-45dfb8d893cf",
              "title": "FSND C4 L1 A02 What Are Containers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "L0AUi-5bXZI",
                "china_cdn_id": "L0AUi-5bXZI.mp4"
              }
            },
            {
              "id": 898986,
              "key": "466e9bf6-c5fe-4bd3-8d15-9d35cdc36346",
              "title": "What are containers Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n \nTwo ways of bundling an application with its environment and dependencies are containers and [virtual machines](https://en.wikipedia.org/wiki/Virtual_machine). Both methods allow an application to be run with minimal differences between development and production, and both can be used to horizontally scale an application.\n\nMultiple containers and VMs can be run on the same machine, but containers running on the same machine share the same low-level operating system [kernel]( https://en.wikipedia.org/wiki/Kernel_%28\noperating_system%29 ). You will learn more virtual machines and how they differ from containers more in the next concept.\n\n## Containers Quiz",
              "instructor_notes": ""
            },
            {
              "id": 898973,
              "key": "bd436667-1e26-486c-9f18-7b5439b3b387",
              "title": "Containers vs Virtual Machines Prep",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bd436667-1e26-486c-9f18-7b5439b3b387",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which are true of containers?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "They solve the ‘I don’t have enough time to write tests problem’.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "They solve the ‘It works on my machine problem’.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "They package an application with its dependencies.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "They are lightweight.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 922048,
              "key": "03394b6e-843f-4e3d-bcb8-195bff83e944",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\n- [Docker overview of containers](https://www.docker.com/resources/what-container)\n- [Redhat article on Docker containers](https://www.redhat.com/en/topics/containers/what-is-docker)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 922041,
          "key": "5a52e5eb-6740-412b-b8be-d3ace2291ea5",
          "title": "Containers vs VMs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5a52e5eb-6740-412b-b8be-d3ace2291ea5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899011,
              "key": "a3aca17e-8cdd-43dd-93b2-2cfe92044792",
              "title": "Containers vs. Virtual Machines",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Containers vs. Virtual Machines\n\nIn the previous concept, it was mentioned that containers are a light-weight option to bundle an application with its environment. In this concept, you will learn more about the differences between containers and VMs.\n\nA VM is like a complete computer, with its own copy of an operating system and virtual hardware. Just as with containers, a single _physical_ machine (the host machine) can run many _virtual_ machines to scale the number of isolated applications. While virtual machines work well for scaling applications, since they virtualize an entire machine, they can be resource intensive. This is where containers can be an improvement.\n\nInstead of virtualizing an entire operating system and hardware, containers package and run programs on a single host operating system by sharing the operating system kernel and partitioning the operating system’s resources. In the container model, there are no virtual operating systems or virtual hardware, which reduces the total resources needed to run them.",
              "instructor_notes": ""
            },
            {
              "id": 898982,
              "key": "2c873d7a-ebfd-4098-bb71-426289f68059",
              "title": "FSND C4 L1 A03 Containers Vs Virtual Machines",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WwPiA12Yt7g",
                "china_cdn_id": "WwPiA12Yt7g.mp4"
              }
            },
            {
              "id": 922049,
              "key": "e81f3f25-4341-4ba7-8f59-5133614d711b",
              "title": "Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n\nFor a recap of the differences between containers and VMs, see the image and text below.",
              "instructor_notes": ""
            },
            {
              "id": 898978,
              "key": "e5718b21-6f96-47ed-bc36-578a57dab4d8",
              "title": "VMs vs Containers",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d407a8f_image2/image2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5718b21-6f96-47ed-bc36-578a57dab4d8",
              "caption": "VM vs Container Architecture",
              "alt": "Containers share a kernel",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 1015868,
              "key": "d4da7981-5813-47ea-bfb4-d996fdcede99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "||Virtual Machines|Containers|\n|---|------------------------|----------------|\n|**OS**|one host, many guests|one host|\n|**management software**|hypervisor|container manager|\n|**resource requirements**|heavy|light|\n|**speed**|slower|faster|\n|**flexibility**|total|limited|\n",
              "instructor_notes": ""
            },
            {
              "id": 898974,
              "key": "941cbe73-6ece-4a25-abda-ad4b556b388c",
              "title": "Containers vs Virtual Machines Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Virtual Machines (VMs):\n\nVirtual machines bundle together an application with it’s dependencies. Each VM has a complete OS, and multiple VMs can be run on the same host. The host operating system runs the VMs using a hypervisor, which is a special software that creates and manages the VMs. The hypervisor maintains logical separation of the VMs to prevent a problem with any one VM from affecting other VMs or the host operating system.\n\n### Containers:\n\nContainers also bundle together an application with it’s dependencies. Unlike VMs, containers do not have separate operating systems or virtualized hardware. They share a single operating system kernel. In practice, the containers are managed by a container manager, which serves a role similar to the hypervisor in a VM scenario. Containers are lighter-weight than VMs and have faster start-up times.\n\n## Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 898975,
              "key": "d9e48b47-17ea-4508-8497-8deaf1c34f0c",
              "title": "Containers vs. VMs",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d9e48b47-17ea-4508-8497-8deaf1c34f0c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these choices is true?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "VMs use a shared kernel to simulate a machine.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Containers use the Hypervisor to simulate a machine.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "VMs are lighter and faster to start than containers.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Containers share a kernel.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1015867,
              "key": "df3ccbc0-b7f7-460f-8ae2-593cc5e31f56",
              "title": "Containers vs. VMs",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df3ccbc0-b7f7-460f-8ae2-593cc5e31f56",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Containers are lighter and faster to start than VMs due to their shared:",
                "matchers": [
                  {
                    "expression": "[Kk]ernel"
                  }
                ]
              }
            },
            {
              "id": 899010,
              "key": "4726fadc-76cf-4a2a-9bb8-be0418a4fc58",
              "title": "What are containers Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\nSome popular Virtual Machine platforms are [VMWare](https://www.vmware.com/), [VirtualBox](https://www.virtualbox.org/), and [Parallels Desktop](https://www.parallels.com/).\n\nSome common container platforms include [Rkt](https://coreos.com/rkt/), [LXC and LXD](https://linuxcontainers.org), [OpenVz](https://openvz.org/), and [Docker](https://www.docker.com/). Docker is the most popular container platform, and will be used throughout this course. You will learn more about how to use Docker in the next concept.\n\n## Further Research\n\n- [Docker overview of containers](https://www.docker.com/resources/what-container)\n- [Redhat article on Docker containers](https://www.redhat.com/en/topics/containers/what-is-docker)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899012,
          "key": "5e96dde7-f1bd-452b-8e0f-ab4ed855bc8b",
          "title": "Docker",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e96dde7-f1bd-452b-8e0f-ab4ed855bc8b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 898995,
              "key": "fb1ce1c8-afef-406b-9e89-21591832d47f",
              "title": "Docker Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Docker - an open source container system\n\n[Docker](https://www.docker.com/) is the most popular container platform in the industry currently. Throughout the rest of this course, you will be using the Docker containers, and in this concept, you will prepare by installing Docker on your own machine.",
              "instructor_notes": ""
            },
            {
              "id": 898993,
              "key": "a56b1511-46f0-4e7d-b629-4b80d25bc596",
              "title": "FSND C4 L1 A04 Docker",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xrgDr8WJY3Q",
                "china_cdn_id": "xrgDr8WJY3Q.mp4"
              }
            },
            {
              "id": 898985,
              "key": "8974ed2d-d569-415f-920e-221b722dcbb2",
              "title": "Docker Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n[Docker](https://www.docker.com/) is both an open sourced container system and a company. Using Docker, you can create containers with both Linux and Windows kernels, although Windows containers are only available if you are running a Windows machine.\n\nThere are installers to work with Docker on all the major operating systems: Linux, OSX, and Windows. To get started with Docker on your own machine, you can find Docker installers [here](https://docs.docker.com/v17.12/install/). You should install Docker now so you will be ready to continue with the rest of this lesson.",
              "instructor_notes": ""
            },
            {
              "id": 1015875,
              "key": "3a8fe09d-befc-4af1-ba41-1f6c2a56e5b8",
              "title": "Docker Windows Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VlS867XHjfw",
                "china_cdn_id": "VlS867XHjfw.mp4"
              }
            },
            {
              "id": 1015872,
              "key": "8ce68646-5fe9-4298-b69a-81b4ffe62880",
              "title": "Docker Installation",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ce68646-5fe9-4298-b69a-81b4ffe62880",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I installed Docker",
                "I successfully executed `docker run hello-world`"
              ],
              "positive_feedback": "Great work! You are ready to proceed.",
              "video_feedback": null,
              "description": "Follow the link above to install Docker on your own machine."
            }
          ]
        },
        {
          "id": 922160,
          "key": "7d5fe670-e32e-4aa9-b084-5808232197c8",
          "title": "Docker Concepts",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7d5fe670-e32e-4aa9-b084-5808232197c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 898981,
              "key": "41b7b69d-fa61-4dde-8a76-02dee9a6005d",
              "title": "Docker Concepts",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Docker Concepts",
              "instructor_notes": ""
            },
            {
              "id": 898994,
              "key": "b1fa84e9-2faf-4e2b-89de-e4b326d5e42b",
              "title": "FSND C4 L1 A05 Docker Concepts",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UVeABQg9t18",
                "china_cdn_id": "UVeABQg9t18.mp4"
              }
            },
            {
              "id": 899007,
              "key": "bbe00680-ba63-41ff-a2eb-ed297907d854",
              "title": "Docker Concepts Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Docker Concepts Recap\n\n_Docker Engine_ is an application that consists of a _daemon_, an _API_, and a _client_: \n- The Docker _daemon_ is a server that manages the images, containers, networks, and volumes. \n- The Docker _client_ is the user interface for Docker. The client is a CLI, so most of the work you do with Docker will take place at the command line.\n\nThe client communicates with the daemon through the command line API as shown in the image below:",
              "instructor_notes": ""
            },
            {
              "id": 899008,
              "key": "028ce4b1-a9d0-4088-ab5c-eb0d0dc6de42",
              "title": "Docker Graphic",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d407c96_image1/image1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/028ce4b1-a9d0-4088-ab5c-eb0d0dc6de42",
              "caption": "Docker engine consists of the Docker Daemon, Docker API, and Docker Client",
              "alt": "Docker engine consists of the Docker Daemon, Docker API, and Docker Client",
              "width": 960,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 1015869,
              "key": "d3f080a6-4272-46e5-826a-050537e336da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You will be using the Docker Engine to create and run containers, so if you have not installed Docker using the links above, please be sure to do so.\n\nAdditional parts of the Docker platform you will interact with are the Docker _image_, _container_, and _registry_. \n\n### The Docker Image\n\nA Docker _image_ is the set of instructions for creating a container. The image typically includes a file system and the parameters that will be used for the container. \n\nImages are comprised of multiple layers. Each layer contains specific software.\n\nYou can create a custom Docker image for a specific application. Start with a standardized [_parent image_](https://docs.docker.com/glossary/?term=parent%20image) as the base layer. The parent image often contains the file system of a particular operating system, such as Ubuntu 18.04. Then add an additional layer to the image, on top of the base layer. You can add your application files to this additional layer. You can even add multiple additional layers, and distribute your application files across different layers, as appropriate for your needs.\n\nYou will be able to see this structure more clearly when you create Dockerfiles in the coming classroom concept.\n\n### The Docker Container\n\nYou have already been introduced to containers, and a Docker container is just the Docker-specific implementation of the concept. In practice, Docker containers are created from Docker images - a container is a runnable instance of an image. Note that since the image is a set of instructions for creating a container, multiple containers can be created from the same image.\n\n### Docker Registry\n\nDocker images can be stored and distributed using a [Docker registry](https://docs.docker.com/registry/). In the next classroom concept, you will download and run an image from [DockerHub](https://hub.docker.com/), which is a free registry with many images you can use.\n\n## Docker Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 898998,
              "key": "8ec2724b-ed10-40f9-be39-ef17c19a4074",
              "title": "Docker Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ec2724b-ed10-40f9-be39-ef17c19a4074",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Where are Docker images stored?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Docker Containers",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Docker Registries",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Docker.com",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Virtual Machines",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 898989,
              "key": "12888af5-aa5e-4f3f-9525-6a61ebf59de3",
              "title": "Docker Quiz 2",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "12888af5-aa5e-4f3f-9525-6a61ebf59de3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are components of the Docker Engine?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Docker Daemon",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Docker Client",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Docker Container",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Docker API",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 898979,
              "key": "2f1db5bd-b47e-4ae9-9688-05a5477f7cb3",
              "title": "Summary and Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nIn this section, you’ve learned about Docker, which is the most common container platform. You’ve also been introduced to concepts related to how Docker works, including the\n\r- Docker daemon,\n- Docker client,\n- Docker images and containers, and\n- the Docker Registry.\n\n## Further Research\n\nYou can read more about general Docker concepts [here](https://docs.docker.com/engine/docker-overview/).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899014,
          "key": "4f407634-b895-4e16-98a7-5b0c284a33cb",
          "title": "DockerHub",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f407634-b895-4e16-98a7-5b0c284a33cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899005,
              "key": "72771207-ec61-4a31-9e20-5e2ea7f96f77",
              "title": "DockerHub pre-concepts",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# DockerHub\n\nDockerHub is the world’s largest registry of Docker images with more than 100,000 images available. DockerHub is the default registry for Docker. It contains images ready to run a great variety of applications. \n\nIn the next video, you will walk through the steps of pulling an image from DockerHub and running the image on your own computer.\n\n## DockerHub Exercise",
              "instructor_notes": ""
            },
            {
              "id": 898992,
              "key": "6b3fd79f-726a-4743-a42b-b32a29d9960c",
              "title": "FSND C4 L1 A06 DockerHub",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cvyONBHYo3I",
                "china_cdn_id": "cvyONBHYo3I.mp4"
              }
            },
            {
              "id": 898980,
              "key": "946bdfd9-d77d-401a-919e-845c9ad3057a",
              "title": "Downloading and running an image from DockerHub",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### DockerHub Exercise Instructions\n\n1. Find the Postgres image by searching on [DockerHub](https://hub.docker.com/), or use [this link](https://hub.docker.com/_/postgres) to go directly to the image page. [Postgres](https://www.postgresql.org/) is an open source relational database, and the Postgres Docker image has the database software installed.\n2. On the command line tell docker to download the image to your machine: \n  ```bash\ndocker pull postgres:latest\n  ```\n3. Run the image using the `docker run` command, supplying a password for Postgres: \n  ```bash\ndocker run --name psql -e POSTGRES_PASSWORD=password! -p 5432:5432 -d postgres:latest\n  ```\nIn the command above:\n  - The `--name` flag allows you to specify a name for the container that can be used later to reference the container. If you don’t specify a name, Docker will assign a random string name to the container.\n  - The `-e` flag stands for “environment”. This sets the environment variable `POSTGRES_PASSWORD`  to the value `password!`.\n  - The `-p` flag stands for “publish”. This allows you to bind your local machine’s port 5432 to the container port 5432.\n  - The `-d` stands for “detach”. This tells Docker run the indicated image in the background and print the container ID. When you use this command, you will still be able to use the terminal to run other commands, otherwise you would need to open a new terminal.\n\n4. Download and install the [Postgres client](http://postgresguide.com/setup/install.html).\n5. Once you have the Postgres client installed, you can use it to connect with the Docker container database using the following command:\n  ```bash\npsql -h 0.0.0.0 -p 5432 -U postgres\n  ```\n  This command allows you to access the database using the same port that you exposed earlier. Note that after running that command you will need to enter the same password that you set with the `POSTGRES_PASSWORD` when creating the container (`password!`).\n\n6. Test the container with some SQL commands. For example, you can list all databases using `\\l` command or list all tables using the `\\dt` command. More commands can be found in the Postgres documentation [here](https://www.postgresql.org/docs/current/app-psql.html).\n7. When you are finished testing Postgres, you can quit your connection to postgres using `\\q`\n8. To stop the running Docker container, you will first need to find it. You can list the running containers with the command `docker ps`. Copy the id of your postgres container.\n9. Use this id to stop the container: \n  ```bash\ndocker stop <container_id>\n```",
              "instructor_notes": ""
            },
            {
              "id": 922191,
              "key": "eeb432a5-75ff-477d-ae3d-ab07bd65203f",
              "title": "DockerHub Checkpoint",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eeb432a5-75ff-477d-ae3d-ab07bd65203f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have downloaded and run the Postgres Docker image."
              ],
              "positive_feedback": "Excellent work! You now have some experience working with a Docker image and running container.",
              "video_feedback": null,
              "description": "Follow the steps above to download, run, and test the Postgres Docker image."
            },
            {
              "id": 922190,
              "key": "78d07f73-2e4d-42dc-a8e2-62a7ece36086",
              "title": "DockerHub Quizzes Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## DockerHub Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 922188,
              "key": "67adc92d-ba43-4b05-a9ef-0296ea36956f",
              "title": "Docker Registry",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "67adc92d-ba43-4b05-a9ef-0296ea36956f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "DockerHub is a ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Docker Engine",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Docker Registry",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Docker Client",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Docker Container",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 922187,
              "key": "dd389312-d4c1-4705-8dde-73506744a76c",
              "title": "Docker Run Flags",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd389312-d4c1-4705-8dde-73506744a76c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When used with a `docker run` command, the `-e`  flag allows you to:",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Exit the command line environment and run Docker in the background.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Specify environment variables for the Docker container.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Expose a port in the container to a port on your local machine.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 898984,
              "key": "b59a53da-53f9-4881-8324-f243c45c914c",
              "title": "Summary and Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nDockerHub is the largest and most popular Docker image registry, and in this classroom concept, you have gained some experience working with a DockerHub image and container. You downloaded and ran the Docker Postgres image, and you were able to test that the database was working by listing the databases in the container.\n\nOn DockerHub, you will find images designed to run many different applications and languages. These images can be used as they are, or as you shall see in the next section, as the base for designing your own images. \n\n## Further Research\n\nYou can explore popular Docker images by clicking on the “Browse Popular Images” link on [this](https://hub.docker.com/) page.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899015,
          "key": "f123f32d-4681-44e4-8ca1-682c621012a5",
          "title": "Dockerfiles",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f123f32d-4681-44e4-8ca1-682c621012a5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 898983,
              "key": "a421afa7-a516-416e-98c1-e265a4ce6738",
              "title": "Dockerfile pre-concepts",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dockerfiles\n\nDockerfiles are text files used to define Docker images. They contain commands used to define a source or parent image, copy files to the image, install software on the image, and define the application which will run when the image is invoked.\n\nIn the next video, you will walk through an example of a basic Dockerfile, with a discussion of the commands found on each line.",
              "instructor_notes": ""
            },
            {
              "id": 899003,
              "key": "6ba97669-39c6-4480-ada3-42dfc0f8facc",
              "title": "FSND C4 L1 A07 Dockerfile",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Nx-Ffx7DQuE",
                "china_cdn_id": "Nx-Ffx7DQuE.mp4"
              }
            },
            {
              "id": 898999,
              "key": "6cfc9339-2c82-4fb0-845c-fc6f529646f9",
              "title": "Dockerfile Concept Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap\n\nDockerfiles define Docker Images. As seen in the example above, a Dockerfile typically starts with a source image upon which you can add layers to build your own custom image. For example, in the video above, the Dockerfile started with the source image `python:3.7.2-slim`:\n\n```docker\nFROM python:3.7.2-slim\n\nCOPY . /app\nWORKDIR /app\n\nRUN pip install --upgrade pip\nRUN pip install flask\n\n\nENTRYPOINT [“python”, “app.py”]\n```\nAdditional layers in the Dockerfile can be used to install dependencies, like `flask` in the Dockerfile above. They can also be used to setup a working directory and define an entrypoint for your container. In the example above, the executable is `app.py`, which will be run when the container starts.\n\nThe image below summarizes the process of running a container starting from a Dockerfile:",
              "instructor_notes": ""
            },
            {
              "id": 898976,
              "key": "9ef4070f-1f59-47d5-88db-434dffb68304",
              "title": "Docker Container Creation",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d408208_image3/image3.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9ef4070f-1f59-47d5-88db-434dffb68304",
              "caption": "Docker files are used to build Docker Images. Docker images are run to create Docker Containers",
              "alt": "Docker files are used to build Docker Images. Docker images are run to create Docker Containers",
              "width": 597,
              "height": 455,
              "instructor_notes": null
            },
            {
              "id": 922207,
              "key": "0bbdf5d0-280c-4ff7-818b-98778f967226",
              "title": "Dockerfile summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Dockerfile Command Glossary\n\nIn the video example above, you were exposed to several common Dockerfile commands that can be used when creating your own Dockerfiles:\n\n- Dockerfile comments start with `#`.\n- `FROM` defines source image upon which the image will be based.\n- `COPY` copies files to the image.\n- `WORKDIR` defines the working directory for other commands.\n- `RUN` is used to run commands other than the main executable.\n- `ENTRYPOINT` is used to define the main executable.\n\n## Dockerfile Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 898990,
              "key": "03fa43de-4a66-4ffb-8228-4cab8903c92b",
              "title": "Dockerfile Problem Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "03fa43de-4a66-4ffb-8228-4cab8903c92b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which command would you use to specify a wsgi server as the main executable?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "RUN [\"gunicorn\", \"-b\", \":8080\", \"main:APP\"]",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "ENTRYPOINT [\"gunicorn\", \"-b\", \":8080\", \"main:APP\"]",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "WORKDIR [\"gunicorn\", \"-b\", \":8080\", \"main:APP\"]",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "FROM [\"gunicorn\", \"-b\", \":8080\", \"main:APP\"]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 898997,
              "key": "88b292a3-5593-4f76-8bfe-a9762d4356b2",
              "title": "Dockerfile Problem Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "88b292a3-5593-4f76-8bfe-a9762d4356b2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which command would you use to specify python:3.7.2-slim as the source image?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "RUN python:3.7.2-slim",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "ENTRYPOINT python:3.7.2-slim",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "WORKDIR python:3.7.2-slim",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "FROM python:3.7.2-slim",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 898988,
              "key": "102b9cd8-ea56-4830-a4a3-3703ccd8f008",
              "title": "Dockerfile Problem Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "102b9cd8-ea56-4830-a4a3-3703ccd8f008",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which command would run ‘apt-get update -y’ in preparation to install dependencies on the image?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "RUN apt-get update -y",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "ENTRYPOINT apt-get update -y",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "WORKDIR apt-get update -y",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "FROM apt-get update -y",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 922208,
              "key": "2f51f7c7-db25-4a21-9d51-77afaa0e028b",
              "title": "Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nIn this concept, you learned about Dockerfiles and how they are used to create Docker images. You saw an example of a Dockerfile built up in layers, starting with a single parent image and ending with a `flask` installation and an application entrypoint.\n\nYou also learned about some of the basic commands used to create Dockerfiles, including `FROM`, `COPY`, `WORKDIR`, `RUN`, and `ENTRYPOINT`. \n\nIn the next concept, you will create your own Docker containers starting with Dockerfiles.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 922204,
          "key": "d82346f4-5eaa-4264-8d5c-97c2cc6877f3",
          "title": "Dockerfile Exercises",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d82346f4-5eaa-4264-8d5c-97c2cc6877f3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899004,
              "key": "3f2e01aa-dabf-43e7-a3b9-ea8b548f23f4",
              "title": "Building and Running a Docker Container",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dockerfile Exercises\n\nIn the next video, you will walk through the process of building and running containers from two separate Dockerfiles. After the video, you will have the chance to try this yourself!",
              "instructor_notes": ""
            },
            {
              "id": 899002,
              "key": "06c23f53-79e6-4c51-a8e9-ecd058907e42",
              "title": "FSND C4 L1 A08 Building And Running Container",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mSb137H1IH8",
                "china_cdn_id": "mSb137H1IH8.mp4"
              }
            },
            {
              "id": 898987,
              "key": "db7cacea-712c-4a13-8812-e72975be9d35",
              "title": "Instructions for building and running a sample container",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise 1: Hello World\n\n- In a new directory for this exercise, create a file named ‘Dockerfile’.\n- In the Dockerfile, add the lines\n  ```docker\n  FROM  jessie-slim\n  \n  ENTRYPOINT [\"echo\", \"hello world\"]\n  ```\n\n- Build the image from the same directory using the command\n  ```bash\n  docker build --tag test .\n  ```\n  Note that the full stop `.` tells the `docker build` command using the Dockerfile found in the current directory.\n- Once the image is built, you can run the container with the command: \n  ```bash\n  docker run test -rm\n  ```",
              "instructor_notes": ""
            },
            {
              "id": 922210,
              "key": "dc86c385-5aaf-4f31-939a-24fd3c1d8871",
              "title": "Hello World Dockerfile Build",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dc86c385-5aaf-4f31-939a-24fd3c1d8871",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have created and tested a container using the “Hello World” Dockerfile above."
              ],
              "positive_feedback": "Excellent work! Next you will build a Flask application.",
              "video_feedback": null,
              "description": "Build and run a container using the “Hello World” Dockerfile instructions above."
            },
            {
              "id": 980468,
              "key": "d538f23a-6bdc-4cb9-8158-a0277cbfad31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise 2: Flask Example\n\n- Download the Dockerfile and app.py from [here](https://github.com/udacity/FSND_Deploy_Flask_App_to_Kubernetes_Using_EKS/tree/master/examples/flask) and place them in a new directory for this exercise.\n- Build the image with the same command used in the previous exercise\n  ```bash\n  docker build -t test .\n  ```\n  Here, the `-t` flag is an alternate way of writing `--tag`.\n- Run the container with the following command:\n  ```bash\n  docker run  -p 80:8080 test\n  ```\n  In this command, you are binding port 8080 of the container to the port 80 of your local machine. The flask application \n- Curl the endpoint \n  ```\n  curl http://0.0.0.0/\n  ```\n- When you are finished, get the id of the running container:\n  ```bash\n  docker ps\n  ```  \n- You can then use the id to stop the container:\n  ```bash\n  docker stop <Container Id>\n  ```\n",
              "instructor_notes": ""
            },
            {
              "id": 922212,
              "key": "de2e2175-70cd-4c81-91ac-9381bc78abec",
              "title": "Flask Application Dockerfile Build",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "de2e2175-70cd-4c81-91ac-9381bc78abec",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I have built and run an application using the Dockerfile and Flask application provided in the link above."
              ],
              "positive_feedback": "Excellent work!",
              "video_feedback": null,
              "description": "Build and run a container using the Dockerfile and Flask application linked above."
            },
            {
              "id": 980470,
              "key": "6db42f29-7762-4dbf-89ea-1c0f28f84f08",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nIn this concept, you practiced building two Docker containers from Dockerfiles. You also learned or revisited some of the commands and flags that are useful for this process, including:\n- `docker build` which will build an image based on a Dockerfile.\n- The `--tag` flag, which is used to name and optionally tag the image in the `name:tag` format.\n- The `docker run` command, which is used to run a container based on the image.\n- The `-p` flag can be used to map container ports to host machine ports.\n",
              "instructor_notes": ""
            },
            {
              "id": 980469,
              "key": "5341f458-d8ad-41f3-9605-dfcd378d23f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further Research\n\nFor more information about Dockerfiles and commands, see:\n* [Dockerfile reference](https://docs.docker.com/engine/reference/builder/) \n* [`docker build` command options and examples](https://docs.docker.com/engine/reference/commandline/build/)\n* [`docker run` command options and examples](https://docs.docker.com/engine/reference/commandline/run/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899016,
          "key": "dcd04973-2531-4ca9-bff8-b5285d9634df",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dcd04973-2531-4ca9-bff8-b5285d9634df",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899001,
              "key": "a0bdede3-812d-4562-8f07-cb935739d1a5",
              "title": "Lesson Summary Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 899000,
              "key": "2b46af81-d559-4ae0-80a4-c882c370be89",
              "title": "FSND C4 L1 A09 Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "h2AEEj23qyM",
                "china_cdn_id": "h2AEEj23qyM.mp4"
              }
            },
            {
              "id": 925483,
              "key": "d6f20859-079b-4a48-abf6-d9de021c66df",
              "title": "Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nIn this lesson, you\n- Learned about containers and the Docker container system\n- Learned about the difference between containers and traditional virtual machines\n- Pulled an image from DockerHub\n- Learned about Dockerfiles and the basic commands needed to write them\n- Built and ran containers from Dockerfiles\n\nExcellent work! You will be coming back to Docker in the final project, so keep these concepts in mind.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}