{
  "data": {
    "lesson": {
      "id": 900458,
      "key": "af87a2e0-67bf-4859-aec9-efe487eee24b",
      "title": "Introduction",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Welcome to the Server Deployment, Containerization, and Testing course!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/af87a2e0-67bf-4859-aec9-efe487eee24b/900458/1579728254379/Introduction+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/af87a2e0-67bf-4859-aec9-efe487eee24b/900458/1579728252184/Introduction+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 900459,
          "key": "f2fb9014-1a83-4c01-9ad9-ce1f1484908e",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f2fb9014-1a83-4c01-9ad9-ce1f1484908e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906665,
              "key": "87bc7221-24f6-4ff7-bad7-f1579db01547",
              "title": "FSND C4 L0 A01 V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "M247DCFLQvM",
                "china_cdn_id": "M247DCFLQvM.mp4"
              }
            },
            {
              "id": 921919,
              "key": "2b45da69-d94a-41c7-b92f-dce1c1348e88",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Course Outline\n\n### Lesson 1: Introduction\n\nMeet your instructor, Kennedy Behrman!\n\n### Lesson 2: Containers\n\nA _container_ is a running piece of software that bundles code along with all of its dependencies, including system tools, libraries, or configuration files. Building your application in a container allows the application to run consistently in any environment, whether that is environment is another computer's operating system or a cloud deployment.\n\nIn this lesson, you will learn about [Docker](https://www.docker.com/), the industry-standard tool for creating and deploying containers. You will also learn about Docker _images_, which are snapshots of a container. An image packages all the code, files, and environment variables needed to build the container, and images can be shared with others.\n\nYou will learn about _Dockerfiles_, which are text files that allow you to assemble your own custom images, and we will also point you to some resources, such as [Dockerhub](https://hub.docker.com/search?q=&type=image), which contain prebuilt images that you can use when getting started with your own containerized applications.\n\n### Lesson 3: Deployment\n\nIn lesson 3, you'll learn about [Kubernetes](https://kubernetes.io/), a container orchestration system that automates container deployment, scaling, and managment. You'll see how to deploy your own Docker container to a Kubernetes cluster using AWS' [Elastic Kubernetes Service](https://aws.amazon.com/eks/) (EKS). You'll also learn about continuous integration and continuous delivery and their corresponding AWS services: [CodeBuild](https://aws.amazon.com/codebuild/) and [CodePipeline](https://aws.amazon.com/codepipeline/).\n\n### Lesson 4: Project\n\nIn the last lesson, you will deploy a Flask application by first creating a Docker container for the application, and then you'll deploy the application to Amazon's Elastic Kubernetes Service using a continuous delivery pipeline.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}