{
  "data": {
    "lesson": {
      "id": 899837,
      "key": "123d0a0a-8137-4e21-881f-8d03fb371209",
      "title": "API Testing",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "This lesson teaches students the benefits and purposes of testing an API, Test-Driven Development for APIs and implementing the tests using unittest. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/123d0a0a-8137-4e21-881f-8d03fb371209/899837/1581172364973/API+Testing+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/123d0a0a-8137-4e21-881f-8d03fb371209/899837/1581172361986/API+Testing+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 899835,
          "key": "0ae8c4ed-e895-4f9e-8669-e8a8d8125811",
          "title": "Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ae8c4ed-e895-4f9e-8669-e8a8d8125811",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 917290,
              "key": "977607ba-9beb-4d5f-ae82-3c0ef6a2718c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Overview",
              "instructor_notes": ""
            },
            {
              "id": 899828,
              "key": "3968b76a-a21b-40ba-bfc7-927b33565b60",
              "title": "FSND C2 L4 A01 Lesson Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q_Jh4bsLUJ8",
                "china_cdn_id": "Q_Jh4bsLUJ8.mp4"
              }
            },
            {
              "id": 917291,
              "key": "1db881f1-a8da-4142-888a-6c04bcd05288",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As with any code you write, you want to test your API to ensure that requests are processed as you expect, the responses sent are correct, and the operations performed on the database are correct and persist. \n\nIn this lesson we'll cover:\n- Purpose and Benefits of API Testing\n- Testing a Flask Api with Unittest\n- Test-Driven Development for APIs\n\n## Why Testing?\nAs with all tests, writing unittests for your API verifies the behavior. For APIs, test should be written:\n- To confirm expected request handling behavior\n- To confirm success-response structure is correct\n- To confirm expected errors are handled appropriately\n- To confirm CRUD operations persist\n\nIn addition to verifying behavior, having a thorough test suite ensures that when you update your API, you can easily test all previous functionality. \n\nIf bugs are discovered while in development, they cost next to nothing to fix and don't have any negative impact on business outcomes or client experience. But if bugs make it to production, their cost can be quite largeâ€”they can impact performance, and fixing bugs can take large amounts of time for big, production applications. \n\nThe order of operations for app development should always be:\n1. Development\n2. Unit Testing\n3. Quality Assurance\n4. Production\n\nStep 2 is essential to ensuring the application is production-ready and time-to-production is used efficiently. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899836,
          "key": "c8bce42a-c8a6-4a4f-bbd2-b5ace422a575",
          "title": "Testing in Flask",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c8bce42a-c8a6-4a4f-bbd2-b5ace422a575",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906256,
              "key": "67e31ff3-ccec-42bd-856b-d667d368ff6f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Testing in Flask",
              "instructor_notes": ""
            },
            {
              "id": 900821,
              "key": "6c2749a3-7765-47f0-a02a-f9eb2c9d9f7f",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c899836xJUPYTERiht9hei9",
              "pool_id": "jupyter",
              "view_id": "jupyter-ku9x5",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Testing_Prep.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 917370,
              "key": "63caea3e-475b-46ac-994a-7b924121e591",
              "title": "FSND C2 L4 A02 Testing In Flask",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EiwiF5Mqz0E",
                "china_cdn_id": "EiwiF5Mqz0E.mp4"
              }
            },
            {
              "id": 899826,
              "key": "3472041c-d46d-4637-962f-ae92d466384b",
              "title": "Flask Testing Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Unittest Flask Key Structures\nAs we just saw, all of your Flask application tests will follow the same format:\n1. **Define the test case class** for the application (or section of the application, for larger applications).\n2. **Define and implement the `setUp` function.** It will be executed before each test and is where you should initialize the app and test client, as well as any other context your tests will need. The Flask library provides a test client for the application, accessed as shown below. \n3. **Define the `tearDown` method**, which is implemented after each test. It will run as long as `setUp` executes successfully, regardless of test success. \n4. **Define your tests.** All should begin with `\"test_\"` and include a doc string about the purpose of the test. In defining the tests, you will need to:\n    1. Get the response by having the client make a request\n    2. Use `self.assertEqual` to check the status code and all other relevant operations. \n5. **Run the test suite**, by running `python test_file_name.py` from the command line. \n\nHere's that same code (from the notebook above), for your reference:\n```\nclass AppNameTestCase(unittest.TestCase):\n    \"\"\"This class represents the ___ test case\"\"\"\n\n    def setUp(self):\n        \"\"\"Executed before each test. Define test variables and initialize app.\"\"\"\n        self.client = app.test_client\n        pass\n\n    def tearDown(self):\n        \"\"\"Executed after reach test\"\"\"\n        pass\n\n    def test_given_behavior(self):\n        \"\"\"Test _____________ \"\"\"\n        res = self.client().get('/')\n\n        self.assertEqual(res.status_code, 200)\n\n# Make the tests conveniently executable\nif __name__ == \"__main__\":\nunittest.main()\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 909323,
          "key": "8d7e8e71-45c7-4730-841e-9821bad16d85",
          "title": "Practice - Testing in Flask",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8d7e8e71-45c7-4730-841e-9821bad16d85",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 909324,
              "key": "b2f82d20-99d4-4281-9870-2df02948d6d8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c909323xJUPYTERLo76stdla",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-f2kfz",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 917372,
              "key": "e0b75387-00bf-4337-9e4e-cc473495e69e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution walkthrough",
              "instructor_notes": ""
            },
            {
              "id": 917371,
              "key": "c9607426-bdaf-4588-9ab7-3156d9f52cf4",
              "title": "FSND C2 L4 A03 Testing In Flask Example Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0kTJd_BsFVo",
                "china_cdn_id": "0kTJd_BsFVo.mp4"
              }
            },
            {
              "id": 917373,
              "key": "8caa20d8-79c2-40f8-b255-a4b296dff8c8",
              "title": "FSND C2 L4 A04 Testing In Flask Example Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "z-3KvxWaQLs",
                "china_cdn_id": "z-3KvxWaQLs.mp4"
              }
            },
            {
              "id": 917374,
              "key": "cc0a00aa-86c5-42e4-825b-5eb37cc51fc2",
              "title": "FSND C2 L4 A05 Testing In Flask Example Part 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "r6KHb1nS9Dc",
                "china_cdn_id": "r6KHb1nS9Dc.mp4"
              }
            }
          ]
        },
        {
          "id": 917380,
          "key": "012cae2e-a4ef-429f-aea6-d282da3b7e44",
          "title": "TDD for APIs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "012cae2e-a4ef-429f-aea6-d282da3b7e44",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 917381,
              "key": "27e10979-12cd-4031-9e9b-624a488886df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Test-Driven Development (TDD) for APIs",
              "instructor_notes": ""
            },
            {
              "id": 917382,
              "key": "85ce79c6-b3d8-4cd9-b778-cf0fdba71092",
              "title": "FSND C2 L4 A06 TDD For APIs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U74U2nWpPqc",
                "china_cdn_id": "U74U2nWpPqc.mp4"
              }
            },
            {
              "id": 917383,
              "key": "3d8307ac-efbb-4010-bee3-bc35ef95e73a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Test-Driven Development** (or **TDD**) is a software development paradigm used very commonly in production. It is based on a short, rapid development cycle in which tests are written before the executable code and constantly iterated on. \n1. Write test for specific application behavior. \n2. Run the tests and watch them fail. \n3. Write code to execute the required behavior.\n4. Test the code and rewrite as necessary to pass the test\n5. Refactor your code.\n6. Repeat - write your next test. \n\nOften while pair programming, one partner will write the test and the other will write the executable code, after which the partner will switch. This process is helpful for checking assumptions about behavior and making sure all expected behavior is captured. \n",
              "instructor_notes": ""
            },
            {
              "id": 917384,
              "key": "00d8a902-d122-4a5c-b237-f41b3880012f",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "00d8a902-d122-4a5c-b237-f41b3880012f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each step of Test-Driven Development with its order number. "
                },
                "concepts_label": "Order Number",
                "answers_label": "Step",
                "concepts": [
                  {
                    "text": "1",
                    "correct_answer": {
                      "id": "a1566244065818",
                      "text": "Write Test"
                    }
                  },
                  {
                    "text": "2",
                    "correct_answer": {
                      "id": "a1566244081925",
                      "text": "Fail Test"
                    }
                  },
                  {
                    "text": "3",
                    "correct_answer": {
                      "id": "a1566244083596",
                      "text": "Write Code"
                    }
                  },
                  {
                    "text": "4",
                    "correct_answer": {
                      "id": "a1566244084205",
                      "text": "Pass Test"
                    }
                  },
                  {
                    "text": "5",
                    "correct_answer": {
                      "id": "a1566244084789",
                      "text": "Refactor"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1566244065818",
                    "text": "Write Test"
                  },
                  {
                    "id": "a1566244084205",
                    "text": "Pass Test"
                  },
                  {
                    "id": "a1566244081925",
                    "text": "Fail Test"
                  },
                  {
                    "id": "a1566244083596",
                    "text": "Write Code"
                  },
                  {
                    "id": "a1566244084789",
                    "text": "Refactor"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 899834,
          "key": "7529c53d-c671-4ec7-bd7b-81ea374f72e3",
          "title": "Practice - TDD for APIs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7529c53d-c671-4ec7-bd7b-81ea374f72e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899830,
              "key": "95efcc45-e44c-4ab4-b4d4-5499eda7973e",
              "title": "TDD for APIs",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice - TDD for APIs",
              "instructor_notes": ""
            },
            {
              "id": 906379,
              "key": "006b2736-46cc-4bc3-b043-7db608e28a6a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c899834xJUPYTERLo0b4429b",
              "pool_id": "jupyterlab",
              "view_id": "jupyter-lab-j71jj",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 917385,
              "key": "296df4e8-f65c-4527-95da-8309ca6d32ed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution walkthrough",
              "instructor_notes": ""
            },
            {
              "id": 899829,
              "key": "f15be0ce-fbfc-4d75-a3f4-1032f2507625",
              "title": "FSND C2 L4 A07 TDD For APIs Exercise Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HzZZu8eKd28",
                "china_cdn_id": "HzZZu8eKd28.mp4"
              }
            }
          ]
        },
        {
          "id": 906260,
          "key": "7c4e3de2-a6cd-495c-96c3-f5d4217804c3",
          "title": "Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c4e3de2-a6cd-495c-96c3-f5d4217804c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 917387,
              "key": "c0867a29-cc9e-479c-88f8-25a689c8deb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Review",
              "instructor_notes": ""
            },
            {
              "id": 906261,
              "key": "1cfb29f6-4cdd-4dcf-aa6c-a3fd1e0b356b",
              "title": "FSND C2 L4 A08 Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OUvhZrbKY5o",
                "china_cdn_id": "OUvhZrbKY5o.mp4"
              }
            },
            {
              "id": 917386,
              "key": "9370cae0-3ca7-4b75-9637-22746cbc013f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At this point, you now know how to build an API that:\n* Handles multiple kinds of requests\n* Can handle a request body\n* Can format both successful responses and error responses\n\nAnd in this lesson, you also learned how to:\n* Test your API using Unittest\n* Build your API using Test-Driven Development (TDD)\n\nBy taking this approach in your future development, you'll be able to produce applications in a way that catches issues prior to putting them in front of the user, and in a way that makes it easier to maintain that quality as the app grows.\n\nNext, we'll be looking at how to make your API usable by others, through writing API documentation. Onwards!",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}