{
  "id": 2634,
  "project_id": 630,
  "upload_types": [
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(js|css|py|html|htm|txt|md|markdown|sql|swift|java|gradle|xml|rst|yml|yaml|rmd|pdf|docx|h|H|hh|hxx|h\\+\\+|c|C|cc|cpp|cxx|c\\+\\+)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "1. Add an additional question field such as rating and make all corresponding updates (db, api endpoints, add question form, etc.)\n\n2. INTENSE: Add users to the DB and track their game scores\n\n3. Add capability to create new categories. ",
  "hide_criteria": false,
  "created_at": "2019-06-12T02:10:58.884Z",
  "updated_at": "2020-03-02T09:02:50.329Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "checkmate_enabled": false,
  "checkmate_metadata": null,
  "available_for_cert_project": false,
  "classroom_node_id": 859442,
  "classroom_project_key": "6c4321a9-5aad-403a-9663-fc9a93670a35",
  "language": "en-us",
  "ndkeys": [
    "nd004",
    "nd004-beta",
    "nd0044",
    "nd0044-cn",
    "nd0044-ent",
    "nd0044-connect"
  ],
  "coursekeys": [],
  "sections": [
    {
      "id": 5650,
      "name": "Code Quality & Documentation",
      "created_at": "2019-07-03T17:36:45.443Z",
      "updated_at": "2019-07-03T17:36:50.395Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2634,
      "rubric_items": [
        {
          "id": 16196,
          "section_id": 5650,
          "passed_description": "The code adheres to the [PEP 8 style guide](https://www.python.org/dev/peps/pep-0008/) and follows common best practices, including:\n* [Variable and function names are clear](https://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions).\n* Endpoints are logically named.\n* Code is [commented appropriately](https://www.python.org/dev/peps/pep-0008/#comments).\n* The README file includes detailed instructions for scripts to install any project dependencies, and to run the development server.\n* Secrets are stored as environment variables.",
          "exceeded_description": null,
          "created_at": "2019-07-03T17:36:50.537Z",
          "updated_at": "2019-07-03T17:40:55.435Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Write clear, concise and well documented code",
          "exceedable": false
        },
        {
          "id": 16197,
          "section_id": 5650,
          "passed_description": "README includes:\n* Instructions for how to install project dependencies and start the project server. \n* Detailed documentation of API endpoints and expected behavior, using the format taught in the course:\n    * METHOD Url\n        * Request parameters\n        * Response body\n",
          "exceeded_description": null,
          "created_at": "2019-07-03T17:57:12.613Z",
          "updated_at": "2019-07-03T17:58:24.659Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Write an informative README File",
          "exceedable": false
        },
        {
          "id": 16198,
          "section_id": 5650,
          "passed_description": "Local files and virtual environment are included in .gitignore file",
          "exceeded_description": null,
          "created_at": "2019-07-03T17:58:27.783Z",
          "updated_at": "2019-07-03T17:59:01.347Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Leverage environment controls",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5651,
      "name": "Handling HTTP Requests",
      "created_at": "2019-07-03T17:36:54.036Z",
      "updated_at": "2019-07-03T17:37:13.088Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2634,
      "rubric_items": [
        {
          "id": 16199,
          "section_id": 5651,
          "passed_description": "RESTful principles are followed throughout the project, including appropriate naming of endpoints, use of HTTP methods GET, POST, and DELETE.\n\nRoutes perform CRUD operations on the psql database ",
          "exceeded_description": null,
          "created_at": "2019-07-03T17:59:30.215Z",
          "updated_at": "2019-07-03T18:00:03.408Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Follow RESTful principles",
          "exceedable": false
        },
        {
          "id": 16200,
          "section_id": 5651,
          "passed_description": "Complete all TODO flags in `backend/app.py`:\n- [ ] Endpoint to handle GET requests for questions, including pagination (every 10 questions). This endpoint should return a list of questions, number of total questions, current category, categories. \n- [ ] Endpoint to handle GET requests for all available categories. \n- [ ] Endpoint to DELETE question using a question ID. \n- [ ] Endpoint to POST a new question, which will require the question and answer text, category, and difficulty score. \n- [ ] Create a POST endpoint to get questions based on category. \n- [ ] Create a POST endpoint to get questions based on a search term. It should return any questions for whom the search term is a substring of the question. \n- [ ] Create a POST endpoint to get questions to play the quiz. This endpoint should take category and previous question parameters and return a random questions within the given category, if provided, and that is not one of the previous questions. \n",
          "exceeded_description": null,
          "created_at": "2019-07-03T18:11:40.409Z",
          "updated_at": "2019-07-03T18:12:11.961Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Utilize multiple HTTP request methods",
          "exceedable": false
        },
        {
          "id": 16201,
          "section_id": 5651,
          "passed_description": "Project handles common errors using the ```@app.errorhandler``` decorator function to format an API friendly JSON error response\n\nPasses all provided tests related to error handling ",
          "exceeded_description": null,
          "created_at": "2019-07-03T18:12:12.142Z",
          "updated_at": "2019-07-03T18:12:38.946Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Handle common errors ",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5652,
      "name": "API Testing & Documentation",
      "created_at": "2019-07-03T17:37:13.245Z",
      "updated_at": "2019-07-03T17:40:55.439Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 2634,
      "rubric_items": [
        {
          "id": 16202,
          "section_id": 5652,
          "passed_description": "Import and utilize unittest library to test each endpoint for expected success and error behavior. Each endpoint should have at one test for the expected behavior and tests for error handling if applicable. ",
          "exceeded_description": null,
          "created_at": "2019-07-03T18:12:54.229Z",
          "updated_at": "2019-07-03T18:13:24.597Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Use unittest to test flask application for expected behavior",
          "exceedable": false
        },
        {
          "id": 16203,
          "section_id": 5652,
          "passed_description": "Project includes tests to ensure CRUD operations are successful and persist accurately in the database for GET, POST, PUT and DELETE HTTP requests.",
          "exceeded_description": null,
          "created_at": "2019-07-03T18:13:24.816Z",
          "updated_at": "2019-07-03T18:13:53.151Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Demonstrate validity of API responses",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 630,
    "name": "Trivia API",
    "nanodegree_key": "nd004",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": null,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 11,
    "created_at": "2019-07-05T06:02:44.182Z",
    "updated_at": "2020-06-01T01:50:41.268Z",
    "price": "7.0",
    "ungradeable_price": "3.0",
    "audit_price": null
  }
}