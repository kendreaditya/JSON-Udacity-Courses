{
  "data": {
    "lesson": {
      "id": 907837,
      "key": "bc24f190-2e3d-4323-a1a0-603e64102289",
      "title": "Build a CRUD App with SQLAlchemy ORM - Part 2",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Finish developing our To-Do app with update and delete functionality. Model relationships with To-Do lists. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/bc24f190-2e3d-4323-a1a0-603e64102289/907837/1581172420371/Build+a+CRUD+App+with+SQLAlchemy+ORM+-+Part+2+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/bc24f190-2e3d-4323-a1a0-603e64102289/907837/1581172412804/Build+a+CRUD+App+with+SQLAlchemy+ORM+-+Part+2+Subtitles.zip"
          },
          {
            "name": "Todoapp-Updates-Deletes",
            "uri": "https://video.udacity-data.com/topher/2019/August/5d5fc44f_todoapp-updates-deletes/todoapp-updates-deletes.zip"
          },
          {
            "name": "Todoapp-Updates",
            "uri": "https://video.udacity-data.com/topher/2019/August/5d5fc559_todoapp-updates/todoapp-updates.zip"
          },
          {
            "name": "Todoapp-Crud-Lists",
            "uri": "https://video.udacity-data.com/topher/2019/August/5d5fcc59_todoapp-crud-lists/todoapp-crud-lists.zip"
          },
          {
            "name": "Todoapp-Crud-Lists-Toggle",
            "uri": "https://video.udacity-data.com/topher/2019/August/5d5fcfcb_todoapp-crud-lists-toggle/todoapp-crud-lists-toggle.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 907830,
          "key": "d10c337b-09f6-418f-bb3b-f44604ad6dd1",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d10c337b-09f6-418f-bb3b-f44604ad6dd1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 918949,
              "key": "8640c0c9-b127-4265-aaeb-556e053d201e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome to your final lesson\n\nThe final set of concepts covered in this course include:\n\n* Implementing update functionality: update a todo item's completed state\n* Implementing delete functionality: remove a todo item\n* Model relationships between objects in SQL and SQLAlchemy\n  * Setting up Foreign Key constraints\n* Building CRUD on Lists of To-Do items\n* Handling the special case of modeling many-to-many relationships\n\nThese final set of concepts should teach you everything you need to know to be able to complete the final project at the end of this course.\n\nLet's get started. Head on over to the next section!\n\nWe'll start first with implementing update functionality in a CRUD app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 909545,
          "key": "25ddc15b-823c-461a-a257-8802e2695e01",
          "title": "Updating a Todo Item: Part I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "25ddc15b-823c-461a-a257-8802e2695e01",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 916894,
              "key": "2579f36b-8c14-4bd3-88f6-faa81d4f4c30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Implement Updating a Todo Item",
              "instructor_notes": ""
            },
            {
              "id": 918956,
              "key": "c685c700-bd49-4a46-a329-44ef6147deaa",
              "title": "ND004 C01 L07 02 Update A Todo Item- The “U” In CRUD",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0Xm2VnXRzVk",
                "china_cdn_id": "0Xm2VnXRzVk.mp4"
              }
            },
            {
              "id": 918955,
              "key": "6d0aeaa1-7358-42a6-8e13-cf50409688f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\nAn **update** involves setting the attributes of an existing object in the database.\n\nIn SQL:\n\n```\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\nIn SQLAlchemy ORM:\n\n```\nuser = User.query.get(some_id)\nuser.name = 'Some new name'\ndb.session.commit()\n```",
              "instructor_notes": ""
            },
            {
              "id": 916893,
              "key": "fb4219da-9a80-4421-bee3-37ca11b504e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using the Jinja `if` statement",
              "instructor_notes": ""
            },
            {
              "id": 909547,
              "key": "ff94744f-33c5-4c87-8041-5cb0d5e4fdd1",
              "title": "ND004 C01 L07 03 Update Todo Item Walk-Through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "r-6MkZlDJ_8",
                "china_cdn_id": "r-6MkZlDJ_8.mp4"
              }
            },
            {
              "id": 918957,
              "key": "759d057b-bf52-4f59-a51f-405c33d8175e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Check out the Jinja Docs\n\n[Click here for the Jinja Docs](http://jinja.pocoo.org/docs/2.10/templates/#if)",
              "instructor_notes": ""
            },
            {
              "id": 918958,
              "key": "80ca649b-37ca-4dab-8e54-906867941b32",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Next up: adding update functionality to our Todo App\n\nFeel free to use the interactive workspace below to follow along the walk-throughs ahead in this lesson in adding update functionality to your Todo app. Have this page open in a separate tab or window, so you can continue to use it throughout the concepts in this lesson.\n\n### Starter Code\n[Click here: todoapp-migrations.zip](https://video.udacity-data.com/topher/2019/August/5d5dec79_todoapp-migrations/todoapp-migrations.zip)",
              "instructor_notes": ""
            },
            {
              "id": 918960,
              "key": "fbe24f66-f0b4-47dd-a3eb-5c32c15d0c8c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c907714xJUPYTERL1uvp3au1",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-8y900",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 918959,
              "key": "614086f8-3448-4f10-be6d-0d037e2c1810",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Walk-throughs",
              "instructor_notes": ""
            },
            {
              "id": 916892,
              "key": "a7b66ed6-6806-40a0-95af-52c3bb36bbef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Modifying the view in `index.html` to show checkboxes",
              "instructor_notes": ""
            },
            {
              "id": 916895,
              "key": "ccb74a2a-c421-4fb3-afa9-2f754e594300",
              "title": "ND004 C01 L07 03.1 Update Todo Item Walk-Through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HAZwYPOZf3s",
                "china_cdn_id": "HAZwYPOZf3s.mp4"
              }
            },
            {
              "id": 916896,
              "key": "569b78e2-2420-45e6-8a5f-2a43e7254c3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Having the checkboxes send off update (`POST`) requests",
              "instructor_notes": ""
            },
            {
              "id": 916897,
              "key": "2787fa8d-4c3c-48c5-b93f-4c10171cafe4",
              "title": "ND004 C01 L07 03.2 Update Todo Item Walk-Through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "20_s84r0j2Q",
                "china_cdn_id": "20_s84r0j2Q.mp4"
              }
            }
          ]
        },
        {
          "id": 916899,
          "key": "6b186b78-30f1-4a3e-bceb-796a66d2cbc1",
          "title": "Updating a Todo Item: Part II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b186b78-30f1-4a3e-bceb-796a66d2cbc1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 916900,
              "key": "e3121c1b-3093-4002-883f-f509fedb3216",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Defining the handler for the route",
              "instructor_notes": ""
            },
            {
              "id": 916902,
              "key": "e52e7985-2af0-4cad-bfda-1eefe4ca5dc3",
              "title": "ND004 C01 L07 03.3 Update Todo Item Walk-Through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fhtBPu5yGLw",
                "china_cdn_id": "fhtBPu5yGLw.mp4"
              }
            },
            {
              "id": 916901,
              "key": "6171555f-69ee-4b15-ad51-8b5c57372a1f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Fixing the ordering",
              "instructor_notes": ""
            },
            {
              "id": 916903,
              "key": "f2298210-baf4-41c4-b4ff-4a87f5580d26",
              "title": "ND004 C01 L07 03.4 Update Todo Item Walk-Through",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "V2y8J81UEqw",
                "china_cdn_id": "V2y8J81UEqw.mp4"
              }
            },
            {
              "id": 918961,
              "key": "60c0320f-7d7e-4bc8-99a7-8e5b3aa911a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## We're done with update!\n\n\nNext up: adding the ability to _delete_ To-Do items in our app.\n\n### Final Code\n\n#### app.py\n\n```py\n\n@app.route('/todos/<todo_id>/set-completed', methods=['POST'])\ndef set_completed_todo(todo_id):\n  try:\n    completed = request.get_json()['completed']\n    print('completed', completed)\n    todo = Todo.query.get(todo_id)\n    todo.completed = completed\n    db.session.commit()\n  except:\n    db.session.rollback()\n  finally:\n    db.session.close()\n  return redirect(url_for('index'))\n```\n\n#### index.html\n\n```html\n<html>\n  <head>\n    <title>Todo App</title>\n    <style>\n      .hidden {\n        display: none;\n      }\n      ul {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        width: 300px;\n      }\n      li {\n        clear: both;\n      }\n      li button {\n        -webkit-appearance: none;\n        border: none;\n        outline: none;\n        color: red;\n        float: right;\n        cursor: pointer;\n        font-size: 20px;\n      }\n      .lists-wrapper, .todos-wrapper {\n        display: inline-block;\n        vertical-align: top;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"lists-wrapper\">\n      <ul id=\"lists\">\n        {% for list in lists %}\n        <li>\n          <a href=\"/lists/{{ list.id }}\">\n            {{ list.name }}\n          </a>\n        </li>\n        {% endfor %}\n      </ul>\n    </div>\n    <div class=\"todos-wrapper\">\n      <h4>{{ active_list.name }}</h4>\n      <form id=\"form\">\n        <input type=\"text\" id=\"description\" name=\"description\" />\n        <input type=\"submit\" value=\"Create\" />\n      </form>\n      <div id=\"error\" class=\"hidden\">Something went wrong!</div>\n      <ul id=\"todos\">\n        {% for todo in todos %}\n        <li>\n          <input class=\"check-completed\" data-id=\"{{ todo.id }}\" type=\"checkbox\" {% if todo.completed %} checked {% endif %} />\n          {{ todo.description }}\n        </li>\n        {% endfor %}\n      </ul>\n    </div>\n    <script>\n      const checkboxes = document.querySelectorAll('.check-completed');\n      for (let i = 0; i < checkboxes.length; i++) {\n        const checkbox = checkboxes[i];\n        checkbox.onchange = function(e) {\n          const newCompleted = e.target.checked;\n          const todoId = e.target.dataset['id'];\n          fetch('/todos/' + todoId + '/set-completed', {\n            method: 'POST',\n            body: JSON.stringify({\n              'completed': newCompleted\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n          .then(function() {\n            document.getElementById('error').className = 'hidden';\n          })\n          .catch(function() {\n            document.getElementById('error').className = '';\n          })\n        }\n      }\n      document.getElementById('form').onsubmit = function(e) {\n        e.preventDefault();\n        fetch('/todos/create', {\n          method: 'POST',\n          body: JSON.stringify({\n            'description': document.getElementById('description').value\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        .then(function(response) {\n          return response.json();\n        })\n        .then(function(jsonResponse) {\n          console.log(jsonResponse);\n          const liItem = document.createElement('LI');\n          liItem.innerHTML = jsonResponse['description'];\n          document.getElementById('todos').appendChild(liItem);\n          document.getElementById('error').className = 'hidden';\n        })\n        .catch(function() {\n          document.getElementById('error').className = '';\n        })\n      }\n    </script>\n  </body>\n</html>\n```",
              "instructor_notes": ""
            },
            {
              "id": 919000,
              "key": "652c85ee-9313-4321-bebe-dec9b6153b8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Code\n\n##### [Download by clicking here: todoapp-updates.zip](https://video.udacity-data.com/topher/2019/August/5d5fc559_todoapp-updates/todoapp-updates.zip)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 907827,
          "key": "1e001095-2857-4f8e-b7fe-a66f8fa76207",
          "title": "DELETE a Todo item - Exercise",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e001095-2857-4f8e-b7fe-a66f8fa76207",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907791,
              "key": "e44e1975-bb89-4f77-886d-9144c1197537",
              "title": "DELETE a todo item Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# DELETE a todo item: The \"D\" in CRUD\n\nWe're almost done with CRUD!\n\nLearning how to handle deletes in our application implements the last operation of the 4 operations in CRUD.",
              "instructor_notes": ""
            },
            {
              "id": 907792,
              "key": "0ce18367-4a25-4f0b-83fd-06d9f8d4244c",
              "title": "ND004 C01 L07 04 DELETE A Todo Item",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "23WUhMIaP9c",
                "china_cdn_id": "23WUhMIaP9c.mp4"
              }
            },
            {
              "id": 918962,
              "key": "9910001c-2dab-45b2-9187-f89984e3e333",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n**Deletes** deal with removing existing objects in our database\n\nIn SQL:\n```\nDELETE FROM table_name\nWHERE condition;\n```\n\nIn SQLAlchemy ORM:\n```py\ntodo = Todo.query.get(todo_id) \ndb.session.delete(todo) # or...\nTodo.query.filter_by(id=todo_id).delete()\ndb.session.commit()\n```\n\n\n## Steps we'll implement:\n\n* Loop through every To-Do item and show a delete button\n* Pressing the delete button sends a request that includes which to-do item to delete\n* The controller takes the user input, and notifies the models to delete the To-Do object by ID\n* On successful deletion by the models, the controller should notify the view to refresh the page and redirect to our homepage, showing a fresh fetch of all To-Do items to now exclude the removed item.\n\n\n#### Using the DELETE method\n\nRequests that delete objects should use the method `DELETE`, as opposed to `POST`, `GET`, etc.  when sending requests to the server.\n",
              "instructor_notes": ""
            },
            {
              "id": 909367,
              "key": "20d15519-7f7d-45e0-a1af-419ab290c2c9",
              "title": "ND004 C01 L07 05 DELETE Exercise Walthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "a43M8qRSGXE",
                "china_cdn_id": "a43M8qRSGXE.mp4"
              }
            },
            {
              "id": 918964,
              "key": "17d2aa77-2508-4167-8573-423a458ff855",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### You can use the interactive workspace below to complete your To-Do app.",
              "instructor_notes": ""
            },
            {
              "id": 918963,
              "key": "6e4ef887-9bf1-4c49-842e-3eea7e57ade7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c907714xJUPYTERL1uvp3au1",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-byrqb",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 918965,
              "key": "4c6059e2-8ff4-4eab-8a55-c56d0bca0276",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c6059e2-8ff4-4eab-8a55-c56d0bca0276",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Loop through every To-Do item and show a delete button",
                "Implement: pressing the delete button sends a request that includes which to-do item to delete",
                "Implement the controller to take the user's input and notify models to delete the To-Do item",
                "On successful deletion by the models, allow the controller to notify the view to redirect to the index (/) route"
              ],
              "positive_feedback": "**Awesome job!** Compare your implementation to the proposed solution located in the next section.",
              "video_feedback": null,
              "description": "Implement the following to successfully delete To-Do items in your app"
            },
            {
              "id": 918966,
              "key": "3bdc783b-6201-48fd-a8d1-828d8323ca25",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Try to implement deletion on your own before looking at the solution\n\nWhen you are finished, or if you get stuck, check out the solution located in the next section.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 918967,
          "key": "f40363f9-96fc-45a6-9ba3-bdcbc8957e72",
          "title": "DELETE a Todo item - Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f40363f9-96fc-45a6-9ba3-bdcbc8957e72",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 918968,
              "key": "731d951b-1bb4-48c4-b522-0704c283249a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Delete a Todo Item - Solution\n\n##### index.html\n```\n<ul id=\"todos\">\n  {% for todo in todos %}\n  <li>\n    <input class=\"check-completed\" data-id=\"{{ todo.id }}\" type=\"checkbox\" {% if todo.completed %} checked {% endif %} />\n    {{ todo.description }}\n    <button class=\"delete-button\" data-id=\"{{ todo.id }}\">&cross;</button>\n  </li>\n  {% endfor %}\n</ul>\n```\n\nIn `<script>...</script>` located near the end of the `body`,\n```\nconst deleteBtns = document.querySelectorAll('.delete-button');\n  for (let i = 0; i < deleteBtns.length; i++) {\n    const btn = deleteBtns[i];\n    btn.onclick = function(e) {\n      const todoId = e.target.dataset['id'];\n      fetch('/todos/' + todoId, {\n        method: 'DELETE'\n      });\n    }\n  }\n```\n\n##### app.py\n\n```\n@app.route('/todos/<todo_id>', methods=['DELETE'])\ndef delete_todo(todo_id):\n  try:\n    Todo.query.filter_by(id=todo_id).delete()\n    db.session.commit()\n  except:\n    db.session.rollback()\n  finally:\n    db.session.close()\n  return jsonify({ 'success': True })\n```",
              "instructor_notes": ""
            },
            {
              "id": 918999,
              "key": "353b7c40-9d44-4666-bcd4-69fde34e63bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Code\n\n##### [Download the solution by clicking here: todoapp-updates-deletes.zip](https://video.udacity-data.com/topher/2019/August/5d5fc44f_todoapp-updates-deletes/todoapp-updates-deletes.zip)\n\nTo run it:\n\n```sh\n$ pip3 install -r requirements.txt\n$ FLASK_APP=app.py FLASK_DEBUG=true flask run\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 907829,
          "key": "ee711f0f-0e5e-4506-8811-fbe9b94c6b50",
          "title": "Intro: Modeling Relationships",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee711f0f-0e5e-4506-8811-fbe9b94c6b50",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907797,
              "key": "fe89fa33-6c70-4faa-bdcc-526e7e700140",
              "title": "REVIEW CRUD on an item Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction: Modeling Relationships\n\nSo far, we've completed doing CRUD for a _single_ model: a To Do item. The CRUD implementation patterns we've learned can apply to multiple models for any given web application, so long as those models do not have relationships between them. However, we'll often be implementing web apps with multiple models that have relationships with one another.\n\nThe relationships between these models can determine if certain actions on one model should happen on other models, so that when something happens to one model, related model objects should also be affected (by being created, read, updated, or deleted).\n\nExamples are:\n* Removing a User's account should remove all of that user's photos, documents, etc.\n* Deleting a Discussion Thread should delete all of its comments.\n* Deactivating the profile of an Airbnb host should deactivate all of that host's listings.\n* Accessing a Blog Post should also access all of its comments.\n* Accessing an Airbnb host's profile should also access all of their listings.\n\n\nIn order to handle CRUD across related models that can often have relationships with one another, we'll need to learn about how we model relationships, both reviewing relationship modeling in SQL and learning particularly about how we implement them in SQLAlchemy ORM.\n\nLet's put aside our To-Do app development for now to learn about mapping relationships between models. Once we've done that, we'll come back to our To-Do app to implement them.",
              "instructor_notes": ""
            },
            {
              "id": 907809,
              "key": "99342297-c023-42bc-aede-e4d44ae4821b",
              "title": "ND004 C01 L07 06 REVIEW CRUD On An Item",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Fjb8gYBA170",
                "china_cdn_id": "Fjb8gYBA170.mp4"
              }
            }
          ]
        },
        {
          "id": 907832,
          "key": "ec589ed8-9eb8-4141-b0c1-05fc9cda6846",
          "title": "Review: Relationships & Joins",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec589ed8-9eb8-4141-b0c1-05fc9cda6846",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907799,
              "key": "1ba7fdc8-6fe2-4f72-a8ec-8c24254592b7",
              "title": "Model RELATIONSHIPS b/t todo lists and todo items Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Review: Relationships & Joins",
              "instructor_notes": ""
            },
            {
              "id": 909368,
              "key": "c4266e0d-18ef-467a-b9fd-474733176b08",
              "title": "ND004 C01 L07 07 Recall Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RgOXSZhYVe4",
                "china_cdn_id": "RgOXSZhYVe4.mp4"
              }
            },
            {
              "id": 918970,
              "key": "63dcb329-9a53-4f48-a6b3-58a8b439b78b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources on SQL Joins\n\n* [SQL Joins Explained](http://www.sql-join.com/sql-join-types)\n* [SQL | Join (Inner, Left, Right and Full Joins) -- GeeksforGeeks](https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/)",
              "instructor_notes": ""
            },
            {
              "id": 918971,
              "key": "7324d9cb-af35-4ff1-9ac3-4ef70878a191",
              "title": "Inner vs Outer Join",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7324d9cb-af35-4ff1-9ac3-4ef70878a191",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the difference between an inner join and an outer join?",
                "answers": [
                  {
                    "id": "a1566530705536",
                    "text": "An INNER join selects all rows from both tables that have matching primary and foreign keys",
                    "is_correct": false
                  },
                  {
                    "id": "a1566530719918",
                    "text": "An OUTER join selects all rows from both tables that have matching primary and foreign keys",
                    "is_correct": false
                  },
                  {
                    "id": "a1566530720511",
                    "text": "An INNER join selects all rows from both tables that have a match between the columns",
                    "is_correct": true
                  },
                  {
                    "id": "a1566530850550",
                    "text": "An OUTER join selects all rows from both tables that have a match between the columns",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 918972,
              "key": "db8ce1df-50e6-42b8-b2e7-03a81e817009",
              "title": "SQL JOIN",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "db8ce1df-50e6-42b8-b2e7-03a81e817009",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "By default, in SQL, specifying the keyword `JOIN` (with no prefix) refers to a/an",
                "answers": [
                  {
                    "id": "a1566530966519",
                    "text": "INNER JOIN",
                    "is_correct": true
                  },
                  {
                    "id": "a1566530990141",
                    "text": "OUTER JOIN",
                    "is_correct": false
                  },
                  {
                    "id": "a1566530999799",
                    "text": "FULL JOIN",
                    "is_correct": false
                  },
                  {
                    "id": "a1566531002531",
                    "text": "OUTER LEFT JOIN",
                    "is_correct": false
                  },
                  {
                    "id": "a1566531005767",
                    "text": "OUTER RIGHT JOIN",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 909492,
              "key": "96ac9aab-798b-415a-85bd-4f9dab5d3325",
              "title": "Join Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "96ac9aab-798b-415a-85bd-4f9dab5d3325",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here's the SQL join example shown in the above video:\n\n```sql\nSELECT make, model, year FROM vehicles\n    JOIN drivers\n    ON vehicles.driver_id = drivers.id\n    WHERE drivers.name = 'Sarah';\n```\n\nSee if you can label the following parts of the statement:"
                },
                "concepts_label": "Part of join statement",
                "answers_label": "What is it?",
                "concepts": [
                  {
                    "text": "Parent table",
                    "correct_answer": {
                      "id": "a1565484049295",
                      "text": "`drivers`"
                    }
                  },
                  {
                    "text": "Child table",
                    "correct_answer": {
                      "id": "a1565484135629",
                      "text": "`vehicles`"
                    }
                  },
                  {
                    "text": "Primary key (on parent)",
                    "correct_answer": {
                      "id": "a1565484142603",
                      "text": "`drivers.id`"
                    }
                  },
                  {
                    "text": "Foreign key (on child)",
                    "correct_answer": {
                      "id": "a1565484167158",
                      "text": "`vehicles.driver_id`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1565484049295",
                    "text": "`drivers`"
                  },
                  {
                    "id": "a1565484135629",
                    "text": "`vehicles`"
                  },
                  {
                    "id": "a1565484167158",
                    "text": "`vehicles.driver_id`"
                  },
                  {
                    "id": "a1565484142603",
                    "text": "`drivers.id`"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 909494,
          "key": "e0943624-8874-43c4-bd6b-0af4a12e38bc",
          "title": "db.relationship",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0943624-8874-43c4-bd6b-0af4a12e38bc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 909495,
              "key": "25f800ff-6b22-411d-8d46-17b151a09428",
              "title": "ND004 C01 L07 08 Model RELATIONSHIPS B-T Todo Lists And Todo Items",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WULi0shD61Q",
                "china_cdn_id": "WULi0shD61Q.mp4"
              }
            },
            {
              "id": 918973,
              "key": "b3527c0e-fc31-4117-99bb-b36e6d40d007",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n* SQLAlchemy configures the settings between model relationships _once_, and generates JOIN statements for us whenever we need them.\n* `db.relationship` is an interface offered in SQLAlchemy to provide and configure a mapped relationship between two models.\n* `db.relationship` is defined on the **parent** model, and it sets:\n  * the name of its children (e.g. `children`), for example `parent1.children`\n  * the name of a parent on a child using the `backref`, for example `child1.my_amazing_parent`\n\n\n## Resources\n* [Flask-SQLAlchemy - Simple Relationships](https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/#simple-relationships)\n* [SQLAlchemy Docs: Relationship API](https://docs.sqlalchemy.org/en/latest/orm/relationship_api.html#sqlalchemy.orm.relationship)",
              "instructor_notes": ""
            },
            {
              "id": 918974,
              "key": "2bf8dd0d-bfc9-46c6-a7a2-49658a8f6ae9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d5f5ed0_screen-shot-2019-08-22-at-8.34.29-pm/screen-shot-2019-08-22-at-8.34.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2bf8dd0d-bfc9-46c6-a7a2-49658a8f6ae9",
              "caption": "",
              "alt": "",
              "width": 705,
              "height": 402,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 907828,
          "key": "eead4644-3209-4b98-9ef8-0e5b6e22a46a",
          "title": "Configuring Relationships",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eead4644-3209-4b98-9ef8-0e5b6e22a46a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907802,
              "key": "8ab397bd-3ec1-4ca0-92cf-318d7074aee7",
              "title": "Modeling relationships Answer to exercise Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Configuring Relationships",
              "instructor_notes": ""
            },
            {
              "id": 907805,
              "key": "0069ec57-3c77-4678-a221-88199e079fd2",
              "title": "ND004 C01 L07 09 Configuring Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QATpsBELc8s",
                "china_cdn_id": "QATpsBELc8s.mp4"
              }
            },
            {
              "id": 918975,
              "key": "7898ffb2-02b0-4489-b63b-a13a7c81eb40",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n* When calling `child1.some_parent`, SQLAlchemy determines when we load the parent from the database.\n\n#### Why is it important to care about when we load parents?\n  * Joins are expensive.\n  * We should avoid having the user idling. Delays more than 150ms are noticeable, so milliseconds of performance matter!\n  * We should make sure the joins happen during a time and place in the UX that doesn't negatively impact the experience too much.",
              "instructor_notes": ""
            },
            {
              "id": 907807,
              "key": "3ea5a7cc-50a1-4eaf-8a37-3b205b26cdd4",
              "title": "Modeling relationships Answer to exercise Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lazy loading vs. Eager loading",
              "instructor_notes": ""
            },
            {
              "id": 916906,
              "key": "339bc6bd-1745-41e4-ad8f-a476cd6dd598",
              "title": "ND004 C01 L07 09.1 Configuring Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oq-Wqp_BSps",
                "china_cdn_id": "oq-Wqp_BSps.mp4"
              }
            },
            {
              "id": 918976,
              "key": "bd237811-8fdf-4b9b-b668-a556f29cf253",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n##### Lazy loading\nLoad needed joined data only as needed. **Default** in SQLAlchemy.\n* Pro: \tno initial wait time. Load only what you need.\n* Con:\tproduces a join SQL call every time there is a request for a joined asset.\n\tBad if you do this a lot.\n\n##### Eager loading\nLoad all needed joined data objects, all at once.\n* Pro: \treduces further queries to the database. Subsequent SQL calls read existing data\n* Con: \tloading the joined table has a long upfront initial load time.\n\n`lazy=True` (lazy loading) is the default option in `db.relationship`:\n\n```\nchildren = db.relationship('ChildModel', backref='some_parent', lazy=True)\n```\n\n### Other loading options we can use\n\nSee [the SQLAlchemy Docs on Relationship Loading Techniques](https://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html) for more loading options.\n",
              "instructor_notes": ""
            },
            {
              "id": 916904,
              "key": "4f856dbd-af14-4d6e-b54c-3b4d9338deb6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Other relationship options: `collection_class` and `cascade`",
              "instructor_notes": ""
            },
            {
              "id": 916907,
              "key": "c8b7d898-239c-49fd-b004-44a1940062af",
              "title": "ND004 C01 L07 09.2 Configuring Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qywsiQi6lvk",
                "china_cdn_id": "qywsiQi6lvk.mp4"
              }
            },
            {
              "id": 918978,
              "key": "f1a88c8f-cb07-4c64-b737-1e388e00e7bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### SQLAlchemy Docs on Relationship Options\n\n* [SQLALchemy ORM Relationship Docs](https://docs.sqlalchemy.org/en/13/orm/relationship_api.html#sqlalchemy.orm.relationship)\n\n\n## Takeaways\n\n#### `db.relationship`\n\n* Allows SQLAlchemy to identity relationships between models\n* Links relationships with backrefs  (`child1.some_parent`)\n* Configures relationship dynamics between parents and children, including options like `lazy`, `collection_class`, and `cascade`\n",
              "instructor_notes": ""
            },
            {
              "id": 918979,
              "key": "7e4a028a-735d-4944-ae8a-351293918a91",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Time for a Quiz!",
              "instructor_notes": ""
            },
            {
              "id": 918980,
              "key": "0c85d72b-30e6-4925-8ac8-5b1f48478813",
              "title": "Loading Technique Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0c85d72b-30e6-4925-8ac8-5b1f48478813",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the loading technique to the definition or SQLAlchemy option"
                },
                "concepts_label": "Definition or Option",
                "answers_label": "Technique",
                "concepts": [
                  {
                    "text": "Loading joined data only as needed",
                    "correct_answer": {
                      "id": "a1566531832451",
                      "text": "Lazy Loading"
                    }
                  },
                  {
                    "text": "Loading all possible joined data at once",
                    "correct_answer": {
                      "id": "a1566531857051",
                      "text": "Eager Loading"
                    }
                  },
                  {
                    "text": "`lazy = True`",
                    "correct_answer": {
                      "id": "a1566531857687",
                      "text": "Lazy Loading"
                    }
                  },
                  {
                    "text": "`lazy = 'select'`",
                    "correct_answer": {
                      "id": "a1566531858409",
                      "text": "Eager Loading"
                    }
                  },
                  {
                    "text": "No initial wait time",
                    "correct_answer": {
                      "id": "a1566531920690",
                      "text": "Lazy Loading"
                    }
                  },
                  {
                    "text": "Large upfront initial load time",
                    "correct_answer": {
                      "id": "a1566531929750",
                      "text": "Eager Loading"
                    }
                  },
                  {
                    "text": "Producing a joined SQL call on every request",
                    "correct_answer": {
                      "id": "a1566531940294",
                      "text": "Lazy Loading"
                    }
                  },
                  {
                    "text": "Allowing subsequent SQL calls to read from existing data",
                    "correct_answer": {
                      "id": "a1566531944243",
                      "text": "Eager Loading"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1566531929750",
                    "text": "Eager Loading"
                  },
                  {
                    "id": "a1566531944243",
                    "text": "Eager Loading"
                  },
                  {
                    "id": "a1566531940294",
                    "text": "Lazy Loading"
                  },
                  {
                    "id": "a1566531858409",
                    "text": "Eager Loading"
                  },
                  {
                    "id": "a1566531832451",
                    "text": "Lazy Loading"
                  },
                  {
                    "id": "a1566531857687",
                    "text": "Lazy Loading"
                  },
                  {
                    "id": "a1566531920690",
                    "text": "Lazy Loading"
                  },
                  {
                    "id": "a1566531857051",
                    "text": "Eager Loading"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 909369,
          "key": "b4309fbb-deac-4f86-9c92-646893996c15",
          "title": "Foreign Key Constraint Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4309fbb-deac-4f86-9c92-646893996c15",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 909371,
              "key": "765532fc-5516-486c-8851-2b3ef52ae470",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Setting up the Foreign Key Constraint",
              "instructor_notes": ""
            },
            {
              "id": 909370,
              "key": "9eb15bbb-ba6b-4cb4-8c34-1410b33e7517",
              "title": "ND004 C01 L07 10 Setting Up The Foreign Key Constraint",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ovI5b7j-Oqc",
                "china_cdn_id": "ovI5b7j-Oqc.mp4"
              }
            },
            {
              "id": 918981,
              "key": "bb8338bb-e351-45be-bfea-bd01ed50450f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n* `db.relationship` does _not_ set up foreign key constraints for you. We need to add a column, `some_parent_id`, on the **child** model that has a foreign key constraint\n* Whereas we set `db.relationship` on the **parent** model, we set the foreign key constraint on the **child** model.\n* A foreign key constraint prefers **referential integrity** from one table to another, by ensuring that the foreign key column always maps a primary key in the foreign table.",
              "instructor_notes": ""
            },
            {
              "id": 918982,
              "key": "93b0547c-80a8-4848-b1cf-94f11ca26aba",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d5f62cd_screen-shot-2019-08-22-at-8.51.27-pm/screen-shot-2019-08-22-at-8.51.27-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/93b0547c-80a8-4848-b1cf-94f11ca26aba",
              "caption": "",
              "alt": "",
              "width": 774,
              "height": 351,
              "instructor_notes": null
            },
            {
              "id": 916908,
              "key": "1af2c54f-1d55-41b0-8a72-9aaa4a9dc25d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `db.ForeignKey` question",
              "instructor_notes": ""
            },
            {
              "id": 916909,
              "key": "4b2c8182-73b9-41b8-ab88-264e3fd9eb7a",
              "title": "ND004 C01 L07 10.1 Setting Up The Foreign Key Constraint",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oVuHm3rNxKI",
                "china_cdn_id": "oVuHm3rNxKI.mp4"
              }
            },
            {
              "id": 918983,
              "key": "37abc2b7-10ef-4eac-8f69-a71b07673158",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `db.ForeignKey`\n\n* Option in db.column to specify a foreign key constraint, referring to the primary key of the other table / model\n* Gets defined on the Child model",
              "instructor_notes": ""
            },
            {
              "id": 918984,
              "key": "2e0027ea-5916-4cce-a286-687ceeb626ed",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d5faa19_screen-shot-2019-08-23-at-1.55.35-am/screen-shot-2019-08-23-at-1.55.35-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2e0027ea-5916-4cce-a286-687ceeb626ed",
              "caption": "",
              "alt": "",
              "width": 716,
              "height": 366,
              "instructor_notes": null
            },
            {
              "id": 918985,
              "key": "c5b0869d-e040-41f2-ad94-2a2907e7f640",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\n* [SQLAlchemy Docs on Defining Constraints](https://docs.sqlalchemy.org/en/latest/core/constraints.html)",
              "instructor_notes": ""
            },
            {
              "id": 918989,
              "key": "c19b9762-12a9-4350-823b-f9857ae28b2c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c19b9762-12a9-4350-823b-f9857ae28b2c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "True/False: `db.relationship` sets up foreign keys",
                "answers": [
                  {
                    "id": "a1566551331779",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551373317",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 918986,
              "key": "6215f187-cf08-4557-9bfd-146acb5a6926",
              "title": "Model Q",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6215f187-cf08-4557-9bfd-146acb5a6926",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "On which model do we define each of the following?"
                },
                "concepts_label": "SQLAlchemy concept",
                "answers_label": "Model",
                "concepts": [
                  {
                    "text": "`db.relationship`",
                    "correct_answer": {
                      "id": "a1566550674898",
                      "text": "Parent Model"
                    }
                  },
                  {
                    "text": "`db.ForeignKey`",
                    "correct_answer": {
                      "id": "a1566550707688",
                      "text": "Child Model"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1566550707688",
                    "text": "Child Model"
                  },
                  {
                    "id": "a1566550674898",
                    "text": "Parent Model"
                  }
                ]
              }
            },
            {
              "id": 918988,
              "key": "63391e0e-41c8-422f-a8a5-68ef2458455f",
              "title": "db.ForeignKey",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "63391e0e-41c8-422f-a8a5-68ef2458455f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "`db.ForeignKey` is passed into...",
                "answers": [
                  {
                    "id": "a1566551291114",
                    "text": "`db.relationship`",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551310520",
                    "text": "`db.Column`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 918987,
              "key": "eaae47f1-5fea-467b-b80c-0ad3ba1fb700",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eaae47f1-5fea-467b-b80c-0ad3ba1fb700",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Choose the correct option to fill in the `<BLANK>` to set up the foreign key constraint between these two models:\n\n```py\nclass School(db.Model):\n  __tablename__ = 'schools'\n  id = db.Column(db.Integer, primary_key=True)\n  # ...\n\nclass Teacher(db.Model):\n  __tablename__ = 'teachers'\n  id = db.Column(db.Integer, primary_key=True)\n  name = #...\n  school_id = db.Column(db.Integer, <BLANK>)\n```",
                "answers": [
                  {
                    "id": "a1566550872705",
                    "text": "`db.relationship('School', backref='teacher')`",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551072314",
                    "text": "`db.relationship('Teacher', backref='school')`",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551088975",
                    "text": "`db.ForeignKey('School', 'id')`",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551102097",
                    "text": "`db.ForeignKey('schools', 'id')`",
                    "is_correct": false
                  },
                  {
                    "id": "a1566551127180",
                    "text": "`db.ForeignKey('schools.id')`",
                    "is_correct": true
                  },
                  {
                    "id": "a1566551133192",
                    "text": "`db.ForeignKey('School.id')`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 918990,
              "key": "2cfb3aec-2e59-4cf0-b8a4-64b3ad03318f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Now let's apply what we learned to an example",
              "instructor_notes": ""
            },
            {
              "id": 918991,
              "key": "557748f8-94c2-4435-a283-02bc0a6eadc4",
              "title": "ND004 C01 L07 10.2 Setting Up The Foreign Key Constraint",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XXy8hL0d30c",
                "china_cdn_id": "XXy8hL0d30c.mp4"
              }
            },
            {
              "id": 918994,
              "key": "486d5b27-9ef5-42ae-8c9b-f0c2c3066a5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Write out the Driver and Vehicle models",
              "instructor_notes": ""
            },
            {
              "id": 918993,
              "key": "d58453de-c65f-43cb-bc7b-80daf365f767",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c909369xGENERICihy2kksx",
              "pool_id": "flaskpostgres",
              "view_id": "generic-n9ckd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": false,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH"
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 918995,
              "key": "c9204939-e8b1-4213-99e3-a3c4e5b873ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Did you get it right?\nWatch the next video to find out!",
              "instructor_notes": ""
            },
            {
              "id": 918996,
              "key": "5414ff90-0571-467a-a0a6-3879a3970e33",
              "title": "ND004 C01 L07 10.3 Setting Up The Foreign Key Constraint",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Wd9zyi8dCGM",
                "china_cdn_id": "Wd9zyi8dCGM.mp4"
              }
            }
          ]
        },
        {
          "id": 907833,
          "key": "e294fd36-942e-4fa9-97bb-6a34b37d3d86",
          "title": "One-to-Many Relationship Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e294fd36-942e-4fa9-97bb-6a34b37d3d86",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907795,
              "key": "266d9e04-3ad1-440f-80ca-8c376fe47bfb",
              "title": "Model relationships in SQLALchemy ORM Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# One-to-Many Relationship Setup\n\n## Set up a one-to-many relationship between todos and todo lists using SQLAlchemy ORM\n\nNow that we've reviewed how to use `db.relationship` and `db.ForeignKey` to set up relationships between models, let's focus back on our To-Do App and use these concepts to model To-Do Lists in our app and set up the relationship between our To-Do model and our new To-Do List model.\n\nTo-Do Lists have many To-Dos, and every To-Do belongs to exactly one To-Do List, which indicates the existence of a **one to many** relationship between To-Dos and To-Do Lists.\n\n(For reference: [read \"The 3 Types of Relationships in Database Design\" by Database.Guide -- click here](https://database.guide/the-3-types-of-relationships-in-database-design/))",
              "instructor_notes": ""
            },
            {
              "id": 918997,
              "key": "008adcc0-3f27-417a-a743-fa2e7dd608ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Follow along! Interactive workspace\n\nYou can use the interactive workspace below to follow along the walk-through videos below. We'll be building out the To-Do List model.\n\n### Starter Code\n\n##### [Download here: todoapp-updates-delete.zip](https://video.udacity-data.com/topher/2019/August/5d5fc44f_todoapp-updates-deletes/todoapp-updates-deletes.zip)\n\nTo run (in debug mode):\n```\n$ pip3 install -r requirements.txt\n$ FLASK_APP=app.py FLASK_DEBUG=true flask run\n```",
              "instructor_notes": ""
            },
            {
              "id": 918998,
              "key": "c2100743-6b8b-4667-8d68-c5831e8ababa",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c907714xJUPYTERL1uvp3au1",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-v09rf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 916915,
              "key": "1e986f1f-2ede-4534-a30f-91c128d4edf8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating the `TodoList` model and adding the foreign key to the child `Todo` model",
              "instructor_notes": ""
            },
            {
              "id": 907813,
              "key": "9f842029-8636-4caf-8263-50181c1c0e20",
              "title": "ND004 C01 L07 11 Set Up A One-To-Many Relationship Between Todos And Todo Lists",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5Bl9RtsEtAY",
                "china_cdn_id": "5Bl9RtsEtAY.mp4"
              }
            },
            {
              "id": 907825,
              "key": "d5ff3f49-5168-4798-a3cb-dcc80b001739",
              "title": "Model relationships in SQLALchemy ORM Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create and run a migration to upgrade the schema",
              "instructor_notes": ""
            },
            {
              "id": 916916,
              "key": "68543068-0d45-46fd-9951-2c792cdaa9bc",
              "title": "ND004 C01 L07 11.1 Set Up A One-To-Many Relationship Between Todos And Todo Lists",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Tord65BkCkw",
                "china_cdn_id": "Tord65BkCkw.mp4"
              }
            },
            {
              "id": 919002,
              "key": "b9d96370-9f13-4c22-b3f5-93f3108a2b62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overall steps taken\n\n* Modified our Todo model to (temporarily) allow null values in `list_id`:\n  ```py\n  list_id = db.Column(db.Integer, db.ForeignKey('todolists.id'), nullable=True)\n  ```\n* Ran the migration, allowing `list_id` to be null\n\nThen using psql (or any other Postgres client),\n* Populated our database with a default list (\"Uncategorized\") to add all currently existing Todo items to\n* Associated existing to-do items with the \"Uncategorized\" list with ID 1, setting todo.list_id = 1. We could have also done this in a migration rather than using psql; either works.\n* Set `nullable=False` on the `list_id` column\n* Ran `flask db migrate` to generate a migration file for updating the nullability constraint\n* Ran `flask db upgrade` to apply the migration\n\n\n### Example Terminal Output\n\n```bash\nmacbook:~ amy$ psql todoapp\npsql (11.3, server 10.10)\nType \"help\" for help.\ntodoapp=# \\dt\n            List of relations\n Schema |      Name       | Type  | Owner\n--------+-----------------+-------+-------\n public | alembic_version | table | amy\n public | todolists       | table | amy\n public | todos           | table | amy\n(3 rows)\n\ntodoapp=# insert into todolists (name) values ('Uncategorized');\nINSERT 0 1\ntodoapp=# update todos set list_id = 1 where list_id is null;\nUPDATE 6\ntodoapp=# select * from todos;\n id | description  | completed | list_id\n----+--------------+-----------+---------\n  5 | Do homework  | f         |       1\n  7 | Do thing 3   | f         |       1\n 21 | thing 17     | t         |       1\n  6 | Do a thing   | t         |       1\n  8 | Do a thing 4 | t         |       1\n  9 | Thing 5      | f         |       1\n(6 rows)\n\ntodoapp=# \\q\n```",
              "instructor_notes": ""
            },
            {
              "id": 919001,
              "key": "6beeee12-8cb6-4c36-9d19-9fb550f24424",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Aside\nSQL commands can be written in any case (`update`, `UPDATE`, `uPDaTe`) and they will still execute.\n\n### Important\n* We always want to use **migrations** in order to update the data schema.\n* We can establish maintenance windows during times when the app isn't well used and manipulate production data then, in order to prepare the data before a schema migration, and change it after a schema migration.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 909857,
          "key": "c4676989-8279-4413-8147-1ce12589dcb8",
          "title": "Practice - Modeling Relationships",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c4676989-8279-4413-8147-1ce12589dcb8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 909858,
              "key": "ad460d45-06e8-4270-8d02-8724f3dbca8b",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c909857xJUPYTERL98rugp04",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-46zj7",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 919003,
              "key": "0b0045e8-ff7f-41b7-8ee2-777de0848e55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution Code\n\nThe To-Do app after setting up a one-to-many relationship between Todo and TodoList, and upgrade the data schema post-migrations:\n\n[Download here: todoapp-crud-lists.zip](https://video.udacity-data.com/topher/2019/August/5d5fcc59_todoapp-crud-lists/todoapp-crud-lists.zip)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 909372,
          "key": "38d495ef-c8cd-49a0-92b5-72488b5e1cd9",
          "title": "CRUD on a List of To-Dos",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "38d495ef-c8cd-49a0-92b5-72488b5e1cd9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 909536,
              "key": "8d8e312f-e0a9-4637-a90e-d3df0da3d7b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# CRUD on List of To-Dos",
              "instructor_notes": ""
            },
            {
              "id": 909373,
              "key": "983b544c-dbe6-48bf-a5bd-328517b325c7",
              "title": "ND004 C01 L07 12 CRUD On List Of Todos",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q2JlOnmxVcE",
                "china_cdn_id": "Q2JlOnmxVcE.mp4"
              }
            },
            {
              "id": 919005,
              "key": "130db4ab-8cb4-49f2-ba75-84213f9010d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Follow along! Interactive workspace\n\nYou can use the interactive workspace (below) to follow along these next walk-through videos.\n\n### Starter Code\n\n##### [Download here: todoapp-crud-lists.zip](https://video.udacity-data.com/topher/2019/August/5d5fcc59_todoapp-crud-lists/todoapp-crud-lists.zip)",
              "instructor_notes": ""
            },
            {
              "id": 919006,
              "key": "6cd40959-ffc3-4175-926a-1bc8609e0e61",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c907714xJUPYTERL1uvp3au1",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-lz4nm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 916917,
              "key": "b3398a56-d2ae-4ade-90ad-f16201dc87f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `get_list_todos` Modify the code so the user goes to a homepage for a particular todo list rather than seeing all todo items in the database",
              "instructor_notes": ""
            },
            {
              "id": 916920,
              "key": "1283f2d3-6768-4c47-80e7-0167273f6207",
              "title": "ND004 C01 L07 12.1 CRUD On List Of Todos",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YzmrghxRC9Y",
                "china_cdn_id": "YzmrghxRC9Y.mp4"
              }
            },
            {
              "id": 916918,
              "key": "f7e12fe8-d89b-40ee-9bb6-4767010197a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Add items with a list \"Urgent\" with ID of 2 and check if we get the expected results",
              "instructor_notes": ""
            },
            {
              "id": 916921,
              "key": "9a6faaba-06d4-478b-924e-9f6fc6455590",
              "title": "ND004 C01 L07 12.2 CRUD On List Of Todos",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Aav6ZYXrZSs",
                "china_cdn_id": "Aav6ZYXrZSs.mp4"
              }
            }
          ]
        },
        {
          "id": 909537,
          "key": "61b8378b-1cd6-421b-b2a1-fd9ae20c9332",
          "title": "CRUD on a List of To-Dos - Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "61b8378b-1cd6-421b-b2a1-fd9ae20c9332",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Todoapp-Crud-Lists-Solution",
                "uri": "https://video.udacity-data.com/topher/2020/May/5ed0a34a_todoapp-crud-lists-solution/todoapp-crud-lists-solution.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 909538,
              "key": "b017e610-16d3-42ad-9bf9-b125faeb04d4",
              "title": "ND004 C01 L07 13 CRUD On List Of Todos Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "n_1y418osKo",
                "china_cdn_id": "n_1y418osKo.mp4"
              }
            },
            {
              "id": 919004,
              "key": "e40d8379-513f-4748-b795-6f0e30600f18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Intermediate Solution Code\n\n##### Download the code that is explained in the video here: [todoapp-crud-lists-toggle.zip](https://video.udacity-data.com/topher/2019/August/5d5fcfcb_todoapp-crud-lists-toggle/todoapp-crud-lists-toggle.zip)",
              "instructor_notes": ""
            },
            {
              "id": 919008,
              "key": "51b3961f-22a1-4c95-9d6f-15e555699a77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Challenge yourself (optional) to complete the rest of the To-Do Lists App!\n\nFinish implementing the ability to create, update (mark complete), and delete _To-Do Lists_ on the app.\n\n* **Create a List**: Implement a Create List form above the list of To-Do Lists, much like we did for an individual To-Do item, to enable the user to create Lists.\n* **Update a List (and all of its children items)**: Implement a Checkbox next to a To-Do List, and allow the user to mark an entire list as completed. When the list is marked completed, implement the controller so that all of its child items are also marked as completed. (hint: you can use `list.todos` and what we know about bulk deletions off the `Query` object to bulk delete all todo items for a given list).\n* **Delete a List (and all of its children items)**: Implement an \"x\" remove button next to each List, and allow a user to click it in order to remove a List. When a list is removed, all of its child items should also be removed. We can set the `cascade` option to do this. See the [SQLAlchemy Docs on Cascades](https://docs.sqlalchemy.org/en/latest/orm/cascades.html). (Hint: you'll want to look into the `all` and `delete-orphan` cascade options).\n\nUse the solution code above as a good starting point to implement this challenge in the interactive workspace below.",
              "instructor_notes": ""
            },
            {
              "id": 919007,
              "key": "1ee301a0-b05e-4060-a70b-1dfe0f0cb46d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c907714xJUPYTERL1uvp3au1",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-mdekf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 919009,
              "key": "60326f37-4d89-4d71-950b-07b79c30e7bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 🙌 Woo hoo!\n\nCan you believe that we've reached the end of our development of the To-Do app? Amazing job. Give yourself a pat on the back. Do a little dance. You've finally, finally made it.\n\nThe last, and only remaining concept in this course, is handling the special case of many-to-many relationship modeling with SQLAlchemy ORM.",
              "instructor_notes": ""
            },
            {
              "id": 1029098,
              "key": "6bdc2deb-fb39-44e4-9e50-0329da665021",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution Code\nYou can download the final expected solution below. The solution provides the minimal basic functionality of CRUD on lists of todo. We encourage you to make it even better by adding as more functionalities as you like. ",
              "instructor_notes": ""
            },
            {
              "id": 1029099,
              "key": "2bfe91e2-e31c-4f4f-97be-7461bc7aba58",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0a637_screenshot-2020-05-29-at-11.35.25-am/screenshot-2020-05-29-at-11.35.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2bfe91e2-e31c-4f4f-97be-7461bc7aba58",
              "caption": "A sample version of the CRUD on a List of To-Dos App",
              "alt": "",
              "width": 671,
              "height": 355,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 907835,
          "key": "22958276-bf46-46b7-9a0b-40c2b4f3c949",
          "title": "Many-To-Many Relationships: Part I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "22958276-bf46-46b7-9a0b-40c2b4f3c949",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907821,
              "key": "8d008576-84d4-4dee-9405-e6fbab94c6ad",
              "title": "Model many-to-many relationships Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modeling a many-to-many relationship in SQLAlchemy ORM - Part 1",
              "instructor_notes": ""
            },
            {
              "id": 916922,
              "key": "eb23caa2-661a-4df4-b800-4f05eb570df4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Types of relationships",
              "instructor_notes": ""
            },
            {
              "id": 907817,
              "key": "1b4b0efa-418a-4d20-b1cc-ae65643c2029",
              "title": "ND004 C01 L07 14 Model Many-To-Many Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AV-gcQWfhQg",
                "china_cdn_id": "AV-gcQWfhQg.mp4"
              }
            },
            {
              "id": 909539,
              "key": "039355c9-008c-42ba-8dbd-9436f7119542",
              "title": "Relationship Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "039355c9-008c-42ba-8dbd-9436f7119542",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "See if you can match each of these examples with the correct relationship type."
                },
                "concepts_label": "Example",
                "answers_label": "What type of relationship?",
                "concepts": [
                  {
                    "text": "A passport belongs to a person",
                    "correct_answer": {
                      "id": "a1565574333474",
                      "text": "One-to-one"
                    }
                  },
                  {
                    "text": "An account has one user",
                    "correct_answer": {
                      "id": "a1565574388927",
                      "text": "One-to-one"
                    }
                  },
                  {
                    "text": "A school teaches many subjects, and a subject is taught in many schools",
                    "correct_answer": {
                      "id": "a1565574389928",
                      "text": "Many-to-many"
                    }
                  },
                  {
                    "text": "A class has many students",
                    "correct_answer": {
                      "id": "a1565574390664",
                      "text": "One-to-many"
                    }
                  },
                  {
                    "text": "A teacher has many students",
                    "correct_answer": {
                      "id": "a1565574466990",
                      "text": "One-to-many"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1565574466990",
                    "text": "One-to-many"
                  },
                  {
                    "id": "a1565574389928",
                    "text": "Many-to-many"
                  },
                  {
                    "id": "a1565574333474",
                    "text": "One-to-one"
                  },
                  {
                    "id": "a1565574554290",
                    "text": "Many-to-many"
                  },
                  {
                    "id": "a1565574388927",
                    "text": "One-to-one"
                  },
                  {
                    "id": "a1565574390664",
                    "text": "One-to-many"
                  }
                ]
              }
            },
            {
              "id": 907810,
              "key": "e4903de8-c846-4646-aa99-126e161fef3f",
              "title": "Model many-to-many relationships Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Keys in relationships; association tables",
              "instructor_notes": ""
            },
            {
              "id": 916923,
              "key": "410126d4-7028-474c-a066-e9209b392048",
              "title": "ND004 C01 L07 14.1 Model Many-To-Many Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NKDlpXE7F0k",
                "china_cdn_id": "NKDlpXE7F0k.mp4"
              }
            },
            {
              "id": 919010,
              "key": "1540e929-efa5-4ccf-92c9-840b7ad26132",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\n* In one-to-many and one-to-one, the foreign key is established on the child model.\n* In many-to-many, a special **association table** exists to join the two tables together, storing two foreign keys that link to the two foreign tables that have a relationship with each other.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 916924,
          "key": "58fb368c-776a-434d-b281-15574b420794",
          "title": "Many-To-Many Relationships: Part II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "58fb368c-776a-434d-b281-15574b420794",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 916926,
              "key": "be35e313-4c5a-4f2a-83b6-428f34a3d127",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modeling a many-to-many relationship in SQLAlchemy ORM - Part 2\n",
              "instructor_notes": ""
            },
            {
              "id": 916925,
              "key": "904ea08e-0ca8-402e-a619-8be37c76d6aa",
              "title": "ND004 C01 L07 14.2 Model Many-To-Many Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Xo_fRKPj2fM",
                "china_cdn_id": "Xo_fRKPj2fM.mp4"
              }
            },
            {
              "id": 919011,
              "key": "28c0533c-74c2-45dc-bead-f866e6f253bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Takeaways\n\nTo set up a many-to-many in SQLALchemy, we:\n* Define an association table using `Table` from SQLAlchemy\n* Set the multiple foreign keys in the association table\n* Map the association table to a parent model using the option `secondary` in `db.relationship`\n\n### Example with Order, Product, and Order Item\n\n```py\norder_items = db.Table('order_items',\n    db.Column('order_id', db.Integer, db.ForeignKey('order.id'), primary_key=True),\n    db.Column('product_id', db.Integer, db.ForeignKey('product.id'), primary_key=True)\n)\n\nclass Order(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  status = db.Column(db.String(), nullable=False)\n  products = db.relationship('Product', secondary=order_items,\n      backref=db.backref('orders', lazy=True))\n\nclass Product(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(), nullable=False)\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 916927,
              "key": "60af9878-1592-4565-aa12-bac4afb350a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Looking at it in the code",
              "instructor_notes": ""
            },
            {
              "id": 916928,
              "key": "9f1fa05d-2e5c-472d-88b9-20d6c7528a30",
              "title": "ND004 C01 L07 14.3 Model Many-To-Many Relationships",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "17FW9tAaDvA",
                "china_cdn_id": "17FW9tAaDvA.mp4"
              }
            },
            {
              "id": 919012,
              "key": "c1a15370-dd72-4dc5-bbba-ba5e87ee7283",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Follow along in the interactive workspace (below)\n\n##### Example app.py\n\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgres://udacitystudios@localhost:5432/example'\ndb = SQLAlchemy(app)\n\norder_items = db.Table('order_items',\n    db.Column('order_id', db.Integer, db.ForeignKey('order.id'), primary_key=True),\n    db.Column('product_id', db.Integer, db.ForeignKey('product.id'), primary_key=True)\n)\n\nclass Order(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  status = db.Column(db.String(), nullable=False)\n  products = db.relationship('Product', secondary=order_items,\n      backref=db.backref('orders', lazy=True))\n\nclass Product(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(), nullable=False)\n```\nRemember to use your own username in the connection URI.",
              "instructor_notes": ""
            },
            {
              "id": 919013,
              "key": "1cffa111-7f82-4cd4-921b-6e321c4dbad0",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848940c916924xJUPYTERL8v6d9n7n",
              "pool_id": "flaskpostgres",
              "view_id": "jupyter-lab-kj1az",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "",
                    "pageStart": "",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 907834,
          "key": "8b2457a7-7370-4627-85e0-5ddde9463c39",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8b2457a7-7370-4627-85e0-5ddde9463c39",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907819,
              "key": "1169f6c6-e898-47ba-b780-31161c155c0a",
              "title": "Query operators Implement SEARCH On lists and item relationships Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recap",
              "instructor_notes": ""
            },
            {
              "id": 907811,
              "key": "f6a8e13e-0cf9-4030-bd5e-28914bb42559",
              "title": "ND004 C01 L07 15 Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "I7AdbtpamDE",
                "china_cdn_id": "I7AdbtpamDE.mp4"
              }
            },
            {
              "id": 919017,
              "key": "10dd886b-99b3-4c03-8353-44b1e0f3eb7c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d5fda1e_dogs/dogs.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/10dd886b-99b3-4c03-8353-44b1e0f3eb7c",
              "caption": "",
              "alt": "",
              "width": 400,
              "height": 301,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}