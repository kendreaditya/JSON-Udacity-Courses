{
  "data": {
    "lesson": {
      "id": 696450,
      "key": "ec5c9d10-34d9-49bf-85b7-64424f2191a4",
      "title": "Keras CNNs",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn to define and train convolutional neural networks in Keras, as well as implement data augmentation and transfer learning.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ec5c9d10-34d9-49bf-85b7-64424f2191a4/696450/1555959498542/Keras+CNNs+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ec5c9d10-34d9-49bf-85b7-64424f2191a4/696450/1555959494153/Keras+CNNs+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 289651,
          "key": "5e62ce5f-26bb-4f84-91c1-4791b9d3aa53",
          "title": "Convolutional Layers in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5e62ce5f-26bb-4f84-91c1-4791b9d3aa53",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 289912,
              "key": "66fd64c5-754f-4ce7-b47f-185687265cc6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e4221f_full-padding-no-strides-transposed/full-padding-no-strides-transposed.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/66fd64c5-754f-4ce7-b47f-185687265cc6",
              "caption": "__Convolution with 3x3 window and stride 1__\n\nImage source: http://iamaaditya.github.io/2016/03/one-by-one-convolution/",
              "alt": "",
              "width": 276,
              "height": 314,
              "instructor_notes": null
            },
            {
              "id": 289909,
              "key": "c54d1e18-85fc-4ddf-aa1d-53fb549d2f59",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Convolutional Layers in Keras\n\nTo create a convolutional layer in Keras, you must first import the necessary module:\n\n```python\nfrom keras.layers import Conv2D\n```\n\nThen, you can create a convolutional layer by using the following format:\n\n```python\nConv2D(filters, kernel_size, strides, padding, activation='relu', input_shape)\n```\n\n### Arguments\n\nYou must pass the following arguments:\n- `filters` - The number of filters.\n- `kernel_size` - Number specifying both the height and width of the (square) convolution window.\n\nThere are some additional, optional arguments that you might like to tune:\n- `strides` - The stride of the convolution.  If you don't specify anything, `strides` is set to `1`.\n- `padding` - One of `'valid'` or `'same'`.  If you don't specify anything, `padding` is set to `'valid'`.\n- `activation` - Typically `'relu'`. If you don't specify anything, no activation is applied.  You are __strongly encouraged__ to add a ReLU activation function to __every__ convolutional layer in your networks.\n\n__NOTE__: It is possible to represent both `kernel_size` and `strides` as either a number or a tuple.\n\nWhen using your convolutional layer as the first layer (appearing after the input layer) in a model, you must provide an additional `input_shape` argument:\n- `input_shape` - Tuple specifying the height, width, and depth (in that order) of the input.\n\n__NOTE__: Do *__not__* include the `input_shape` argument if the convolutional layer is *not* the first layer in your network.\n\nThere are many other tunable arguments that you can set to change the behavior of your convolutional layers.  To read more about these, we recommend perusing the official [documentation](https://keras.io/layers/convolutional/).\n\n### Example #1\n\nSay I'm constructing a CNN, and my input layer accepts grayscale images that are 200 by 200 pixels (corresponding to a 3D array with height 200, width 200, and depth 1).  Then, say I'd like the next layer to be a convolutional layer with 16 filters, each with a width and height of 2.  When performing the convolution, I'd like the filter to jump two pixels at a time.  I also don't want the filter to extend outside of the image boundaries; in other words, I don't want to pad the image with zeros.  Then, to construct this convolutional layer, I would use the following line of code:\n```python\nConv2D(filters=16, kernel_size=2, strides=2, activation='relu', input_shape=(200, 200, 1))\n```\n\n### Example #2\n\nSay I'd like the next layer in my CNN to be a convolutional layer that takes the layer constructed in Example 1 as input.  Say I'd like my new layer to have 32 filters, each with a height and width of 3.  When performing the convolution, I'd like the filter to jump 1 pixel at a time.  I want the convolutional layer to see all regions of the previous layer, and so I don't mind if the filter hangs over the edge of the previous layer when it's performing the convolution.  Then, to construct this convolutional layer, I would use the following line of code:\n```python\nConv2D(filters=32, kernel_size=3, padding='same', activation='relu')\n```\n\n### Example #3\n\nIf you look up code online, it is also common to see convolutional layers in Keras in this format:\n```python\nConv2D(64, (2,2), activation='relu')\n```\nIn this case, there are 64 filters, each with a size of 2x2, and the layer has a ReLU activation function.  The other arguments in the layer use the default values, so the convolution uses a stride of 1, and the padding has been set to 'valid'.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 309657,
          "key": "a044de29-c60f-47d8-a82d-aae7b8f24732",
          "title": "Quiz: Dimensionality",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a044de29-c60f-47d8-a82d-aae7b8f24732",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309661,
              "key": "e2b648e7-06f3-4ef9-bea4-7e2758547f47",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5913f852_convolution-schematic/convolution-schematic.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e2b648e7-06f3-4ef9-bea4-7e2758547f47",
              "caption": "__Convolution with 3x3 window and stride 1__\n\nImage source: http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution",
              "alt": null,
              "width": 390,
              "height": 288,
              "instructor_notes": null
            },
            {
              "id": 309658,
              "key": "fbc90fc9-4e06-46f3-9867-b6b3ac8cb6a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dimensionality\n\nJust as with neural networks, we create a CNN in Keras by first creating a `Sequential` model.\n\nWe add layers to the network by using the `.add()` method.\n\nCopy and paste the following code into a Python executable named `conv-dims.py`:\n```python\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=2, strides=2, padding='valid', \n\tactivation='relu', input_shape=(200, 200, 1)))\nmodel.summary()\n```\n\nWe will not train this CNN; instead, we'll use the executable to study how the dimensionality of the convolutional layer changes, as a function of the supplied arguments.\n\nRun `python path/to/conv-dims.py` and look at the output. It should appear as follows:",
              "instructor_notes": ""
            },
            {
              "id": 309659,
              "key": "71dd0ff2-d193-4cbf-a800-a9c532660025",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5913f6c3_conv-dims/conv-dims.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/71dd0ff2-d193-4cbf-a800-a9c532660025",
              "caption": "",
              "alt": null,
              "width": 788,
              "height": 226,
              "instructor_notes": null
            },
            {
              "id": 309660,
              "key": "cd3594c5-51fb-443b-819b-fa89112dcd96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Do the dimensions of the convolutional layer line up with your expectations?  \n\nFeel free to change the values assigned to the arguments (`filters`, `kernel_size`, etc) in your `conv-dims.py` file.  \n\nTake note of  how the __number of parameters__ in the convolutional layer changes. This corresponds to the value under `Param #` in the printed output.  In the figure above, the convolutional layer has `80` parameters.\n\nAlso notice how the __shape__ of the convolutional layer changes.  This corresponds to the value under `Output Shape` in the printed output.  In the figure above, `None` corresponds to the batch size, and the convolutional layer has a height of `100`, width of `100`, and depth of `16`.",
              "instructor_notes": ""
            },
            {
              "id": 309665,
              "key": "9e0276f9-7212-4de5-bbb8-b9be7d8c0275",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Formula: Number of Parameters in a Convolutional Layer\n\nThe number of parameters in a convolutional layer depends on the supplied values of `filters`, `kernel_size`, and `input_shape`.  Let's define a few variables:\n- `K` - the number of filters in the convolutional layer \n- `F` - the height and width of the convolutional filters\n- `D_in` - the depth of the previous layer\n\nNotice that `K` = `filters`, and `F` = `kernel_size`.  Likewise, `D_in` is the last value in the `input_shape` tuple.\n\nSince there are `F*F*D_in` weights per filter, and the convolutional layer is composed of `K` filters, the total number of weights in the convolutional layer is `K*F*F*D_in`.  Since there is one bias term per filter, the convolutional layer has `K` biases.  Thus, the __ number of parameters__ in the convolutional layer is given by `K*F*F*D_in + K`.",
              "instructor_notes": ""
            },
            {
              "id": 309674,
              "key": "5d719e19-d877-4eda-a18a-1f8edcdc2a30",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Formula: Shape of a Convolutional Layer\n\nThe shape of a convolutional layer depends on the supplied values of `kernel_size`, `input_shape`, `padding`, and `stride`.  Let's define a few variables:\n- `K` - the number of filters in the convolutional layer\n- `F` - the height and width of the convolutional filters\n- `S` - the stride of the convolution\n- `H_in` - the height of the previous layer \n- `W_in` - the width of the previous layer\n\nNotice that `K` = `filters`, `F` = `kernel_size`, and `S` = `stride`.  Likewise, `H_in` and `W_in` are the first and second value of the `input_shape` tuple, respectively.\n\nThe __depth__ of the convolutional layer will always equal the number of filters `K`. \n\nIf `padding = 'same'`, then the spatial dimensions of the convolutional layer are the following:\n- __height__ = ceil(float(`H_in`) / float(`S`))\n- __width__ = ceil(float(`W_in`) / float(`S`))\n\nIf `padding = 'valid'`, then the spatial dimensions of the convolutional layer are the following:\n- __height__ = ceil(float(`H_in` - `F` + 1) / float(`S`))\n- __width__ = ceil(float(`W_in` - `F` + 1) / float(`S`))",
              "instructor_notes": ""
            },
            {
              "id": 310184,
              "key": "470447dd-1a2b-4d66-ab30-e67cd6bd4364",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz\n\nPlease change the `conv-dims.py` file, so that it appears as follows:\n\n```python\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=3, strides=2, padding='same', \n    activation='relu', input_shape=(128, 128, 3)))\nmodel.summary()\n```\n\nRun `python path/to/conv-dims.py`, and use the output to answer the questions below.",
              "instructor_notes": ""
            },
            {
              "id": 310178,
              "key": "c6ecf430-cd84-4eb6-afe0-f90478dcfc14",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6ecf430-cd84-4eb6-afe0-f90478dcfc14",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many parameters does the convolutional layer have?",
                "answers": [
                  {
                    "id": "a1494523970948",
                    "text": "902",
                    "is_correct": false
                  },
                  {
                    "id": "a1494523979905",
                    "text": "306",
                    "is_correct": false
                  },
                  {
                    "id": "a1494523984948",
                    "text": "896",
                    "is_correct": true
                  },
                  {
                    "id": "a1494523993610",
                    "text": "1034",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 310180,
              "key": "91aebcb4-c32a-4539-b6c4-129f04c124c7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "91aebcb4-c32a-4539-b6c4-129f04c124c7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the depth of the convolutional layer?",
                "answers": [
                  {
                    "id": "a1494524042602",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1494524071259",
                    "text": "16",
                    "is_correct": false
                  },
                  {
                    "id": "a1494524073167",
                    "text": "32",
                    "is_correct": true
                  },
                  {
                    "id": "a1494524074579",
                    "text": "64",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 310182,
              "key": "b69eaa05-baff-4bc5-93ac-28cc186e0e12",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b69eaa05-baff-4bc5-93ac-28cc186e0e12",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the width of the convolutional layer?",
                "answers": [
                  {
                    "id": "a1494524146228",
                    "text": "3",
                    "is_correct": false
                  },
                  {
                    "id": "a1494524158985",
                    "text": "16",
                    "is_correct": false
                  },
                  {
                    "id": "a1494524165039",
                    "text": "32",
                    "is_correct": false
                  },
                  {
                    "id": "a1494524166160",
                    "text": "64",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 289655,
          "key": "1ded75bd-7399-41cc-b491-f031218e9606",
          "title": "CNNs in Keras: Practical Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1ded75bd-7399-41cc-b491-f031218e9606",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308636,
              "key": "0908a7e4-c6b2-4732-896a-c3aedcc9422f",
              "title": "CNNs in Keras: Practical Example",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "faFvmGDwXX0",
                "china_cdn_id": "faFvmGDwXX0.mp4"
              }
            },
            {
              "id": 293706,
              "key": "b9f9d86b-ad9d-4b2a-aa1a-0d948a2eab9f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you have not yet launched a GPU-enabled server with AWS, you are strongly encouraged to do so before running the notebooks from this video.  While it is possible to train the notebooks on your CPU, an AWS GPU instance will be much faster.\n\nThe Jupyter notebooks described in the video can be accessed from the `aind2-cnn` GitHub [repository](https://github.com/udacity/aind2-cnn).  Navigate to the __cifar10-classification/__ folder and open __cifar10_mlp.ipynb__ and __cifar10_cnn.ipynb__.\n\n### A Note on the Validation Set\n\n[Earlier in the lesson](https://github.com/udacity/aind2-cnn/blob/master/mnist-mlp/mnist_mlp.ipynb), we trained a neural network with validation by setting the `validation_split` argument in `model.fit` to 0.2.  This removed the final 20% of the training data, which was instead used as validation data.  In the notebook for this video, instead of having Keras split off the validation set for us, we hard-code the split ourselves.  \n\n### Optional Resources\n- Here's a [cheat sheet](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Keras_Cheat_Sheet_Python.pdf) for specifying neural networks (including CNNs!) in Keras.\n- Check out the CIFAR-10 Competition's [winning architecture](http://blog.kaggle.com/2015/01/02/cifar-10-competition-winners-interviews-with-dr-ben-graham-phil-culliton-zygmunt-zajac/)!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 308205,
          "key": "7c124a8e-4e7a-49f3-b4e5-5081b7e13e0a",
          "title": "Mini Project: CNNs in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c124a8e-4e7a-49f3-b4e5-5081b7e13e0a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 308206,
              "key": "b3d4d116-d3e2-4b36-a5fa-13df6315b750",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Mini Project: CNNs in Keras\nIn this mini project, you'll modify the architecture of the neural network in [cifar10_cnn.ipynb](https://github.com/udacity/aind2-cnn/blob/master/cifar10-classification/cifar10_cnn.ipynb).  [Starter code](https://github.com/udacity/aind2-cnn) is provided on Github.",
              "instructor_notes": ""
            },
            {
              "id": 308207,
              "key": "779c18a3-e9aa-48c9-8e67-93b27440f459",
              "title": "Instructions",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "779c18a3-e9aa-48c9-8e67-93b27440f459",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Specify a new CNN architecture in __Step 5: Define the Model Architecture__ in the notebook.  If you need more inspiration, check out [this link](https://github.com/fchollet/keras/blob/master/examples/cifar10_cnn.py).\n\nTrain your new model.  Once you've finished, check the accuracy on the test dataset, and report the percentage in the text box below.\n\n_Feel free to amend other parts of the notebook: for instance, what happens when you use a different [optimizer](https://keras.io/optimizers/)?_  "
              },
              "answer": {
                "text": "Thank you for completing the mini project!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 289656,
          "key": "1a89db76-f327-43aa-b3f0-8fcceb561d68",
          "title": "Image Augmentation in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a89db76-f327-43aa-b3f0-8fcceb561d68",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309065,
              "key": "cb48b464-0b24-4333-9d69-e4d124d41d7b",
              "title": "Image Augmentation in Keras",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "odStujZq3GY",
                "china_cdn_id": "odStujZq3GY.mp4"
              }
            },
            {
              "id": 290450,
              "key": "e25a6e9e-83e1-444a-99e7-2729b2dea049",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you have not yet launched a GPU-enabled server with AWS, you are strongly encouraged to do so before running the notebook from this video.  While it is possible to train the notebook on your CPU, an AWS GPU instance will be much faster.\n\nThe Jupyter notebook described in the video can be accessed from the `aind2-cnn` GitHub [repository](https://github.com/udacity/aind2-cnn).  Navigate to the __cifar10-augmentation/__ folder and open __cifar10_augmentation.ipynb__.\n\n### Note on `steps_per_epoch`\n\nRecall that `fit_generator` took many parameters, including\n\n```python\nsteps_per_epoch = x_train.shape[0] / batch_size\n```\nwhere `x_train.shape[0]` corresponds to the number of unique samples in the training dataset `x_train`.  By setting `steps_per_epoch` to this value, we ensure that the model sees `x_train.shape[0]` augmented images in each epoch.\n\n### Optional Resources\n\n* Read this [great blog post](http://machinelearningmastery.com/image-augmentation-deep-learning-keras/) that visualizes augmentations of the MNIST dataset.\n* Check out this [detailed implementation](https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html) that uses augmentation to boost performance on a Kaggle dataset.\n* Read the Keras [documentation](https://keras.io/preprocessing/image/) on the ImageDataGenerator class.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 303854,
          "key": "16a83ecf-dd95-4bbe-8760-57ccc8f26df7",
          "title": "Mini Project: Image Augmentation in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "16a83ecf-dd95-4bbe-8760-57ccc8f26df7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 303855,
              "key": "34e17861-e209-4fc3-9f08-6854f1a05c0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Mini Project: Image Augmentation in Keras\n\nRead more about data augmentation in Keras by perusing the [documentation](https://keras.io/preprocessing/image/).  \n\nIn this mini-project, you'll modify the data augmentation in [cifar10_augmentation.ipynb](https://github.com/udacity/aind2-cnn/blob/master/cifar10-augmentation/cifar10_augmentation.ipynb) and examine how the accuracy of your network changes. [Starter code](https://github.com/udacity/aind2-cnn) is provided on Github.",
              "instructor_notes": ""
            },
            {
              "id": 303856,
              "key": "40f7afa2-cbf9-436e-b1eb-7818588c2ac8",
              "title": "Instructions",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "40f7afa2-cbf9-436e-b1eb-7818588c2ac8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Modify __Step 5: Create and Configure Augmented Image Generator__ in the notebook to use different settings for data augmentation.  You can peruse the list of available arguments [here](https://keras.io/preprocessing/image/).  \n\nOnce you've changed the settings, train the model. Check the accuracy on the test dataset, and report the percentage in the text box below."
              },
              "answer": {
                "text": "Thank you for completing the mini project!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 289659,
          "key": "8c202ff3-aab5-46c3-8ed1-0154fa7b566b",
          "title": "Transfer Learning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c202ff3-aab5-46c3-8ed1-0154fa7b566b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309063,
              "key": "60bef3fb-bc83-4d1c-a492-d186f181feee",
              "title": "Transfer Learning",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LHG5FltaR6I",
                "china_cdn_id": "LHG5FltaR6I.mp4"
              }
            },
            {
              "id": 290488,
              "key": "a9dbb85a-3316-40fd-8614-b5a94149688b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Transfer Learning\n\nTransfer learning involves taking a pre-trained neural network and adapting the neural network to a new, different data set. \n\nDepending on both:\n* the size of the new data set, and\n* the similarity of the new data set to the original data set\n\nthe approach for using transfer learning will be different. There are four main cases:\n1. new data set is small, new data is similar to original training data\n2. new data set is small, new data is different from original training data\n3. new data set is large, new data is similar to original training data\n4. new data set is large, new data is different from original training data",
              "instructor_notes": ""
            },
            {
              "id": 291795,
              "key": "3fae647e-287e-452b-9cba-c902b63e22a6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80aac_02-guide-how-transfer-learning-v3-01/02-guide-how-transfer-learning-v3-01.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3fae647e-287e-452b-9cba-c902b63e22a6",
              "caption": "Four Cases when Using Transfer Learning",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290491,
              "key": "87e39757-ec37-4c6a-b67e-8a7b23155c3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A large data set might have one million images. A small data could have two-thousand images. The dividing line between a large data set and small data set is somewhat subjective. Overfitting is a concern when using transfer learning with a small data set. \n\nImages of dogs and images of wolves would be considered similar; the images would share common characteristics. A data set of flower images would be different from a data set of dog images. \n\nEach of the four transfer learning cases has its own approach. In the following sections, we will look at each case one by one.",
              "instructor_notes": ""
            },
            {
              "id": 290493,
              "key": "c2d99351-5835-4090-a9de-3ea857038c17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Demonstration Network\n\nTo explain how each situation works, we will start with a generic pre-trained convolutional neural network and explain how to adjust the network for each case. Our example network contains three convolutional layers and three fully connected layers:",
              "instructor_notes": ""
            },
            {
              "id": 291796,
              "key": "2fcc5caf-46c3-4915-ac20-9696960fb9b7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80ae2_02-guide-how-transfer-learning-v3-02/02-guide-how-transfer-learning-v3-02.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2fcc5caf-46c3-4915-ac20-9696960fb9b7",
              "caption": "General Overview of a Neural Network",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290494,
              "key": "7a9ccbc5-6cde-413e-920b-1a0b653f902e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is an generalized overview of what the convolutional neural network does: \n* the first layer will detect edges in the image\n* the second layer will detect shapes\n* the third convolutional layer detects higher level features\n\nEach transfer learning case will use the pre-trained convolutional neural network in a different way.",
              "instructor_notes": ""
            },
            {
              "id": 290496,
              "key": "dfcd5869-deea-4484-bc4d-390b53194d75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 1: Small Data Set, Similar Data",
              "instructor_notes": ""
            },
            {
              "id": 291797,
              "key": "85c5bf9f-6e61-42c2-b084-f73360fc128b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80b0b_02-guide-how-transfer-learning-v3-03/02-guide-how-transfer-learning-v3-03.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/85c5bf9f-6e61-42c2-b084-f73360fc128b",
              "caption": "Case 1: Small Data Set with Similar Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290497,
              "key": "69f3b507-7f37-4aae-98ef-955d0d7f7c86",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is small and similar to the original training data:\n- slice off the end of the neural network\n- add a new fully connected layer that matches the number of classes in the new data set\n- randomize the weights of the new fully connected layer; freeze all the weights from the pre-trained network\n- train the network to update the weights of the new fully connected layer\n\nTo avoid overfitting on the small data set, the weights of the original network will be held constant rather than re-training the weights. \n\nSince the data sets are similar, images from each data set will have similar higher level features. Therefore most or all of the pre-trained neural network layers already contain relevant information about the new data set and should be kept.\n\nHere's how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 291798,
              "key": "47d819b4-2472-4969-a068-4125b946a937",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80b31_02-guide-how-transfer-learning-v3-04/02-guide-how-transfer-learning-v3-04.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/47d819b4-2472-4969-a068-4125b946a937",
              "caption": "Neural Network with Small Data Set, Similar Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290498,
              "key": "1046b9cd-b925-452c-b0c9-a6a0312c1313",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 2: Small Data Set, Different Data",
              "instructor_notes": ""
            },
            {
              "id": 291799,
              "key": "3d0fbbd6-c73d-496c-be1c-a63e2f655122",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80b55_02-guide-how-transfer-learning-v3-05/02-guide-how-transfer-learning-v3-05.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3d0fbbd6-c73d-496c-be1c-a63e2f655122",
              "caption": "Case 2: Small Data Set, Different Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290499,
              "key": "6410ebbe-2758-47aa-a0fb-0f3baeb54f3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is small and different from the original training data:\n* slice off most of the pre-trained layers near the beginning of the network\n* add to the remaining pre-trained layers a new fully connected layer that matches the number of classes in the new data set\n* randomize the weights of the new fully connected layer; freeze all the weights from the pre-trained network\n* train the network to update the weights of the new fully connected layer\n\nBecause the data set is small, overfitting is still a concern. To combat overfitting, the weights of the original neural network will be held constant, like in the first case.\n\nBut the original training set and the new data set do not share higher level features. In this case, the new network will only use the layers containing lower level features.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 291800,
              "key": "298a5f0f-ac69-4581-b009-1a5763bef338",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80b82_02-guide-how-transfer-learning-v3-06/02-guide-how-transfer-learning-v3-06.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/298a5f0f-ac69-4581-b009-1a5763bef338",
              "caption": "Neural Network with Small Data Set, Different Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290500,
              "key": "757ceb3a-602a-4a0d-9b2f-d82457a6dd41",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 3: Large Data Set, Similar Data\n",
              "instructor_notes": ""
            },
            {
              "id": 291801,
              "key": "a0ea6989-608b-43e1-a571-b25d633513d7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80ba3_02-guide-how-transfer-learning-v3-07/02-guide-how-transfer-learning-v3-07.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a0ea6989-608b-43e1-a571-b25d633513d7",
              "caption": "Case 3: Large Data Set, Similar Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290501,
              "key": "b514b50f-e5de-4f55-a4d9-44242127f5df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is large and similar to the original training data:\n- remove the last fully connected layer and replace with a layer matching the number of classes in the new data set\n- randomly initialize the weights in the new fully connected layer\n- initialize the rest of the weights using the pre-trained weights \n-  re-train the entire neural network\n\nOverfitting is not as much of a concern when training on a large data set; therefore, you can re-train all of the weights.\n\nBecause the original training set and the new data set share higher level features, the entire neural network is used as well.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 291802,
              "key": "5813bdee-1d46-4188-88c2-971967496348",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80bc3_02-guide-how-transfer-learning-v3-08/02-guide-how-transfer-learning-v3-08.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5813bdee-1d46-4188-88c2-971967496348",
              "caption": "Neural Network with Large Data Set, Similar Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290502,
              "key": "3cf0f17b-9294-49f8-b179-97daa317753e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Case 4: Large Data Set, Different Data\n",
              "instructor_notes": ""
            },
            {
              "id": 291803,
              "key": "09d40fc9-6815-4ce3-9469-cddb99ce07b0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80bf7_02-guide-how-transfer-learning-v3-09/02-guide-how-transfer-learning-v3-09.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09d40fc9-6815-4ce3-9469-cddb99ce07b0",
              "caption": "Case 4: Large Data Set, Different Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 290504,
              "key": "8ded10fc-6af4-4b9e-933b-5c8ba5dcfd2e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If the new data set is large and different from the original training data:\n- remove the last fully connected layer and replace with a layer matching the number of classes in the new data set\n- retrain the network from scratch with randomly initialized weights\n- alternatively, you could just use the same strategy as the \"large and similar\" data case\n\nEven though the data set is different from the training data, initializing the weights from the pre-trained network might make training faster. So this case is exactly the same as the case with a large, similar data set.\n\nIf using the pre-trained network as a starting point does not produce a successful model, another option is to randomly initialize the convolutional neural network weights and train the network from scratch.\n\nHere is how to visualize this approach:",
              "instructor_notes": ""
            },
            {
              "id": 291804,
              "key": "061f19fd-25b0-40bf-bacd-4451edcbb20b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58e80c1c_02-guide-how-transfer-learning-v3-10/02-guide-how-transfer-learning-v3-10.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/061f19fd-25b0-40bf-bacd-4451edcbb20b",
              "caption": "Neural Network with Large Data Set, Different Data",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 292365,
              "key": "8b2de421-1cda-4494-a572-344568a60b78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Optional Resources\n\n- Check out this [research paper](https://arxiv.org/pdf/1411.1792.pdf) that systematically analyzes the transferability of features learned in pre-trained CNNs.\n- Read the [Nature publication](http://www.nature.com/articles/nature21056.epdf?referrer_access_token=_snzJ5POVSgpHutcNN4lEtRgN0jAjWel9jnR3ZoTv0NXpMHRAJy8Qn10ys2O4tuP9jVts1q2g1KBbk3Pd3AelZ36FalmvJLxw1ypYW0UxU7iShiMp86DmQ5Sh3wOBhXDm9idRXzicpVoBBhnUsXHzVUdYCPiVV0Slqf-Q25Ntb1SX_HAv3aFVSRgPbogozIHYQE3zSkyIghcAppAjrIkw1HtSwMvZ1PXrt6fVYXt-dvwXKEtdCN8qEHg0vbfl4_m&tracking_referrer=edition.cnn.com) detailing Sebastian Thrun's cancer-detecting CNN!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 289660,
          "key": "86b98dc6-8f98-4e32-9782-34dd077d5360",
          "title": "Transfer Learning in Keras",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "86b98dc6-8f98-4e32-9782-34dd077d5360",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 310804,
              "key": "f0e931df-b011-43f5-b37e-6b343fc8d118",
              "title": "Transfer Learning in Keras",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HsIAznMM1LA",
                "china_cdn_id": "HsIAznMM1LA.mp4"
              }
            },
            {
              "id": 291912,
              "key": "43f6c345-b8fe-4605-a1ad-d954bf34777a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The Jupyter notebook described in the video can be accessed from the `aind2-cnn` GitHub repository linked [here](https://github.com/udacity/aind2-cnn).  Navigate to the __transfer-learning/__ folder and open __transfer_learning.ipynb__.  If you'd like to learn how to calculate your own bottleneck features, look at __bottleneck_features.ipynb__.  (You may have trouble running __bottleneck_features.ipynb__ on an AWS GPU instance - if so, feel free to use the notebook on your local CPU/GPU instead!)\n\n### Optional Resources\n\n- Here's the [first research paper](http://cnnlocalization.csail.mit.edu/Zhou_Learning_Deep_Features_CVPR_2016_paper.pdf) to propose GAP layers for object localization.\n- Check out this [repository](https://github.com/alexisbcook/ResNetCAM-keras) that uses a CNN for object localization.\n- Watch this [video demonstration](https://www.youtube.com/watch?v=fZvOy0VXWAI) of object localization with a CNN.\n- Check out this [repository](https://github.com/alexisbcook/keras_transfer_cifar10) that uses visualization techniques to better understand bottleneck features.\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}