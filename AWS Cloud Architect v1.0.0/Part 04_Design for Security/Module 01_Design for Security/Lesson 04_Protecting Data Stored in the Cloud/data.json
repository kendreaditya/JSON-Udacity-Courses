{
  "data": {
    "lesson": {
      "id": 1012650,
      "key": "e30d21d0-ca9d-44ca-b0b5-2c62c239e0cf",
      "title": "Protecting Data Stored in the Cloud",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Our goal is to minimize the risk of a malicious actor accessing our networks and servers, invoke the AWS API, and, ultimately, perform destructive or unauthorized actions in our environments.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/e30d21d0-ca9d-44ca-b0b5-2c62c239e0cf/1012650/1593159314794/Protecting+Data+Stored+in+the+Cloud+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/e30d21d0-ca9d-44ca-b0b5-2c62c239e0cf/1012650/1593159308275/Protecting+Data+Stored+in+the+Cloud+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1012638,
          "key": "cd2ef613-4a7d-418b-b307-de102e6da3a4",
          "title": "Data Protection",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cd2ef613-4a7d-418b-b307-de102e6da3a4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012578,
              "key": "4b6f2c96-f502-47c3-8ce1-853f09c57ac1",
              "title": "Protecting Data Stored in the Cloud Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Protecting Data Stored in the Cloud\n\nIn this lesson, we will start looking at ways to ensure that data stored in the cloud is protected at rest. We will take a look at some of the encryption and encryption key management services that are provided in AWS.\n\nBy the end of the lesson, you should have a familiarity with leveraging these services with your applications that process and store sensitive data.",
              "instructor_notes": ""
            },
            {
              "id": 1012584,
              "key": "1fb00e1a-0c06-4b59-920b-63ea3b0b7086",
              "title": "ND063 C3 L3 01 Protecting Data Stored In The Cloud Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6meokBg7hPc",
                "china_cdn_id": "6meokBg7hPc.mp4"
              }
            },
            {
              "id": 1012582,
              "key": "cbc215d9-db73-41b7-9488-21af5e78b331",
              "title": "Protecting Data Stored in the Cloud Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Our goal was to minimize the risk of a malicious actor being able to access our networks and servers, invoke the AWS API, and, ultimately, perform destructive or unauthorized actions in our environments.\n\nIt is crucial that the data that we are storing in the cloud is encrypted and that the encryption keys are correctly managed!  In the event that there were to be a vulnerability to our network or AWS account settings, we want to reduce the risk of data being readable by an unauthorized party. ",
              "instructor_notes": ""
            },
            {
              "id": 1012585,
              "key": "41a98758-f9d8-43d9-87a5-b9b733229464",
              "title": "Lesson Location Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e950089_0.-lesson-location-image/0.-lesson-location-image.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/41a98758-f9d8-43d9-87a5-b9b733229464",
              "caption": "**You are Here**",
              "alt": "You are starting the Protecting Data Stored in the Cloud lesson.",
              "width": 1698,
              "height": 276,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1012640,
          "key": "3d0dd75d-a427-4f0f-bd5b-ae348ccb8c7e",
          "title": "Big Picture",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d0dd75d-a427-4f0f-bd5b-ae348ccb8c7e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012586,
              "key": "3a3f774c-cba7-4c79-abf9-ba0f54f84861",
              "title": "Big Picture Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Big Picture",
              "instructor_notes": ""
            },
            {
              "id": 1012587,
              "key": "78953656-b86e-4d46-9fa8-2e8d2a9bea6a",
              "title": "ND063 C3 L3 02 Big Picture Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AyokKIPhzgk",
                "china_cdn_id": "AyokKIPhzgk.mp4"
              }
            },
            {
              "id": 1012589,
              "key": "6db5f22d-2bbc-4cd5-a35c-3f8a738e2e4e",
              "title": "Big Picture Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Ensuring that data is encrypted at all levels, at rest and in transit, is crucial when it comes to designing both infrastructure and applications. Ensuring data is encrypted at all layers further reduces the risk of data falling into the wrong hands.",
              "instructor_notes": ""
            },
            {
              "id": 1012588,
              "key": "6d4da796-e9d7-4e11-ae47-00192dbbfa68",
              "title": "Big Picture Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6d4da796-e9d7-4e11-ae47-00192dbbfa68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Think about and identify which of the following scenarios would benefit from encrypting data stored in the cloud.",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "AWS API credentials were compromised allowing a user to download data from an S3 bucket.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "An application is storing personally identifiable information (PII) data in a database table.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "An organization is storing medical records on disk. They need to meet HIPPA compliance.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Static frontend content for a public website that is stored on an EBS volume for a web server.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012641,
          "key": "743ea719-19e5-42a8-97ac-fe296b0e3dc2",
          "title": "Intuition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "743ea719-19e5-42a8-97ac-fe296b0e3dc2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012590,
              "key": "4afcb434-a756-4fba-a2fa-14bf37058bfb",
              "title": "Developing Your Intuition About Protecting Data Stored in the Cloud Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Developing Your Intuition About Protecting Data Stored in the Cloud\n\nWhen designing and architecting cloud environments and applications, it is critical to understand encryption needs and requirements at all layers.\n\nLet's look at some key high level questions and considerations that you'll keep in mind when designing or assessing an environment.",
              "instructor_notes": ""
            },
            {
              "id": 1012591,
              "key": "90b03a89-43d3-49ef-8a53-c76f26bfdb1e",
              "title": "ND063 C3 L3 03 Developing Your Intuition About Protecting Data Stored In The Cloud Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HHIzC65Fgp0",
                "china_cdn_id": "HHIzC65Fgp0.mp4"
              }
            },
            {
              "id": 1012593,
              "key": "4b51b30b-7149-47ba-9f20-acc8b1252c54",
              "title": "Developing Your Intuition About Protecting Data Stored in the Cloud Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Needs and Requirements for Designing and Architecting Cloud Environments\n\n#### Understand the Application\nAn architect needs to be able to identify all application code and services that will run in an environment which are persisting or potentially persisting data to cloud data stores.\n\n#### Classify Data\nYour organization should have data classification standards that will allow you to identify and tag cloud components so that components storing sensitive data are easily identifiable.\n\n#### Understand Roles and Responsibilities around Key Management\nDetermine who needs access encryption keys in order to encrypt data, decrypt data, manage key permissions and destroy or rotate keys.\n\n#### Understand Organizational Security and Compliance Requirements\nMany design choices in the cloud will hinge on specific regulatory or organization compliance policies around data encryption.",
              "instructor_notes": ""
            },
            {
              "id": 1013400,
              "key": "ac482b8f-1394-4efe-98a7-3df73616415d",
              "title": "Requirements and Considerations",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ac482b8f-1394-4efe-98a7-3df73616415d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "In order to ensure that data is protected in your cloud environment, certain things need to be considered from a security perspective when evaluating the environment or requirement.\n"
                },
                "concepts_label": "Architecture Requirement",
                "answers_label": "Design Consideration",
                "concepts": [
                  {
                    "text": "\nApplication code will be writing customer phone numbers to an RDS database.",
                    "correct_answer": {
                      "id": "a1586823350939",
                      "text": "\nUnderstand the Application"
                    }
                  },
                  {
                    "text": "\nS3 buckets will be provisioned for storing sensitive medical record files.\n",
                    "correct_answer": {
                      "id": "a1586823419597",
                      "text": "\nClassify Data\n"
                    }
                  },
                  {
                    "text": "\nMembers of a security and governance team will approve which application instance roles will have access to utilize an encryption key.\n",
                    "correct_answer": {
                      "id": "a1586823420580",
                      "text": "\nUnderstand Roles and Responsibilities around Key Management\n"
                    }
                  },
                  {
                    "text": "\nOur cloud applications will be processing payments and we need to adhere to PCI-DSS standards.\n",
                    "correct_answer": {
                      "id": "a1586823422216",
                      "text": "\nUnderstand Organizational Security and Compliance Requirements.\n"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1586823350939",
                    "text": "\nUnderstand the Application"
                  },
                  {
                    "id": "a1586823422216",
                    "text": "\nUnderstand Organizational Security and Compliance Requirements.\n"
                  },
                  {
                    "id": "a1586823419597",
                    "text": "\nClassify Data\n"
                  },
                  {
                    "id": "a1586823420580",
                    "text": "\nUnderstand Roles and Responsibilities around Key Management\n"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012648,
          "key": "995bfef5-0605-4a4a-a963-07b877b14ec2",
          "title": "Data Encryption",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "995bfef5-0605-4a4a-a963-07b877b14ec2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012596,
              "key": "e010dd09-5ee8-4c52-a646-69093f599edf",
              "title": "Application Data Encryption Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Application Data Encryption\n\nThere are multiple strategies for ensuring that data processed and generated by an application ends up in an encrypted state on disk or cloud storage.\n\nIn this concept, we will examine a few common scenarios of persisting data in a cloud environment and see how the data is encrypted.",
              "instructor_notes": ""
            },
            {
              "id": 1012594,
              "key": "b836c658-feb6-4496-ba57-c576d474f34e",
              "title": "ND063 C3 L3 04 Application Data Encryption Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aGeLJcvaFe4",
                "china_cdn_id": "aGeLJcvaFe4.mp4"
              }
            },
            {
              "id": 1012592,
              "key": "4e0953b3-9234-4132-a26f-5b379fa62dd0",
              "title": "Application Data Encryption Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Methods For Encrypting Application Data\n\nThere are multiple strategies for ensuring that data processed and generated by an application ends up in an encrypted state on disk.\n\nApplications and underlying infrastructure services will leverage the following concepts:\n\n#### Key Management Service and Encryption Keys\nRefer to a key management service to determine which encryption key will be used to encrypt the data.  \n\nAWS provides a key management service called KMS which is tightly integrated with the AWS services and the AWS SDKs that a developer would be using.  \n\n#### Client-Side Encryption\nYou can choose to encrypt the data within the application prior to persisting or writing. We will loosely refer to this as client-side encryption.\n\n#### Server-Side or AWS Service native encryption\nAlternatively, have the AWS service handle the underlying encryption activities. We can refer to this broadly as server-side encryption.\n\n### Common Scenarios\nLet's look at a few common scenarios of persisting data in a cloud environment and see how the data is encrypted.  ",
              "instructor_notes": ""
            },
            {
              "id": 1012600,
              "key": "284b4725-9e85-49c6-85cc-9cd4b0ca70f9",
              "title": "client-side Encryption - Writing Data to Disk",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Writing Data to Disk With Client-Side Encryption\nAn application may write data to a disk mount such as an EBS volume or EFS mount. The application can use AWS SDKs and the KMS service to encrypt a file prior to writing to disk.\n\nOnce a data encryption key is obtained, Developers can choose to use language native encryption libraries. They can also leverage the AWS SDK to go through the encryption process.  The AWS SDK helps by encapsulating many of the steps required to encrypt and store the data.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1012599,
              "key": "b94cd5ac-7a64-4178-8059-64e1750bc968",
              "title": "Writing Data to Disk with client-side Encryption",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e9503a8_2.-writing-data-to-disk-with-client-side-encryption/2.-writing-data-to-disk-with-client-side-encryption.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b94cd5ac-7a64-4178-8059-64e1750bc968",
              "caption": "\n**Using Client-Side Encryption to Write Files to Disk**",
              "alt": "Application code can leverage KMS keys to use the AWS encryption SDK or language specific encryption libraries to encrypt files prior to writing to disk.",
              "width": 600,
              "height": 334,
              "instructor_notes": null
            },
            {
              "id": 1012601,
              "key": "379196a8-6d53-4770-bc64-40ae080453e7",
              "title": "Writing Data To Disk - Encrypting Disk Volumes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Using Encrypted Disk Volumes in AWS\n\nOn the infrastructure side we need to ensure that disk volumes are configured to use KMS encryption so that the entire disk remains encrypted regardless of the fact that the application chooses to encrypt or not.\n\n* The EC2 Service can obtain a data encryption key from KMS.  The encryption key is based on a master key that the EBS volume is associated with.  \n\n* The data encryption key is then used by the hypervisor to ensure that all I/O operations result in encrypted data on disk.  Write operations will use the key to encrypt and read operations will use the key to decrypt.\n\n*  The hypervisor will make the data available and decrypted to the instance operating system.",
              "instructor_notes": ""
            },
            {
              "id": 1012598,
              "key": "1f7a3fa5-b41d-41b1-9f2d-f245e27587f1",
              "title": "Writing Data To Disk - Encrypting Disk Volumes",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e950416_3.-hypervisor/3.-hypervisor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1f7a3fa5-b41d-41b1-9f2d-f245e27587f1",
              "caption": "\n**Using Encrypted Disk Volumes in EC2**",
              "alt": "The EC2 service can obtain data encryption keys from KMS.  The encryption keys can be used by the EC2 hypervisor to ensure that data is encrypted on the physical disk volumes.",
              "width": 600,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 1012597,
              "key": "b036db4c-6d3f-4867-8bbf-8a916f57d801",
              "title": "Encrypting Database Data",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Writing Data to a Database Table\nThe same concept we looked at for encrypting file data on disk volumes applies to databases too. The application should encrypt sensitive data prior to storing the record value in the database, using the encryption SDKs. On the platform service or server-side, we need to ensure that encryption is enabled when provisioning the database platform of choice (e.g. RDS, DynamoDB etc).\n",
              "instructor_notes": ""
            },
            {
              "id": 1012602,
              "key": "88d67719-3239-4d3d-90c2-19a46639edf0",
              "title": "Encrypting Database Data",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e9504c1_4.-encrypting-database-data/4.-encrypting-database-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/88d67719-3239-4d3d-90c2-19a46639edf0",
              "caption": "\n**Encrypting Database Data:** - Client-Side Using the SDK and Server-Side Using Service Encryption Settings",
              "alt": "Application that need to write sensitive data to a database table can also leverage the AWS encryption SDK to encrypt the data prior to inserting into a database table record.  \n\nWe can also configure database platform services such as AWS RDS or DynamoDB to encrypt underlying data.",
              "width": 600,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 1012604,
              "key": "9a19d975-5fe1-42b3-84fb-bfa174836d6f",
              "title": "Encrypting Data in S3",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Writing Data to Object Storage, such as S3\nHighly sensitive data should be encrypted by the application prior to putting an object in S3. In this case, because we use client-side encryption from within the application code and encryption SDK, S3 will not be aware about the encryption.\n\nIn the case of S3, the application code can also set parameters for server-side encryption so that the S3 service will handle the encryption for the particular objects. S3 buckets can also be configured to have default server-side encryption enabled for all new objects. In this case encryption is transparent to the application code.\n\nAs a best practice we want to ensure that S3 server-side encryption is enabled by default where possible. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1018145,
          "key": "1b88292d-dfb4-46f5-8edb-13d38deacb33",
          "title": "Client-Side vs. Server-Side",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b88292d-dfb4-46f5-8edb-13d38deacb33",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012637,
              "key": "46030de7-e206-425b-9578-cfd55107fcdb",
              "title": "Data Encryption - Trade-Offs",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Client-Side vs.Server-Side\n\n### Client-Side Encryption\n\n#### Pros\nThe cloud provider, that is AWS,  or anyone with access to the underlying disk volumes will only see ciphered or encrypted data.  The data is effectively useless to them unless of course they have permissions or access to the encryption keys.\n\n#### Cons \nThe code will have additional complexity of using SDK's and libraries required to perform cryptographic functions. Some additional understanding of encryption is also needed to do this effectively. There is always the potential of this additional functionality being inadvertently omitted from the code .\n\n### Server-Side Encryption\n\n#### Pros\nFor most use cases server-side encryption can be completely transparent to the developer or application code. So, from an implementation perspective, it is simpler and easier to use.\n\n#### Cons \nAnyone with read access permissions to the service in question will perform a read and be able to see the plain text data.\n\n### Best Practices\nAs a best practice it is highly advisable to leverage server-side encryption as a default deployment pattern for any AWS services being used to store data. \n\nThe decision to use client-side encryption in your applications may be made on a case-by-case basis for sensitive data or to meet any compliance requirements.",
              "instructor_notes": ""
            },
            {
              "id": 1012603,
              "key": "1ba34f1a-47f5-455a-912a-53d19b031bc1",
              "title": "Encrypting Data in S3",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e950677_5.-encrypting-data-in-s3/5.-encrypting-data-in-s3.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1ba34f1a-47f5-455a-912a-53d19b031bc1",
              "caption": "\n**Methods to Encrypt Data in S3**",
              "alt": "Application code can make use of the AWS encryption SDK to encrypt data prior to writing to S3 buckets.  The code can also set an encryption flag to have the S3 service encrypt the data.  Finally, we can configure S3 buckets to encrypt objects by default using server-side encryption.",
              "width": 700,
              "height": 500,
              "instructor_notes": null
            },
            {
              "id": 1013720,
              "key": "50271f16-8eea-4b64-a83a-8a8a59b85e24",
              "title": "Data Encryption Demo Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Encryption Demo",
              "instructor_notes": ""
            },
            {
              "id": 1012605,
              "key": "f3523c56-933d-4515-a0a1-f6046aeebc4b",
              "title": "ND063 C3 L3 05 Application Data Encryption Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kZYVd0zKDPQ",
                "china_cdn_id": "kZYVd0zKDPQ.mp4"
              }
            },
            {
              "id": 1012617,
              "key": "c71a0703-de1a-416e-97d9-5152926dcb19",
              "title": "Application Data Encryption New Terms or Vocabulary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms\n#### AWS Encryption SDK\nEncryption libraries provided by AWS that an application can use to encrypt data prior to writing to storage. The SDK makes the process of using the AWS key management service seamless.\n\n#### Key Management Service (KMS)\nAWS service that allows provisioning, storage and management of master encryption keys. KMS also provides the ability to manage permissions pertaining to cryptographic actions on encryption keys.\n\n#### Client-Side Encryption\nWith client-side encryption, the application code will handle cryptographic operations on the data prior to persisting to a given storage medium.\n\n#### Server-Side Encryption\nWith server-side encryption, the storage service being used will handle cryptographic operations on the data while handling read and write operations.   This process is transparent to the application which is persisting the data.",
              "instructor_notes": ""
            },
            {
              "id": 1012606,
              "key": "f1e7a9de-1518-4f75-a891-985ccec394b7",
              "title": "Application Data Encryption",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f1e7a9de-1518-4f75-a891-985ccec394b7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You are writing code for a service that will store users personally identifiable information in a Postgres database table using the RDS service in AWS.\n\nChoose two methods for ensuring that the sensitive data ends up encrypted at rest.",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Store the data in S3 with server-side encryption enabled.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Encrypt the personal information in the code prior to inserting it into the database table.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Ensure that the RDS database instance is provisioned with SSD type disk volumes.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Provision the RDS database instance with storage encryption enabled.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1012616,
              "key": "e700e234-dc41-4c02-bc80-4ec5b8dd748b",
              "title": "Application Data Encryption Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Resources\n\n- [AWS Encryption SDK documentation](https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html)\n\n- [Dynamo DB Client-Side and Server-Side Encryption guide](https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/client-server-side.html)\n\n- [S3 Client-Side and Server-Side Encryption Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012642,
          "key": "75ed5040-6d65-4aed-b311-04f9c18177f3",
          "title": "S3 Bucket Encryption",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "75ed5040-6d65-4aed-b311-04f9c18177f3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012607,
              "key": "1402fa58-5a9e-4ad2-b7d0-10d6b3015396",
              "title": "S3 Bucket Encryption Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## S3 Bucket Encryption\n\nLet's take a closer look at S3 bucket encryption! This is by far one of the most common services that cloud native applications use to store objects.",
              "instructor_notes": ""
            },
            {
              "id": 1012609,
              "key": "af1c1b17-7205-4d79-be19-eac4db3ffc57",
              "title": "ND063 C3 L3 06 S3 Bucket Encryption Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "c4jBldoNFTQ",
                "china_cdn_id": "c4jBldoNFTQ.mp4"
              }
            },
            {
              "id": 1013404,
              "key": "330f444d-0113-4d9f-bde8-3079bfd6409c",
              "title": "S3 Bucket Server-Side Encryption Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### S3 Bucket Server-Side Encryption\n \nAs discussed previously, client-side encryption allows the application to encrypt data prior to sending it to disk or other persistent cloud storage.\n\nIn many cases, client-side encryption may not be required. Regardless of the choice to use client-side encryption, as a best practice we want to ensure that any data stored in the cloud should at minimum make use of the cloud provider's server-side encryption capabilities.\n\nS3 buckets provisioned in AWS support a few different methods of ensuring your data is encrypted when physically being stored on disk.\n\n#### S3-Managed Keys\n\nWith this simple option, we can specify that any object written to S3 will be encrypted by S3 and the S3 service will manage the encryption keys behind the scenes. Because the key management aspect is transparent to the caller, this is the simplest and easiest option.  It is important to keep in mind that with this option anyone with read access permissions to the bucket and file. Anyone with read permission will be able to make calls to the service to retrieve the file unencrypted.\n\n#### AWS-Managed Master Keys\n\nIn this option, the caller will need to specify that KMS will manage encryption keys for the S3 service. This provides additional auditability of S3's use of the encryption keys.\n\n#### Customer-Managed Master Keys\n\nAgain, the caller will need to specify that KMS will manage encryption keys for the S3 service. The caller will also need to specify the key that will be used for encryption.\nAdditionally, the caller needs to have permissions to use the key.  This provides additional ability to control and restrict which principals can access or decrypt sensitive data.\n\n#### Customer-Provided Keys\n\nIn this case, the customer can provide encryption keys to S3. S3 will perform the encryption on the server without keeping the key itself. The key would then be provided with the request to decrypt the object. With this option the burden of managing the key falls on the customer. ",
              "instructor_notes": ""
            },
            {
              "id": 1012611,
              "key": "fe04bf9c-f715-43fe-ae34-c833dfdf1638",
              "title": "S3 Server-Side Encryption Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e95070f_1.-s3-server-side-encryption-image/1.-s3-server-side-encryption-image.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fe04bf9c-f715-43fe-ae34-c833dfdf1638",
              "caption": "**S3 Server-Side Encryption**",
              "alt": "There are four types of S3 Server-Side Encryption.",
              "width": 600,
              "height": 220,
              "instructor_notes": null
            },
            {
              "id": 1012612,
              "key": "89f07ed0-8541-413c-bbbb-39a894d8b9ba",
              "title": "S3 Bucket Encryption Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Implementation Options\n\n#### Encrypt On Write\nIn this case, API calls to S3 for uploading or copying file objects will need to explicitly specify the type of server-side encryption desired. The code will need some awareness of the choice to use server-side encryption and which key to use.\n\n#### Default Encryption\nConfigures S3 buckets with default encryption enabled. This will automatically encrypt files that are written to S3. \n\nDefault encryption will allow you to specify which type of server-side encryption will be used and designate a specific KMS key if you choose to do so\n\n### Summary\n\nServer-side encryption for AWS services is a very powerful and transparent way to ensure that security best practices are implemented. We have highlighted this with S3, however, other AWS services, for example DynamoDB, also provide this functionality.",
              "instructor_notes": ""
            },
            {
              "id": 1012610,
              "key": "ec7180f0-9b87-4287-a002-8974a158cc63",
              "title": "S3 Bucket Encryption Heading New Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms\n\n#### Key Management Service (KMS)\nAWS service that allows provisioning, storage and management of master encryption keys. KMS also provides the ability to manage permissions pertaining to cryptographic actions on encryption keys.\n\n#### Customer Master Key (CMK)\nThe customer master key is the master encryption key that will be used to encrypt and store underlying data encryption keys in the KMS service.  Other services or applications will select a CMK to use for their cryptographic operations.\n\n#### AWS-Managed CMK\nAWS managed customer master keys are provisioned, rotated and managed by AWS.  AWS will provision a new master key for each AWS service in the AWS account at the time the service needs to start encrypting data.  These keys are not available to use by your applications for client-side encryption.\n\nYou may not change or assign permissions on these keys. \n\n#### Customer-Managed CMK\nCustomer managed master keys are provisioned and managed by the customer (you).  Once you provision a key, you may use that key with any AWS services or applications.\n\nYou can manage permissions on customer managed CMKs to control which IAM users or roles can manage or use the encryption keys.  Permissions to use the keys can also be granted to AWS services and other AWS accounts.\n\n#### Default Encryption\nA configuration setting on an AWS resource, such as an S3 bucket, designating that the storage as a whole, or all objects written, will be encrypted by the service being used (e.g. S3).\n",
              "instructor_notes": ""
            },
            {
              "id": 1012615,
              "key": "fd1e19e8-9ecb-4b55-aa20-ea13782280fd",
              "title": "S3 Bucket Encryption Easy Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fd1e19e8-9ecb-4b55-aa20-ea13782280fd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following best describes the default encryption settings provided by S3?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "S3 will not allow files to be written unless they have client-side encryption.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It enforces server-side encryption to be set when making the API call to write an object.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "S3 will transparently encrypt any object written to the bucket even if the API call did not specify server-side encryption.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1012613,
              "key": "2c354841-3543-40c4-88cb-bb17e09c7c40",
              "title": "S3 Bucket Encryption Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Resources\n\n- [More about S3 Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html)\n\n- [More about S3 Default Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html)\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012649,
          "key": "1e95c4eb-8d27-4904-bda1-051400dc8f89",
          "title": "Exercise: Encryption",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e95c4eb-8d27-4904-bda1-051400dc8f89",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012636,
              "key": "6ab3b9a3-9f5e-4681-a9f6-effb8fda5fd4",
              "title": "Using Server-Side Encryption Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Using Server-Side Encryption\n\nIn this exercise, you will use the AWS API to write a file to an S3 bucket. You can either use the AWS API for a language you're comfortable, or you can use the AWS CLI.  \n\n### 1. Create a Sample Application\n\n[Refer to the bottom of this link for guides to AWS SDK documentation for specific languages and the CLI](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html).\n\nWhen writing your put-object code or command, make sure to choose a specific type of server-side encryption.\n\n### 2. Run the Code\nRun your code to write a file of your choice to an S3 bucket in your AWS account.\n\n### 3. Verification\n1) Open the console and go to the S3 service page.\n\n2) Find the new file that you have uploaded. \n\n3) Select the file and go to the properties tab.\n\n4) Select encryption.  The panel will open up and you can verify that the type of encryption selected is indeed what you had specified when writing the file.",
              "instructor_notes": ""
            },
            {
              "id": 1012614,
              "key": "4c4eaff3-82df-4bd0-9662-72bb2248b169",
              "title": "Using Server-Side Encryption Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c4eaff3-82df-4bd0-9662-72bb2248b169",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Choose a language to write your application in - or choose to use the CLI.",
                "Read through the documentation for the AWS API related to the put-object call.",
                "Write a simple piece of code that will write a plain text string to S3 as an object.",
                "Run your code either locally or from within your AWS account.",
                "Verify that the file was stored in S3 with the server-server-side encryption settings that you chose."
              ],
              "positive_feedback": "Great job!  You should have a better idea of how to incorporate encryption into your cloud applications that use S3 for storage.",
              "video_feedback": null,
              "description": " In this exercise, you will use the AWS API to write a file to an S3 bucket."
            }
          ]
        },
        {
          "id": 1012646,
          "key": "f7c386ae-3ecd-4c36-b831-19313346d219",
          "title": "Solution: Encryption",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f7c386ae-3ecd-4c36-b831-19313346d219",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012618,
              "key": "24172fe1-d796-4faf-b32d-341813e911a0",
              "title": "Using Server-Side Encryption Exercise Solution Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ## Solution: Using Server-Side Encryption",
              "instructor_notes": ""
            },
            {
              "id": 1012620,
              "key": "bc03dd6f-fd19-4c89-bc22-6ad15e80841e",
              "title": "ND063 C3 L3 07 Using Server-Side Encryption Exercise Solution Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "suQZ-2H4d-U",
                "china_cdn_id": "suQZ-2H4d-U.mp4"
              }
            },
            {
              "id": 1012630,
              "key": "af0d1e8c-371d-4085-aa30-45c7c0eaa4e9",
              "title": "Using Server-Side Encryption Exercise Solution Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this exercise, you were tasked with writing data to an S3 bucket with server-side encryption enabled.\n\nUsing server-side encryption with KMS customer master keys is a great way to ensure that your data in the cloud is protected and secure.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012645,
          "key": "fc89c498-a2c6-478b-8f78-3eb824be4111",
          "title": "Key Management",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fc89c498-a2c6-478b-8f78-3eb824be4111",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012619,
              "key": "3e40c92d-7b88-49db-9533-32c51a1ce8fd",
              "title": "Encryption Key Management Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Encryption Key Management\n\nPreviously, we looked at using encryption keys in applications that are running in the cloud and options to ensure that objects stored in S3 cloud storage are encrypted at rest.\n\nLet's look at a few best practices for ensuring that encryption keys themselves are managed securely.",
              "instructor_notes": ""
            },
            {
              "id": 1012621,
              "key": "05873ef3-96d0-4b48-a124-5410ee516761",
              "title": "ND063 C3 L3 08 Encryption Key Managment Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gRthsKV5FBw",
                "china_cdn_id": "gRthsKV5FBw.mp4"
              }
            },
            {
              "id": 1012622,
              "key": "65c54b6c-edcd-44e7-8e0f-80343a061d63",
              "title": "Encryption Keys Video Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using The AWS Key Management Service\n\nLet's look at a few options and best practices for ensuring that encryption keys themselves are managed securely using the AWS Key Management Service. KMS provides multiple avenues for creating CMKs. It is important to understand the difference between these options. \n\n### AWS-Managed Customer Master Keys\nThis is the default and easiest type of KMS key to use. It requires very little management and no cost on the part of the customer.\n\nThe key is provisioned automatically by KMS when a service such as S3 or EC2 needs to use KMS to encrypt underlying data.  A separate master key would be created for each service that starts using KMS.\n\nPermissions to AWS managed keys are also handled behind the scenes.  Any principal or user who has access to a particular service would inherently have access to any encrypted data that the service had encrypted using the AWS managed keys.\n\nUsing an example of a DynamoDB table that has encryption using AWS managed keys, all users or roles in the account that have read access to the dynamodb table would be able to read data from the table.\n\nWith this method key rotation is also handled behind the scenes by AWS and keys are rotated every 3 years.\n\nThis approach is acceptable if **the sole requirement is to ensure that data is encrypted at rest in AWS' data centers**.\n\n#### Limitations With AWS Managed CMKs\nThe main drawback here is that it does not allow granular and least privileged access to the keys.  It would not be possible to segment and isolate permissions to certain keys and encrypted data. In addition to this limitation, AWS managed keys are not available for applications to use for client-side encryption since they are only available for use by AWS services.\n\nThis approach is also not recommended for accounts where sensitive data is present since in the event of the AWS account or role compromised for some reason, encrypted data may not be protected.",
              "instructor_notes": ""
            },
            {
              "id": 1012608,
              "key": "a2297216-1c78-4bdd-8927-200007891520",
              "title": "Encryption Keys - Customer Managed Customer Master Keys",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e9508f9_6.-encryption-keys-customer-managed-cmks/6.-encryption-keys-customer-managed-cmks.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a2297216-1c78-4bdd-8927-200007891520",
              "caption": "Using Customer Managed CMKs to protect data",
              "alt": "Customer Managed CMKs allow a powerful way to manage permissions on KMS keys. We can define who can manage keys and we can also define which applications and IAM roles can use the keys to encrypt or decrypt data.",
              "width": 1000,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 1012635,
              "key": "f0fa0352-d09d-4c09-a1d3-0c9383900d95",
              "title": "Encryption Keys - Customer Managed Customer Master Keys",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Customer-Managed Customer Master Keys\nThe second option is to explicitly  provision the keys using KMS.  In this case the user creates and manages permissions to the keys.  \n\nAWS will create the key material and rotate keys on a yearly basis, and the user does have the option to choose to manually rotate keys.\n\nThe main benefit to this approach is that **permissions to manage and use the keys can be explicitly defined and controlled**.  This allows separation of duties, segmentation of key usage etc.  \n\nAgain using DynamoDB as an example, we can have much more flexibility to restrict access to data by restricting access to encryption keys. For example we can have 2 separate master keys, for two different sets of tables or data classifications, for example non-sensitive and sensitive tables.  We can also assign certain IAM roles to be able to use the keys, and other IAM roles to be able to manage the keys.\n\nThis second approach is a good balance between manageability and security, and it will generally provide the capabilities mandated by most compliance standards.\n\nKMS also provides the ability for the user to create master key material outside of AWS and import it into KMS.\n\n#### Bring Your Own Key\nWhen new customer master keys are provisioned in KMS, by default, KMS creates and maintains the key material for you. However,  KMS also provides the customer the option of importing their own key material which may be maintained in a key store external to KMS. With this option **the customer has full control of the key's lifecycle including expiration, deletion, and rotation**.\n\nA potential use case for importing key material may be to maintain backup copies of the key material external to AWS to fulfill disaster recovery requirements. Customers may also find this option useful if they have a desire to use one key management system for cloud and on-premise infrastructure.",
              "instructor_notes": ""
            },
            {
              "id": 1012625,
              "key": "8cf69fca-c924-4980-8ce4-bedb131114e0",
              "title": "Encryption Key Management New Terms or Vocabulary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms\n#### Key Rotation\nThe process of changing data encryption keys used for cryptographic operations on a periodic basis.\n\n#### Customer Master Key (CMK)\nThe customer master key is the master encryption key that will be used to encrypt and store underlying data encryption keys in the KMS service. Other services or applications will select a CMK to use for their cryptographic operations.\n\n#### AWS-Managed CMK\nAWS-managed customer master keys are provisioned, rotated and managed by AWS. AWS will provision a new master key for each AWS service in the AWS account at the time the service needs to start encrypting data. These keys are not available to use by your applications for client-side encryption.\n\nYou may not change or assign permissions on these keys. \n\n#### Customer-Managed CMK\nCustomer managed master keys are provisioned and managed by the customer (you).  Once you provision a key, you may use that key with any AWS services or applications.\n\nYou can manage permissions on customer managed CMKs to control which IAM users or roles can manage or use the encryption keys. Permissions to use the keys can also be granted to AWS services and other AWS accounts.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1013406,
          "key": "42f028a5-8652-4394-94c0-ca5c23d90720",
          "title": "Key Management Best Practices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42f028a5-8652-4394-94c0-ca5c23d90720",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1013405,
              "key": "07810a9e-f571-4e5d-9eb2-bd3adf78522e",
              "title": "Key Management Best Practices Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Key Management Best Practices",
              "instructor_notes": ""
            },
            {
              "id": 1012626,
              "key": "9b659ab5-9460-413f-93e1-73e94afdd823",
              "title": "ND063 C3 L3 09 Encryption Key Best Practices",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "clJi2qqP6Jc",
                "china_cdn_id": "clJi2qqP6Jc.mp4"
              }
            },
            {
              "id": 1012624,
              "key": "47814cc3-a682-4eef-a208-93425681bf74",
              "title": "Encryption Key Best Practices Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Best Practices for Managing Customer Master Keys (CMKs)\n\n#### 1. Use Key Policies\n\nUse Key Policies to Explicitly Restrict the Following, Where Possible:\n- Allow certain IAM roles to manage keys.\n- Enforce the precense of MFA for management actions such as changing the key policy or deleting keys.\n- Allow certain IAM roles or users to use the keys for encryption, such as decryption or encryption.\n- Restrict specific AWS services to be allowed to use the key.  For example we can restrict a key to be only used for decrypting S3 objects by application ABC however application will not be able perform decryption actions on DynamoDB.\n\n##### The Default Key Policy\n\nWhen a key is created, the default key policy will allow the following:\n- Ability for IAM principals to be assigned privileges to manage the key. \n- Ability for select IAM principals to manage a key.\n- Ability for select IAM principals to use the key for cryptographic operations.\n- Ability for certain IAM principals to grant permissions to AWS services to use the key.\n\nIn most cases, the default key policy is sufficient with slight modifications depending on the need for other IAM users or accounts to be able to make use of the keys.\n\n#### 2. Least Privilege IAM Policies\n\nWhen using IAM policies to allow access to KMS keys, continue to apply the principle of least privilege wherein the policy only grants specific least required actions to a specific set of key resources.\n\n#### 3. Monitoring and Auditing\n\nAudit and Monitor Calls to KMS and Events Related to Customer Master Keys  \nUsing monitoring services such as CloudTrail and CloudWatch you can be aware of events generated by the KMS service related to management and usage.  Examples of this would be being notified of a keys scheduled deletion or auditing key usage.\n\n#### 4. Enforcing Encryption\n\nIn some cases it will be required to have safe-guards in place to prevent a situation where data can be stored without encryption.\n\nHere are a few suggestions to ensure that this does not happen:\n\n##### IAM Policies\n\nConfigure user or role IAM policies that contain policy conditions that will only allow the creation of a resource if it is set to use encryption.\n\n##### Resource Policies\n\nUsing resource policies, for example in S3, S3 buckets can be set up with bucket policies only allowing write of objects with server-side encryption enabled.\n\n##### Real-Time Monitoring and Remediation\n\nUsing real-time monitoring, lambda functions or AWS config can be used to immediately identify resources that have been created without the mandated encryption settings.\n\nTake this a step further and trigger automation to remove, disable, or update encryption settings on those resources.\n\n### Encryption Key Demo",
              "instructor_notes": ""
            },
            {
              "id": 1012623,
              "key": "39d63f7a-9417-4953-b539-3ee20b15cd6e",
              "title": "ND063 C3 L3 10 Encryption Key Management Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zF2l6QVdJpE",
                "china_cdn_id": "zF2l6QVdJpE.mp4"
              }
            },
            {
              "id": 1012579,
              "key": "eaca1fab-eb56-4ef3-bc7a-87aceaf86b9e",
              "title": "Encryption Key Managment Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Resources\n- [Overview of Managing Access to KMS keys](https://docs.aws.amazon.com/kms/latest/developerguide/control-access-overview.html)\n\n- [Types of Master Keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys)\n\n- [Detailed White Paper on KMS Best Practices](https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf)\n\n- [Key Policies](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html)\n\n- [Understanding the Default Key Policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default)\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012639,
          "key": "b2d2cf17-5ba8-45c3-83c1-a6a07a16c1ca",
          "title": "Key Management Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2d2cf17-5ba8-45c3-83c1-a6a07a16c1ca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1013403,
              "key": "1bf5d868-c4c5-4f45-872e-4bdfa86182f1",
              "title": "Concepts and Definitions",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1bf5d868-c4c5-4f45-872e-4bdfa86182f1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "\nMatch the below concept with the correct definition.\n"
                },
                "concepts_label": "Concepts",
                "answers_label": "Definitions",
                "concepts": [
                  {
                    "text": "\nKey Policy",
                    "correct_answer": {
                      "id": "a1586825662982",
                      "text": "\nDefines which principals or services can take action on a specific KMS key."
                    }
                  },
                  {
                    "text": "\nCustomer Master Key (CMK)",
                    "correct_answer": {
                      "id": "a1586825677802",
                      "text": "\nEncryption key used to encrypt and decrypt data keys.\n"
                    }
                  },
                  {
                    "text": "\nCustomer-Managed CMK\n",
                    "correct_answer": {
                      "id": "a1586825678603",
                      "text": "\nKey provisioned and managed by AWS users using the KMS service.\n"
                    }
                  },
                  {
                    "text": "\nAWS-Managed CMK\n",
                    "correct_answer": {
                      "id": "a1586825679266",
                      "text": "\nKey provisioned and managed by AWS only for use by AWS services.\n"
                    }
                  },
                  {
                    "text": "\nData Key\n",
                    "correct_answer": {
                      "id": "a1586825680161",
                      "text": "\nEncryption key generated by KMS to perform encryption or decryption on data.\n"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1586825662982",
                    "text": "\nDefines which principals or services can take action on a specific KMS key."
                  },
                  {
                    "id": "a1586825678603",
                    "text": "\nKey provisioned and managed by AWS users using the KMS service.\n"
                  },
                  {
                    "id": "a1586825680161",
                    "text": "\nEncryption key generated by KMS to perform encryption or decryption on data.\n"
                  },
                  {
                    "id": "a1586825756356",
                    "text": "\nIAM policy allowing a user or role permissions to use KMS keys.\n"
                  },
                  {
                    "id": "a1586825679266",
                    "text": "\nKey provisioned and managed by AWS only for use by AWS services.\n"
                  },
                  {
                    "id": "a1586825677802",
                    "text": "\nEncryption key used to encrypt and decrypt data keys.\n"
                  }
                ]
              }
            },
            {
              "id": 1012580,
              "key": "406d4a65-a583-4fef-aa2c-524c056589d7",
              "title": "Context",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 2\nA KMS customer master key has been created in account `111122223333`.  \n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"key-consolepolicy-2\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Enable IAM User Permissions\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"AWS\": \"arn:aws:iam::111122223333:root\"},\n      \"Action\": \"kms:*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"Allow access for Key Administrators\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"AWS\": [\n        \"arn:aws:iam::111122223333:role/SecurityAdmin\"\n      ]},\n      \"Action\": [\n        \"kms:Create*\",\n        \"kms:Describe*\",\n        \"kms:Enable*\",\n        \"kms:List*\",\n        \"kms:Put*\",\n        \"kms:Update*\",\n        \"kms:Revoke*\",\n        \"kms:Disable*\",\n        \"kms:Get*\",\n        \"kms:Delete*\",\n        \"kms:TagResource\",\n        \"kms:UntagResource\",\n        \"kms:ScheduleKeyDeletion\",\n        \"kms:CancelKeyDeletion\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"Allow use of the key\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"AWS\": [\n        \"arn:aws:iam::111122223333:role/ApplicationABC\",\n\"arn:aws:iam::111122223333:role/DevOpsRole\",\n        \"arn:aws:iam::444455556666:root\"\n      ]},\n      \"Action\": [\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"Allow attachment of persistent resources\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"AWS\": [\n        \"arn:aws:iam::111122223333:role/ApplicationABC\",\n\"arn:aws:iam::111122223333:role/DevOpsRole\",\n        \"arn:aws:iam::444455556666:root\"\n      ]},\n      \"Action\": [\n        \"kms:CreateGrant\",\n        \"kms:ListGrants\",\n        \"kms:RevokeGrant\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\"Bool\": {\"kms:GrantIsForAWSResource\": \"true\"}}\n    }\n  ]\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 1012581,
              "key": "5394d682-05e7-4f41-9999-ad1c8fde411b",
              "title": "Encryption Key Management Hard Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5394d682-05e7-4f41-9999-ad1c8fde411b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Review the above snippet from the KMS key policy and choose the below statements that are true about the policy.",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "The policy potentially allows for IAM users in account `444455556666` to be able to use the encryption key to perform cryptographic operations.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "The policy allows role `DevOpsRole` to delete or update the key.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "The policy allows role `SecurityAdmin` to delete the key and perform other key management on this key only.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Role `ApplicationABC` will be able to use all encryption keys in the account for cryptographic operations.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012647,
          "key": "2c8bf845-6b2e-49ec-89b3-b974f461da64",
          "title": "Exercise: Key Management",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2c8bf845-6b2e-49ec-89b3-b974f461da64",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012633,
              "key": "51d07116-5502-4203-aa40-46a70428fb13",
              "title": "Encryption Key Management Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Encryption Key Management\n\nIn this exercise, you will perform some steps which are similar to what we have demonstrated in the walkthrough to create, manage, and test encryption keys with a sample application.\n\n1. To get started, please login to your AWS account with a user or role that has administrator level privileges. \n\n2.  Create 2 new IAM roles for use with our sample application. \n - Name the first role `cand-c3-l3-ex2-write`\n - Assign the managed policy, `AWSLambdaExecute` and `AmazonS3FullAccess` to the role. \n - This will allow the lambda function to execute and to read and write files to any S3 buckets in your account.\n\n- Name the second role `cand-c3-l3-ex2-read`\n- Assign the managed policy, `AWSLambdaExecute` and `AmazonS3ReadOnlyAccess` to the role. \n - This will allow the lambda function to execute and to read files from any S3 buckets in your account.\n\n - Note down the role names if you used other names.\n\n3. Create a new KMS key for this exercise; suggested name is `cand-c3-l3-ex2-key`. Choose the IAM user or role you are currently using from the list of principals allowed to administer the key.  Select the option that allows the key admin to delete the key.\n\n4. Choose only the first role, `cand-c3-l3-ex2-write`, as the IAM role allowed to use the key. Note down the key ARN.\n\n5. Create a new S3 bucket for this exercise that will be used to write files to. Note down the name of the bucket.\n\n6. Create a lambda function using the below sample code. The lambda function will write a file to s3 using server-side encryption. Call the lambda function `cand-c3-l3-ex2-lambda-write`.\n\n```python\nimport json\nimport boto3\nimport os\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n        return s3.put_object(\n            Bucket=os.environ['S3_BUCKET'], \n            Key=\"cand_c3_l3_test_object_encrypted.txt\", \n            Body=bytes(\"file contents of my file\", 'utf-8'),\n            ServerSideEncryption=\"aws:kms\",\n            SSEKMSKeyId=os.environ['KEY_ARN']\n        )\n```\n\n7. Create two environment variables \n - `S3_BUCKET=`the name of the S3 bucket you created\n - `KEY_ARN=`the key ARN of the KMS key you created\n\n8. Assign the lambda function the role you created: `cand-c3-l3-ex2-write`.\n\n9. Create a second lambda function with the below sample code that will simply read a file and output its contents to a log. Call the lambda function `cand-c3-l3-ex2-lambda-read`.\n\n```python\nimport json\nimport boto3\nimport os\n\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n        response =  s3.get_object(\n            Bucket=os.environ['S3_BUCKET'], \n            Key=\"cand_c3_l3_test_object_encrypted.txt\", \n\n        )\n        print(response['Body'].read())\n        \n        return\n```\n\n\n\n10. It will need one environment variable:\n - `S3_BUCKET=` the name of the S3 bucket you created\n\n11. Assign the lambda function the role you created: `cand-c3-l3-ex2-read`\n\n12. Call the `cand-c3-l3-ex2-lambda-write` lambda function using the \"Test\" button.  Our application does not process the event payload, however you can pass in below test event:\n```json\n{\n  \"key1\": \"value1\"\n}\n```\n13. The log output should indicate that the file was created successfully.  You can verify this by going to the S3 bucket in the console and seeing the file present.  In the properties for the file, verify that it has server-side encryption using the key that we created.\n\n14. Call the second lambda function, `cand-c3-l3-ex2-lambda-read`, using the \"Test\" button.  Our application does not process the event payload, however you can pass in below test event:\n```json\n{\n  \"key1\": \"value1\"\n}\n```\n\n You should receive an error indicating that the function was denied access to read the file. This is because the KMS key policy did not allow the second role permissions to use the key.\n See example output below:\n```bash\nSTART RequestId: 2427ad7b-e5b2-4e59-b377-5d2a7a453218 Version: $LATEST\n[ERROR] ClientError: An error occurred (AccessDenied) when calling the GetObject operation: Access Denied\n...\n```\n\n\n15. Update the key policy so that the second role, `cand-c3-l3-ex2-read`, can also use the key.\n\n16. Try running the second lambda function for reading the file. If the key policy was correctly updated, you should receive log output indicating a successful read.\n\n```bash\nSTART RequestId: afdfe861-a07f-4fb8-8c03-6fd1d09caf1c Version: $LATEST\nb'file contents of my file'\nEND RequestId: afdfe861-a07f-4fb8-8c03-6fd1d09caf1c\nREPORT RequestId: afdfe861-a07f-4fb8-8c03-6fd1d09caf1c\tDuration: 382.80 ms\tBilled Duration: 400 ms\tMemory Size: 128 MB\tMax Memory Used: 74 MB\tInit Duration: 412.23 ms\n```",
              "instructor_notes": ""
            },
            {
              "id": 1012583,
              "key": "d3e595fd-850b-4a55-86c2-068342060e7a",
              "title": "Encryption Key Management Task List",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d3e595fd-850b-4a55-86c2-068342060e7a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "1. Log into Your AWS Account.",
                "2. Create the two IAM roles `cand-c3-l3-ex2-write` and `cand-c3-l3-ex2-read`.",
                "3. Create a new KMS key called `cand-c3-lk3-ex2-key` and allow the key admin to delete the key.",
                "4. Allow the first role, `cand-c3-l3-ex2-role1`, to use the key.",
                "5. Create a new S3 bucket to write files to.",
                "6. Create a new lambda function called `cand-c3-l3-ex2-lambda-write`.",
                "7. Setup the environment variables for the lambda function `cand-c3-l3-ex2-lambda-write`. Variables needed for `S3_BUCKET` and `KEY_ARN`.",
                "8. Set the lambda function permissions for  `cand-c3-l3-ex2-lambda-write` to use role `cand-c3-l3-ex2-write`.",
                "9. Create a new lambda function called `cand-c3-l3-ex2-lambda-read`.",
                "10. Create the environment variable: `S3_BUCKET`.",
                "11. Assign `cand-c3-l3-ex2-lambda-read` to use role `cand-c3-l3-ex2-read`.",
                "12. Call `cand-c3-l3-ex2-lambda-write`.",
                "13. Verify the file was created successfully.",
                "14. Call `cand-c3-l3-ex2-lambda-read` and expect a failed execution.",
                "15. Update the key policy so IAM role `cand-c3-l3-ex2-read` can also use the key.",
                "16. Run the `cand-c3-l3-ex2-lambda-read` function again and verify a successful execution."
              ],
              "positive_feedback": "Great job! You have successfully demonstrated how to use key policies to restrict or allow applications the ability to use encryption keys.",
              "video_feedback": null,
              "description": "Check off each item once you've completed it. Full instructions for each step are above."
            }
          ]
        },
        {
          "id": 1012643,
          "key": "62562878-2c1b-4365-b218-8642a2a770d1",
          "title": "Solution: Key Management",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62562878-2c1b-4365-b218-8642a2a770d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012595,
              "key": "67b2620a-cd96-45b4-85c8-355494eaba1f",
              "title": "Encryption Key Managment Exercise Solution Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Encryption Key Management\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1012627,
              "key": "e4abc36a-b684-410a-be19-75d9ec3aeec5",
              "title": "ND063 C3 L3 11 Encryption Key Managment Exercise Solution Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "S0-uD6iXP_U",
                "china_cdn_id": "S0-uD6iXP_U.mp4"
              }
            },
            {
              "id": 1012628,
              "key": "6827bd5a-3a92-4803-be94-ad67e255591b",
              "title": "Encryption Key Managment Exercise Solution Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this exercise, you gained a feel for creating, managing and using KMS keys to allow applications to encrypt data at rest in S3.\n\nI am confident that, after completing this exercise, you have a better understanding of how using KMS key policies can help us protect our data by restricting or allowing applications the ability to access  encrypted data.  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1018146,
          "key": "78d9ce17-aa1b-44f7-90f8-5f8c6149398c",
          "title": "Securing S3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78d9ce17-aa1b-44f7-90f8-5f8c6149398c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1018142,
              "key": "09cece52-8c1e-4f09-962d-a17e89869ee2",
              "title": "Securing S3 Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Securing S3",
              "instructor_notes": ""
            },
            {
              "id": 1018144,
              "key": "750c89c9-61fe-4344-985d-fbb29fb82f15",
              "title": "ND063 C3 L3 12 Securing S3-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Jwr4wq5-jRo",
                "china_cdn_id": "Jwr4wq5-jRo.mp4"
              }
            },
            {
              "id": 1018143,
              "key": "b1a1d42f-61bb-4d93-ad7e-798b67a22b13",
              "title": "Securing S3 Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Best Practices for Securing S3\n\nThe importance of ensuring that S3 buckets are configured securely can not be understated! The vast majority of cloud data breaches in the last few years were of private data being leaked from S3 buckets.\n\nSome best practices for Securing S3 include:\n- **Use Object Versioning**: This makes it difficult for infiltrators to corrupt or delete data.\n- **Block Public Access**: This lessens the attack surface.\n- **Use VPC Endpoints**: This allows you to block requests that do not originate from your VPC network.\n- **Create S3 Bucket Policies**: Use policies to restrict and control access.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012644,
          "key": "5decdf2b-9e66-4fc6-84c5-2ccfe3f71d59",
          "title": "Lesson Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5decdf2b-9e66-4fc6-84c5-2ccfe3f71d59",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012629,
              "key": "b61f8768-f1ef-44b5-aca6-e14c197385f5",
              "title": "Lesson Conclusion Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Conclusion",
              "instructor_notes": ""
            },
            {
              "id": 1012631,
              "key": "0cc64074-0be4-4fcc-bc78-b78593091947",
              "title": "ND063 C3 L3 13 Lesson Conclusion Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YTHLs40EflY",
                "china_cdn_id": "YTHLs40EflY.mp4"
              }
            },
            {
              "id": 1012634,
              "key": "6c411252-8f6e-4a89-8c57-45c3e3b659cb",
              "title": "Lesson Conclusion Text",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### What We've Learned\n- We highlighted methods to ensure data stored in cloud environments is protected from unauthorized access.\n- We walked through how an application may use encryption keys to ensure that data is encrypted when written to disk or cloud storage.\n- We took a closer look at the S3 service to understand common  encryption methods and capabilities.\n- We explored some of the options and capabilities for key management using the AWS key management service or KMS.\n- Finally, you were able to put some of the concepts into practice to demonstrate how encryption keys can be managed and segregated, and utilized between two different sample applications.",
              "instructor_notes": ""
            },
            {
              "id": 1012632,
              "key": "0d770fad-9f2b-4b3a-8f4b-c9954543be84",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Glossary\n#### AWS Encryption SDK\nEncryption libraries provided by AWS that an application can use to encrypt data prior to writing to storage. The SDK makes the process of using the AWS key management service seamless.\n\n#### Key Management Service (KMS)\nAWS service that allows provisioning, storage and management of master encryption keys. KMS also provides the ability to manage permissions pertaining to cryptographic actions on encryption keys.\n\n#### Client-Side Encryption\nWith client-side encryption, the application code will handle cryptographic operations on the data prior to persisting to a given storage medium.\n\n#### Server-Side Encryption\nWith server-side encryption, the storage service being used will handle cryptographic operations on the data while handling read and write operations. This process is transparent to the application which persists the data.\n\n#### Key Management Service (KMS)\nAWS service that allows provisioning, storage and management of master encryption keys. KMS also provides the ability to manage permissions pertaining to cryptographic actions on encryption keys.\n\n#### Customer Master Key (CMK)\nThe customer master key is the master encryption key that will be used to encrypt and store underlying data encryption keys in the KMS service. Other services or applications will select a CMK to use for their cryptographic operations.\n\n#### AWS-Managed CMK\nAWS-managed customer master keys are provisioned, rotated and managed by AWS.  AWS will provision a new master key for each AWS service in the AWS account at the time the service needs to start encrypting data.  These keys are not available to use by your applications for client-side encryption.\nYou may not change or assign permissions on these keys. \n\n#### Customer-Managed CMK\nCustomer-managed master keys are provisioned and managed by the customer (you).  Once you provision a key, you may use that key with any AWS services or applications.\n\nYou can manage permissions on customer managed CMKs to control which IAM users or roles can manage or use the encryption keys.  Permissions to use the keys can also be granted to AWS services and other AWS accounts.\n\n#### Default Encryption\nA configuration setting on an AWS resource, such as an S3 bucket, designating that the storage as a whole, or all objects written, will be encrypted by the service being used (e.g. S3).\n\n#### Key Rotation\nThe process of changing data encryption keys used for cryptographic operations on a periodic basis.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}