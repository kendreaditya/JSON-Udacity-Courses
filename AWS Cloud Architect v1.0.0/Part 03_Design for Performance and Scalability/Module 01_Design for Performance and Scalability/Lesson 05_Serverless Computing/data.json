{
  "data": {
    "lesson": {
      "id": 1010943,
      "key": "c07e3f2e-d6d1-4411-b651-244e95862e93",
      "title": "Serverless Computing",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Serverless computing is an architecture model where a cloud provider offers scalable, flexible, and low-cost backend services as needed.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/c07e3f2e-d6d1-4411-b651-244e95862e93/1010943/1586901700330/Serverless+Computing+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/c07e3f2e-d6d1-4411-b651-244e95862e93/1010943/1586901695715/Serverless+Computing+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1010920,
          "key": "68b157a4-341b-41e4-95b2-0fb0e9bb8bbc",
          "title": "Intro to Serverless",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68b157a4-341b-41e4-95b2-0fb0e9bb8bbc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010848,
              "key": "7d2db749-cf91-4017-b769-666bf718b25b",
              "title": "ND320 C2 L3 01 Serverless Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "knYbuNrg1vA",
                "china_cdn_id": "knYbuNrg1vA.mp4"
              }
            },
            {
              "id": 1010852,
              "key": "b8ee1f4d-a7bf-4dd6-aa22-0837e7b0fb3d",
              "title": "Lesson Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc483_cand-c3-serverless/cand-c3-serverless.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b8ee1f4d-a7bf-4dd6-aa22-0837e7b0fb3d",
              "caption": "",
              "alt": "Serverless",
              "width": 411,
              "height": 288,
              "instructor_notes": null
            },
            {
              "id": 1010855,
              "key": "1cf07120-d0b2-427f-83fe-b4571ca88d77",
              "title": "Serverless intro recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Serverless computing offers a platform for developers to run their applications as a series of functions as opposed to a deployable software package. \n\n- Serverless architecture works best for lightweight applications that have short running processes and experience bursts of activity with lulls in between.\n\n- Applications with long running and consistent workloads would run most efficiently on an optimized EC2 instance\n\nIn this lesson we'll talk about: \n- Cloud Migration \n- AWS Lambda Serverless Costs\n- API Gateway\n- Containers\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010938,
          "key": "d07521eb-311a-45d7-bc42-71ba187b690d",
          "title": "Cloud Migration",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d07521eb-311a-45d7-bc42-71ba187b690d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010926,
              "key": "93f3d68d-c1e7-4d58-a555-c1ffe98eda0b",
              "title": "Lift and Shift heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lift and Shift vs. Cloud Native\n",
              "instructor_notes": ""
            },
            {
              "id": 1010856,
              "key": "90f4b328-cbf7-4ca8-a554-e3fd2ff10cfd",
              "title": "ND320 C2 L3 02 Lift And Shift V Cloud Native",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rnZOJDzWZy8",
                "china_cdn_id": "rnZOJDzWZy8.mp4"
              }
            },
            {
              "id": 1010887,
              "key": "00dc909b-77a6-42f5-9f77-572fd7ff2262",
              "title": "Cloud Migration Strategy",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc4a9_cand-c3-l3-ls-vs-native/cand-c3-l3-ls-vs-native.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/00dc909b-77a6-42f5-9f77-572fd7ff2262",
              "caption": "Cloud Migration Options",
              "alt": "Lift and Shift vs Cloud native",
              "width": 848,
              "height": 463,
              "instructor_notes": null
            },
            {
              "id": 1010858,
              "key": "083c25e4-f6c7-4ed0-9d99-1b6888622a58",
              "title": "Cloud First Definitions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms   \n\n\n\n| Term | Definition |\n|-------------------|------|\n| Cloud Native | An app that has been engineered specifically to use cloud services and infrastructure |   \n| Event | Can be almost anything- a file being uploaded, an API request, a login, a database update, etc. Events trigger lambda functions  |  \n| Function | A piece of code running in AWS lambda that is triggered by an event  |  \n| Lift and Shift  |  The process of moving your application from an on-premises environment to the cloud without making any major changes to the code.|\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010859,
              "key": "57a36f2a-8106-49a2-a1c0-449f9ff44a29",
              "title": "Lift and Shift v Cloud Native recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Lift and Shift is the simple process of moving your application from an on-premises environment to the cloud without making any significant changes to the code. AWS Server migration can assist with this process\n\n- Lift and Shift migrations don’t have many options for performance improvements other than to allocate additional resources where bottlenecks are observed. This exposes the company to the potential for excessive compute costs.\n\n- Not all applications aren’t good candidates for cloud-native redesign, but a redesign can advantage of cloud services like optimized instances and AWS RDS to produce improved performance\n\n- The best candidates for cloud native redesign are lightweight applications whose functions can be driven by events like API calls, file uploads, database updates, and messages being added to a queue.",
              "instructor_notes": ""
            },
            {
              "id": 1010860,
              "key": "569093d1-8049-49dd-ae96-a614b5ac8213",
              "title": "Features of Cloud Native",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "569093d1-8049-49dd-ae96-a614b5ac8213",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select the Features of a Cloud Native application",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Manual Incident Intervention",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "OS Dependent",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Container-Based",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Designed for Cloud",
                    "is_correct": true
                  },
                  {
                    "id": "rbk5",
                    "text": "Weekly, Monthly and Quarterly releases",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010862,
              "key": "7688ad0f-3940-4b86-abf3-e65348220305",
              "title": "Think Like a Cloud Architect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7688ad0f-3940-4b86-abf3-e65348220305",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What obstacles can you expect when rearchitecting an application for the cloud?"
              },
              "answer": {
                "text": "The decision to re-architect an application is not made lightly. All of the stakeholders on the project need an advocate- including the application! Budget estimates, timelines, and testing protocols will often be pain points when you are rebuilding an application. Money is a major factor- for large and complex enterprise applications, developer time and qa testing can run into the millions of dollars. You can also expect timelines to slip. I’m sorry, but its true. No matter how far out you project your development schedule, timeline pressure will be an obstacle. You can always hope for the best, but I have never seen a software project ship on or before schedule, and I've been around quite a while. The third obstacle I would anticipate is a term called “scope creep” where your original plans for the redesign and development are waylaid by new and updated plans along the way. Plans that nobody budgeted for or calculated into the timeline. The scope of the project changes along with changes to the vendor service offering- if AWS starts offering a brand new service that can be used to make the application perform better for less money, why not add it to the scope? Well, one good reason not to change the scope is because you want to ship your software on time. AWS, as a tech company, will always release new and improved services. Its up to you as the architect to decide if you are going to stick with you plan and stay the course to completion, or allow the scope of the project to get away from you by adding new services and features that weren’t a part of the original plan and seemingly never get your application out the door. I would vote for locking down the scope, and turning a blind eye to the tempting upgrades, but when it comes to your projects, it will be up to you!",
                "video": null
              }
            },
            {
              "id": 1010866,
              "key": "fd2e4caa-4552-4a60-bff6-e2685f92e52a",
              "title": "Links to Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading \n\rLearn more about Serverless Architecture here:  \n- [Serverless Application Lens](https://d1.awsstatic.com/whitepapers/architecture/AWS-Serverless-Applications-Lens.pdf)  \n- [Servers LOL](https://servers.lol/)  \n- [Amazon Server Migration Service](https://aws.amazon.com/server-migration-service/)  \n- [What is Serverless Architecture? What are its Pros and Cons?](https://hackernoon.com/what-is-serverless-architecture-what-are-its-pros-and-cons-cc4b804022e9) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010937,
          "key": "cb4edc21-45da-4189-bde7-610828bf9ad1",
          "title": "Serverless with AWS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb4edc21-45da-4189-bde7-610828bf9ad1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010914,
              "key": "6e75462d-86e9-426d-8837-93252ef0dcb7",
              "title": "AWS Lambda heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## AWS Lambda",
              "instructor_notes": ""
            },
            {
              "id": 1010901,
              "key": "e2cfdd3f-b50a-43d7-b572-b1b66ba4b84b",
              "title": "ND320 C2 L3 03 Define Serverless",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1sk51jXd23U",
                "china_cdn_id": "1sk51jXd23U.mp4"
              }
            },
            {
              "id": 1010861,
              "key": "0a56b76f-a4ab-4f54-88b6-e1d346de10e9",
              "title": "Define Serverless image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc4e5_cand-c2-l2-lambda/cand-c2-l2-lambda.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0a56b76f-a4ab-4f54-88b6-e1d346de10e9",
              "caption": "How Serverless Works",
              "alt": "Diagram of AWS Lambda process",
              "width": 831,
              "height": 400,
              "instructor_notes": null
            },
            {
              "id": 1010864,
              "key": "8563a2f6-40a5-424e-b128-57e92323fdd3",
              "title": "Concept Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms \n\n\n| Term | Definition  |  \n|----------------- |  --------------------|\n| API Gateway | Fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale  |  \n| AWS Lambda | Run code for virtually any type of application or backend service without provisioning or managing servers  |  \n| AWS Step Functions | organizes AWS services into serverless workflows ,allowing rapid application development  | \n| Cognito | Integrates user sign-up, sign-in, and access control from social identity providers, such as Facebook, Google, and Amazon, and enterprise identity providers via SAML 2.0. to your web and mobile apps quickly and easily, scaling to millions of users  |  \n| DynamoDB | AWS managed Key-value and document NoSQL database that delivers single-digit millisecond performance on a serverless platform |\n| Event Source | The AWS service or internal/external event action that triggers the lambda function |\n| Lambda Function | AWS Lambda code containing associated configuration information, such as its name and description and the resources it requires to execute.  |  \n| SQS | AWS managed message queuing service that enables service decoupling, distributed systems, and serverless applications  |  \n",
              "instructor_notes": ""
            },
            {
              "id": 1010924,
              "key": "e38fc2bc-ebb8-4548-b388-3714a33ba3c4",
              "title": "What is Serverless Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- AWS Lambda (Lambda for short) is the name Amazon’s serverless computing service.\n\n- There are no provisioned servers -- pay only for compute time used\n\n- Lambda scales automatically because it runs your code as it is triggered, and each trigger spawns a new thread (function)\n\n- You are charged for every 100ms of compute time used and the number of times your code is triggered by an event.",
              "instructor_notes": ""
            },
            {
              "id": 1010903,
              "key": "ef84b091-9685-44a3-89cf-fbae8210ce8d",
              "title": "Serverless Features quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ef84b091-9685-44a3-89cf-fbae8210ce8d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the name of the code you run on AWS Lambda?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Lambda Gateway",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "DynamoDB Stream",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Lambda Function",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "DynamoDB Event",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010863,
              "key": "72f7e2c8-3c3a-49c0-90e8-04f0cc3bf3c9",
              "title": "Trigger Lambda",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "72f7e2c8-3c3a-49c0-90e8-04f0cc3bf3c9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which events can trigger a cloud function to execute?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A file upload",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "A message in the SQS queue",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "A database update",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "An API call",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010905,
              "key": "bd7e97af-780f-42f3-924b-7524c99d6ccc",
              "title": "Making the case heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Making the Case for Serverless",
              "instructor_notes": ""
            },
            {
              "id": 1010865,
              "key": "d1a3b081-2a77-4c1f-a390-cddf40b73956",
              "title": "ND063 C2 L3 04 Making The Case For Serverlss",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4KvSmjMuesw",
                "china_cdn_id": "4KvSmjMuesw.mp4"
              }
            },
            {
              "id": 1010867,
              "key": "01884e44-1a8b-41da-ba66-127eb664721c",
              "title": "Serverless Use case recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points \n\n- Applications that are idle most of the time can benefit from an evaluation to see if they are a good candidate for a serverless rebuild. Applications with intense, long-running functions probably won't benefit from the cost savings because costs are calculated by resources allocated and execution time.\n\n- The server layer is abstracted and inaccessible, so you don’t have to worry about server maintenance like patching and monitoring; on the other hand, you are giving up control of server resources, so you don’t have access to the server OS or network because there is no server to manage.\n\n- Some big companies with lots of technical staff expertise are running serverless applications in production and reaping the cost and performance benefits\n\n- Serverless computing options have only been commercially available for about 5 years, so as the technology matures, we will see more and more companies looking to serverless compute for reduced cost and improved performance.",
              "instructor_notes": ""
            },
            {
              "id": 1010868,
              "key": "ca232abe-8065-4607-8724-ecc351005115",
              "title": "Benefits of Serverless over classic quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ca232abe-8065-4607-8724-ecc351005115",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are two ways Serverless Architecture outperforms a traditional server model",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "No server patching",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Access via IP address",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Long running functions",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "No wasted server compute",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010902,
              "key": "1ea0e2d2-a16d-4505-917d-4e9dcf54cc84",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nLearn more about how to use AWS Lambda here:  \n- [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg//welcome.html)  \n- [AWS Lambda](https://aws.amazon.com/lambda/)  \n- [AWS API Gareway](https://aws.amazon.com/api-gateway/)  \n- [AWS DynamoDB](https://aws.amazon.com/dynamodb/)  \n- [AWS SQS](https://aws.amazon.com/sqs/)  \n- [AWS Cognito](https://aws.amazon.com/cognito/)  \n- [Step FUnctions](https://aws.amazon.com/step-functions/)  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010923,
          "key": "314fcd74-caee-42fc-bd48-369587c78160",
          "title": "Serverless Costs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "314fcd74-caee-42fc-bd48-369587c78160",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010869,
              "key": "13445890-08b7-44eb-87c3-8a4e898ee935",
              "title": "Serverless Costs heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Serverless Costs  ",
              "instructor_notes": ""
            },
            {
              "id": 1010870,
              "key": "cceb155d-c0c6-4466-8438-d6177f67ee7e",
              "title": "ND320 C2 L3 05 Comparing Costs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LdMybkwf82U",
                "china_cdn_id": "LdMybkwf82U.mp4"
              }
            },
            {
              "id": 1010871,
              "key": "4c274c37-38ff-4791-996f-c5660b71014c",
              "title": "serverless comparison",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc858_cand-c2-l3-compare/cand-c2-l3-compare.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4c274c37-38ff-4791-996f-c5660b71014c",
              "caption": "Source: [Dashbird.io Calculator](https://dashbird.io/lambda-cost-calculator/)",
              "alt": "Lambda costs less than EC2",
              "width": 906,
              "height": 398,
              "instructor_notes": null
            },
            {
              "id": 1010876,
              "key": "acf6e083-ff33-4ead-961d-043a525c0032",
              "title": "Concept Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms   \n\n\n| Term \t| Definition \t|\n|-------------\t|------------\t|\n| Cold Start \t|  The delayed response that occurs when a new labda instance receives its first request \t|\n| Dashbird.io \t|  A 3rd party serverless observability platform built to manage serverless application\t|\n| FaaS \t|  Category of serverless cloud computing via serverless architectures\t|\n| GB/sec \t|  Measure of compute time used to calculate costs in AWS lambda\t|\n| Iaas \t|  Online platforms that provide computing services over the internet\t|\n| Keep Warm \t|  A periodic ping or function call to lambdas to keep them on in order to avoid the delay of cold starts\t|",
              "instructor_notes": ""
            },
            {
              "id": 1010873,
              "key": "2e92f389-d532-4cb1-8a8d-82c107cff751",
              "title": "Costs Lesson Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points   \n\n- Lambda requests are billed based on \n  - number of requests/function invocations \n  - duration of compute time and allocated memory  \n- Duration is billed per 100ms\n- Lambda works better for small scale apps\n- EC2 works better for long-running functions  \n- Lambda functions are stateless and run in short-lived containers\n- There is a \"cold-start\" delay after a period of inactivity but that can be avoided by using a keep warm service  \n- Serverless can also bring cost savings because fewer people are needed for operations support   \r\n\n### When to Use Lambda\n- AWS Lambda is optimal for applications with irregular usage patterns and lulls between spikes in activity\n\n- AWS Lambda is not a good choice for applications with regular, consistent, or steady workloads and long running functions. It might end up being more costly than EC2 instances.\n\n- Consider the considerable cost of re-architecting an application when deciding if AWS Lambda is a good choice. It might be!\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010877,
              "key": "735ce9b8-47cb-4d0c-9cfd-000d799ef805",
              "title": "Serverless Costs Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "735ce9b8-47cb-4d0c-9cfd-000d799ef805",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select the answer below that represents a cost drawback of AWS Lambda",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Autoscaling",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Cold Starts",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Ephemeral Functions",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Control shifted back to Developers",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010851,
              "key": "fc68f679-fa60-4605-bdd2-4edf851f0d74",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nPlease continue learning about how serverless compute is priced and how it fits into the cloud cost conversation by following the links below\n\n- [AWS Lambda Pricing](https://aws.amazon.com/lambda/pricing/)  \n- [AWS Lambda Pricing Model Explained with Examples](https://dashbird.io/blog/aws-lambda-pricing-model-explained/)  \n- [Serverless Pricing and Costs](https://medium.com/@zackbloom/serverless-pricing-and-costs-aws-lambda-and-lambda-edge-169bfb58db75)  \n- [How to Lower Your AWS Lambda Costs](https://www.nuweba.com/blog-How-to-Lower-AWS-Lambda-Costs)  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010921,
          "key": "8383e23b-508a-4837-b585-96be92eac3be",
          "title": "Exercise: Serverless Costs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8383e23b-508a-4837-b585-96be92eac3be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010909,
              "key": "94a08900-e6ab-460b-abe5-18c998b7c105",
              "title": "Create a Lambda Function",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lambda vs Server Costs\n\nIn this exercise we will be estimating the cost difference between using AWS Lambda and AWS EC2 instances.\n\n### Lambda costs  \n\n- Use the [Lambda Pricing Calculator](https://s3.amazonaws.com/lambda-tools/pricing-calculator.html)  and do NOT include the Free Tier\n\n- Assume:\n  - 20 million functions calls per month\n  - 512 MB of Memory\n  - Execution time of 50ms\n\n###  EC2 Costs\n\n- Find pricing for on-demand instances at   [AWS On-Demand Instance Pricing](https://aws.amazon.com/ec2/pricing/on-demand/)   \n\n-  Find pricing for 1 year reserved instances at [Reserved Instance Pricing](https://aws.amazon.com/ec2/pricing/reserved-instances/pricing/)  \n\n- Assume:\n  - 1 M5.large EC2 instance  \n  -  Runs for one month \n",
              "instructor_notes": ""
            },
            {
              "id": 1010906,
              "key": "d9ecd024-7182-4c2e-b050-2e49c255ba1c",
              "title": "Compare Lambda vs Server Costs",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d9ecd024-7182-4c2e-b050-2e49c255ba1c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Calculate the estimated costs to run the application using AWS Lambda",
                "Calculate the costs to run the application using an on-demand EC2 instance",
                "Calculate the costs to run the application using a reserved EC2 instance",
                "Compare the estimated costs for Lambda, EC2 On Demand and EC2 Reserved instances.  Which is the least expensive?"
              ],
              "positive_feedback": "Thank you for completing the exercise.  You can see my solution in the next video.",
              "video_feedback": null,
              "description": "Compare the cost of running an application using AWS Lambda vs EC2."
            }
          ]
        },
        {
          "id": 1010922,
          "key": "da28bc81-c637-4602-84e0-1cc275adecf4",
          "title": "Solution: Serverless Costs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "da28bc81-c637-4602-84e0-1cc275adecf4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010962,
              "key": "d98b1a22-cb4a-4987-91bd-09b9813bab0c",
              "title": "Serverless. Costs solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How I Calculated Serverless and EC2 Costs",
              "instructor_notes": ""
            },
            {
              "id": 1010875,
              "key": "ccd6b7ab-c4c6-4a83-ab30-85f6f5e307e6",
              "title": "CAND C2 L3 05.1 Serverless Costs Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-9DPFGa4BCM",
                "china_cdn_id": "-9DPFGa4BCM.mp4"
              }
            },
            {
              "id": 1010874,
              "key": "ec294015-678a-4851-a8e0-c44c602ef7a0",
              "title": "Lambda function v EC2 Costs recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### My Results*  \n\nLambda Costs: **$12.34** per month  \nOn-demand EC2 Costs: $.096/hour x 24 hours/day  x 30 days per month = **$69.12** per month  \nReserved EC2 Costs: **$51.83** per month with no upfront payment\n\n**Your costs may be different because Amazon pricing changes frequently.*\n  \n",
              "instructor_notes": ""
            },
            {
              "id": 1010880,
              "key": "cfd1d342-da2a-446e-a485-ccccc89bce56",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nLearn more about the Lambda costs and how they compare to EC2 instance costs by following the links below\n\n- [AWS Lambda Pricing Calculator](https://s3.amazonaws.com/lambda-tools/pricing-calculator.html)  \n- [Should your EC2 be a Lambda?](https://servers.lol/)  \n- [AWS Lambda vs EC2](https://lumigo.io/blog/aws-lambda-vs-ec2/)  \n- [AwS EC2 vs Lambda- Which One is Right For You?](https://vianalabs.com/detailed-comparison-of-amazon-web-services-computing-resources-amazon-ec2-vs-aws-lambda/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010940,
          "key": "188e4db2-16c7-411d-a4f5-939a915955cc",
          "title": "Lambda",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "188e4db2-16c7-411d-a4f5-939a915955cc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010928,
              "key": "2e5b2810-ed57-4389-9d04-e781ee67864d",
              "title": "Lambda Events and Function",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lambda Events and Functions  ",
              "instructor_notes": ""
            },
            {
              "id": 1010878,
              "key": "3b9efbf3-4633-455b-baba-963f77ad59cb",
              "title": "ND063 C2 L3 06 Lambda Events And Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "seNVPx5jzEo",
                "china_cdn_id": "seNVPx5jzEo.mp4"
              }
            },
            {
              "id": 1010899,
              "key": "094fbe55-8e86-41c9-afe1-e5509e70c137",
              "title": "Concept Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms  \n\n\n| Term | Definition  |  \n|--------------- |  --------|\n| Microservices | An approach to writing software where apps are broken down into their smallest components, independent from each other. |\n| Runtime | Relates to what coding language the function is developed in  |  \n| Triggers | Actions caused by specific events that will further trigger the lambda function |\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010879,
              "key": "69027676-8150-4904-819a-21a8c639ab63",
              "title": "Lambda Functions Lesson Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points About Lambda Events and Functions\n\n- Invoking Lambda functions means triggering them, or kicking them off.\n\n- AWS automatically provisions CPU and network resources based on the amount of memory you select to run your functions\n\n- Lambda functions can be written in a variety of coding languages: Node.js, Python, Go, Java, C# and more\n\n- The serverless code you write and configure for one cloud platform can only be used on that platform so using AWS Lambda to run your applications ties you to AWS\n\n\n### Key Points about Lambda@Edge\n\n- Lambda@Edge allows you to execute lambda functions in edge locations that are geographically closer to the user.\n\n- Running code closer to users improves user satisfaction\n\n- An example of a function that can be executed in an edge location is rewriting the response URL based on device type- serving a mobile user a mobile optimized page",
              "instructor_notes": ""
            },
            {
              "id": 1010881,
              "key": "05b7e530-3f00-42b6-9f87-6e26006f1c71",
              "title": "Lambda Demo heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating a Lambda Function",
              "instructor_notes": ""
            },
            {
              "id": 1010882,
              "key": "a8ab2a99-0190-4292-8c77-b0963e78bcdb",
              "title": "Lambda Function Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uHhko5CjGb4",
                "china_cdn_id": "uHhko5CjGb4.mp4"
              }
            },
            {
              "id": 1010931,
              "key": "9ed26ee3-d03c-4657-97ba-c2c6e1cc086c",
              "title": "Lambda demo recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "###  How to Create a Lambda Function\n\n1. Login to the AWS Console\n2. Browse to the IAM service and create and name a role with the \n[AWSLambdaSQSQueueExecutionRole](https://console.aws.amazon.com/iam/home?region=us-east-1#/policies/arn%3Aaws%3Aiam%3A%3Aaws%3Apolicy%2Fservice-role%2FAWSLambdaSQSQueueExecutionRole)  policy\n3. Browse to the AWS Lambda Service management console\n4. Select **Create Lambda**, then select **Author From Scratch**\n5. Name your Lambda function and select the Python 3.8 runtime\n6. Select the IAM role that was created in step 2 and create the function.\n7. Browse to the AWS Simple Queue Service Management console\n8. Create and name an SQS queue, configure trigger for Lambda function\n9. Return to the Lambda management page and configure an SQS trigger with the SQS queue created in step 7. \n10. Edit the Python code for the Lambda function to print a message when it is triggered\n11. On the SQS management page, add a message to the queue\n12. Browse to the CloudWatch management page, and view the logs. Locate the log entry for the Lambda function and observe the result.  \n\nCongratulations!  You have created and triggered a Lambda function!\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010883,
              "key": "d14c051f-c928-4dcb-8e3b-5f83fe978fc2",
              "title": "What is serverless with AWS?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d14c051f-c928-4dcb-8e3b-5f83fe978fc2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which  AWS Services other than AWS Lambda are actually running serverlessly themselves? If you need a hint, check out  [Serverless on AWS](https://aws.amazon.com/serverless/)  ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "S3",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "SQS",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "EFS",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "API Gateway",
                    "is_correct": true
                  },
                  {
                    "id": "rbk5",
                    "text": "DynamoDB",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010886,
              "key": "78135c41-a1bb-4635-9591-5cd55924f1d8",
              "title": "Serverless with AWS quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "78135c41-a1bb-4635-9591-5cd55924f1d8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which features below are TRUE of AWS Lambda?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Can be written in Go",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Runs in containers",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Cloud Agnostic",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Can be invoked by other AWS services",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010849,
              "key": "dce2e5d2-d47a-41c1-850f-fd0af4448850",
              "title": "Serverless",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dce2e5d2-d47a-41c1-850f-fd0af4448850",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are three benefits from using Lambda@Edge?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Reduced Latency",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Scalability",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Cloud Agnostic",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Serverless",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010925,
              "key": "a00d812c-7357-4a52-8486-e1b8c4c37af6",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nRead more about how to use Lambda functions  \r\n- [Invoking Lambda Functions](https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html)  \n- [AWS KInesis](https://aws.amazon.com/kinesis/)  \n- [Going Serverless with AWS Lambda](https://www.business2community.com/cloud-computing/going-serverless-with-aws-lambda-02242678) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010919,
          "key": "70cc80d5-a798-448c-ba50-45e859354ba2",
          "title": "Exercise: Lambda Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "70cc80d5-a798-448c-ba50-45e859354ba2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010888,
              "key": "a0454aec-7d9e-4c57-b57f-fba4d89525c4",
              "title": "Lambda Function Setup",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this exercise we will be creating an AWS Lambda function that is triggered by a file being uploaded to an S3 bucket",
              "instructor_notes": ""
            },
            {
              "id": 1010889,
              "key": "e56e0fd0-a581-44cc-a780-b70f9c22b943",
              "title": "Set Up a Lambda Function",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e56e0fd0-a581-44cc-a780-b70f9c22b943",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a new S3 bucket",
                "Create a new Lambda Python 3.8 function",
                "Add a new role using basic Lambda permissions",
                "Configure an S3 trigger with the S3 bucket",
                "Modify the Lambda function to print a message when it is triggered",
                "Trigger the Lambda function and observe the result in the AWS CloudWatch logs"
              ],
              "positive_feedback": "Thanks for completing the exercise!  You can see my solution in the next exercise",
              "video_feedback": null,
              "description": "Please follow the steps below to "
            }
          ]
        },
        {
          "id": 1010939,
          "key": "ab40dd93-4326-42b0-b884-7a1c040daf02",
          "title": "Solution: Lambda Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab40dd93-4326-42b0-b884-7a1c040daf02",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010963,
              "key": "2389e4d1-42c0-4977-9392-6ab6402055c1",
              "title": "Lambda Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How I Created a Lambda Function",
              "instructor_notes": ""
            },
            {
              "id": 1010885,
              "key": "b4d5be99-3804-4247-b28f-866e951f6659",
              "title": "CAND C2 L3 06.1 Lamda Function Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cW9RFZhaVW0",
                "china_cdn_id": "cW9RFZhaVW0.mp4"
              }
            },
            {
              "id": 1010932,
              "key": "644cc71f-9dbd-4f71-8976-e39ca4f9e345",
              "title": "Exercise 2 Solution Explanation",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### My Solution\n\nTo complete this exercise, I followed the steps listed below.\n\n* I created a Python 3.8 Lambda Function named `S3_File_Upload_Function`\n* I configured an S3 trigger and specified `leslie-cloudlab-bucket` as my file upload location\n* I modified my Lambda function to print \"S3 File Uploaded. Hooray\" when it was triggered\n* I triggered the Lambda function by uploading a file to my S3 bucket\n* I observed the log data for the successful function execution in AWS CloudWatch\n",
              "instructor_notes": ""
            },
            {
              "id": 1010857,
              "key": "2639062f-7e18-4272-8693-00c83ff837d3",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nPlease follow the links below to learn more about creating AWS Lambda functions.\n\n- [Build a Serverless Web application](https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/module-3/)  \n- [Create a Lambda Function with the Console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html)  \n- [How to Write Your First AWS Lambda Function](https://blog.runscope.com/posts/how-to-write-your-first-aws-lambda-function)  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010942,
          "key": "70e48916-b752-4348-987f-97cef8878b45",
          "title": "API Gateway & DynamoDB",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "70e48916-b752-4348-987f-97cef8878b45",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010872,
              "key": "4bd4ed3c-10c9-4f0c-a9aa-2d6221f1f220",
              "title": "API Gateway & DynamoDB Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## API Gateway and Lambda  ",
              "instructor_notes": ""
            },
            {
              "id": 1010884,
              "key": "4cb23659-50b6-4389-a9fd-b5415f4649f4",
              "title": "ND063 C2 L3 07 API Gateway And DynamoDB",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IZG_tG89_8Q",
                "china_cdn_id": "IZG_tG89_8Q.mp4"
              }
            },
            {
              "id": 1010892,
              "key": "f6c4abbe-4211-4124-b6ed-963300f067ed",
              "title": "Concept Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms\n\n\n\n| Term | Definition  |  \n|------------------- |  ------ |  \n| API | A software intermediary that allows two applications to communicate with each other  |  \n| JSON (JavaScript Object Notation) | A lightweight data-interchange format that is both human-readable and easy for machines to parse and generate  |  \n| XML (Extensible Markup  Language) | A markup language that defines a set of rules for encoding documents in a format that can be easily read by humans and machines  | ",
              "instructor_notes": ""
            },
            {
              "id": 1010929,
              "key": "6e437e65-e2a5-402e-8f32-1a1e35191e51",
              "title": "Gateway Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points About API Gateway  \n\n- An API is an interface to your application that exposes parts of your application or data for integration or sharing with another application.\n\n- AWS API Gateway is a managed service that removes the administrative work from the job of publishing APIs by publishing, maintaining, managing, and securing APIs.\n\n- API Gateway integrates with AWS Lambda, AWS SNS, AWS IAM, and Cognito Identity Pools, allowing for fully managed authentication and authorization \n\n- API Gateway works with lambda by sitting in between the user’s API request and the Lambda running compute functions on the back end. \n\n\n### Key Points About DynamoDB  \n\n- DynamoDB is a fast, high-performing NoSQL database that scales elastically \n\n- DynamoDB tables have a primary key, but the are not relational, making them an excellent option for varied, unstructured data\n\n- DynamoDB is tightly integrated with the AWS Serverless ecosystem and is hosted on a series of distributed managed servers, which increases database availability and performance, and facilitates automatic scaling   \n\n- Lambda functions can be triggered by an update to a DynamoDB table via the activity logs \n\n- DynamoDB works well for applications that use self-contained data objects, but is usually too pricey for applications with high traffic of large objects\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010904,
              "key": "5d3f31de-e558-4fa2-8586-61414dc2681c",
              "title": "API and DynamoDB Demo heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating a DynamDB Table",
              "instructor_notes": ""
            },
            {
              "id": 1010890,
              "key": "e205bb1c-d1a6-4422-9785-5c927188d087",
              "title": "Create DynamoDB Table",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q2VVN_3u4jY",
                "china_cdn_id": "Q2VVN_3u4jY.mp4"
              }
            },
            {
              "id": 1010854,
              "key": "a402e13d-6ad6-4048-af48-1bb99c915769",
              "title": "API DynamoDB Demo recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- The DynamoDB partition key is considered the primary key, and it is used to spread data across partitions to facilitate scalability\n- DynamoDB read and write capacity can be allocated upfront to keep costs predictable, or DynamoDB autoscaling can modify read/write capacity based on requests, which can result in unpredictable costs.\n",
              "instructor_notes": ""
            },
            {
              "id": 1013390,
              "key": "b2acd422-ee01-487d-a3bf-4d672c9e08ba",
              "title": "Add data heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Adding Data to a DynamoDB Table",
              "instructor_notes": ""
            },
            {
              "id": 1013391,
              "key": "8f846e3e-b35e-4473-b7b5-14d3a29a31c0",
              "title": "Add Data To DynamoDB Table",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "12qayb8-tIw",
                "china_cdn_id": "12qayb8-tIw.mp4"
              }
            },
            {
              "id": 1013389,
              "key": "33c23af2-0b4b-4934-80de-1897f40ca39d",
              "title": "Adding data recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- Adding data to the table manually is as simple as selecting ‘Create Item’\n- Items and Tables can easily be modified and deleted in the DynamoDB console, and should be maintained to remove unused tables to reduce costs",
              "instructor_notes": ""
            },
            {
              "id": 1010891,
              "key": "bd29ae65-3fba-4081-ab46-fc2cc897e889",
              "title": "Gateway Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bd29ae65-3fba-4081-ab46-fc2cc897e889",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which API management services does API Gateway provide?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Create",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Version",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Publish",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Clean",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "Maintain",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010853,
              "key": "669a46af-8798-41b9-8c5a-8a1aea51d620",
              "title": "API Gateway calls",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "669a46af-8798-41b9-8c5a-8a1aea51d620",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which format is used for many modern API integrations",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "JOBS",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "JERN",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "JAVA",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "JSON",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010850,
              "key": "0d2eabbb-0426-4ed7-8341-f3073985f489",
              "title": "DynamoDB quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0d2eabbb-0426-4ed7-8341-f3073985f489",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which feature below is NOT TRUE of AWS DynamoDB",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It can easily be exported to another cloud platform",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "It is a relational database",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "It is fast, distributed, and scalable",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "It can be installed on an EC2 instance",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010936,
              "key": "fffd37fd-22c5-46cd-8ee8-d39f08c62c63",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading   \n\nPlease follow the links below to read more about AWS API Gateway\n\n- [Amazon API Gateway](https://aws.amazon.com/api-gateway/)  \n- [Using AWS Lambda with API Gateway](https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html)  \n- [Amazon API Gateway- The Ultimate Guide](https://serverless.com/amazon-api-gateway/)  \n- [How to Build Your First Serverless API with with AWS Lambda and API Gateway](https://medium.com/better-programming/how-to-build-your-first-serverless-api-with-aws-lambda-and-api-gateway-c7149c2e8d23) \n\nAnd AWS DynamoDB \n\n- [Amazon DynamoDB](https://aws.amazon.com/dynamodb/)  \n- [Whats is DynamoDB?](https://medium.com/swlh/what-is-dynamodb-fbb3f6d14f18)  \n- [Create and Query a DynamoDB Table](https://aws.amazon.com/getting-started/hands-on/create-nosql-table/)  \n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010927,
          "key": "04d69f33-37cb-4547-ab74-e7943a801d64",
          "title": "Exercise: DynamoDB",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "04d69f33-37cb-4547-ab74-e7943a801d64",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010894,
              "key": "0fdcd3b1-0035-40aa-944d-9acf6f4ac098",
              "title": "DynamoDB Table",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create a DynamoDB Table\n\nLet's practice our AWS skills by creating a DynamoDB table.\n\n#### AWS Resource Warning!  \n\rThis exercise will use resources that are **outside of the AWS Free Tier**.  Do not forget to destroy the DynamoDB table when you have completed the exercise.",
              "instructor_notes": ""
            },
            {
              "id": 1010912,
              "key": "8deea199-3c3c-48a0-8198-55b752ff33ac",
              "title": "DynamoDB Table Task List",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8deea199-3c3c-48a0-8198-55b752ff33ac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a DynamoDB table with a Partition(Primary) key",
                "Use the calculator to determine the read/write capacity to meet your needs",
                "Create a NoSQL table and add several rows of data that is relevant to you and your interests",
                "Query your table to find data using the built-in search tools",
                "Delete your DynamoDB table when you are finished"
              ],
              "positive_feedback": "Thanks for completing the exercise!",
              "video_feedback": null,
              "description": "Please follow the steps below to create an AWS DynamoDB table"
            }
          ]
        },
        {
          "id": 1010934,
          "key": "ae1b9f34-4113-4abc-b295-6495205d670a",
          "title": "Solution: DynamoDB",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae1b9f34-4113-4abc-b295-6495205d670a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010911,
              "key": "dcc1f5cc-078a-4f03-8c9d-895ec3243967",
              "title": "DynamoDB Table exercise solution heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My DynamoDB Table",
              "instructor_notes": ""
            },
            {
              "id": 1010896,
              "key": "3107e9d7-7c1c-4d4b-b5ec-865a37f9b3bc",
              "title": "DynamoDB Exercise Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2ZfhdLa4pSQ",
                "china_cdn_id": "2ZfhdLa4pSQ.mp4"
              }
            },
            {
              "id": 1010908,
              "key": "5ec76756-56f4-471d-b5e8-086a3e48a87d",
              "title": "DynamoDB Table exercise solution recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### My Solution\n\nFor this exercise, I created a table with names and information about the neighbors I interact with when I am walking around the neighborhood. I capture some fun and practical data points about each neighbor, but, as you see, not every neighbor has relevant \n\nHere are the steps I took to create my table and add items\n\n* I created a DynamoDB table named `udacity_neighborhood` with `neighbor` as the partition key\n* I added neighbors using **Create item** and string values such as `animal`, `car`, `grocery`, and `garden` for each neighbor\n* I modified my `udacity_neighborhood` table in the table view using the pencil edit icon \n* I used the search feature to search `c` and found `cooper` and `C` and found `Charlie`, demonstrating that search in DynamoDB is case sensitive\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010941,
          "key": "3d033dd8-e2f8-4f6d-9a05-e1e6fc819004",
          "title": "Containers in AWS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d033dd8-e2f8-4f6d-9a05-e1e6fc819004",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010893,
              "key": "fa11f7a5-a209-42eb-b022-b269585c44ba",
              "title": "AWS ECS and EKS",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## AWS ECS and EKS",
              "instructor_notes": ""
            },
            {
              "id": 1010895,
              "key": "bdae24f0-7776-47a1-b68f-3e317ccf7d0e",
              "title": "ND320 C2 L3 08 AWS Container Managemtn-Fargate",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b5AYCjYbrN4",
                "china_cdn_id": "b5AYCjYbrN4.mp4"
              }
            },
            {
              "id": 1010935,
              "key": "b50ab6de-0117-482c-bd01-4d1ed6a798eb",
              "title": "container",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc975_cand-c2-l3-container/cand-c2-l3-container.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b50ab6de-0117-482c-bd01-4d1ed6a798eb",
              "caption": "Containers Allow You to Build, Test and Deploy Applications Quickly",
              "alt": "Container",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 1010898,
              "key": "f826f664-0f7d-419c-873b-ff0f90fe0121",
              "title": "ECS and EKS Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms  <br>\n\n| Term \t| Definition \t|\n|-----------------|------------\t|\n| Amazon Elastic Container Registry (ECR) \t| Registry that simplifies the storage and management of container images. \t|\n| Amazon Elastic Container Service (ECS) \t| Service that simplifies the storage and management of container images. \t|\n| AWS Fargate \t| Serverless compute engine for ECS and EKS \t|\n| Elastic Kubernetes Service (EKS) \t| Managed service for containerized applications using Kubernetes \t|\n",
              "instructor_notes": ""
            },
            {
              "id": 1010897,
              "key": "4dccc0b6-2b3b-4e3a-b58f-c00f1249745f",
              "title": "ECS and EKS Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\nMost companies are looking at how they can leverage container technology to accelerate software development, improve operational stability, and save time and money.\n\nA container includes an application, its configuration, runtime, libraries, tools, and its dependencies. \n\nContainers are portable and because of how their resources are packaged, their performance is consistent across platforms. \n\nAmazon offers three categories of container management tools:\nAWS Elastic Container Registry\nAWS Elastic Container Service\nAWS Elastic Kubernetes Service\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010915,
              "key": "a3dcd9d1-f997-48b3-9225-74e09863369b",
              "title": "Benefits of Containers",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a3dcd9d1-f997-48b3-9225-74e09863369b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which features listed below are benefits of containers?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Rapid Deployment",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Portability",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Optimized for Databases",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Consistent Performance",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010910,
              "key": "3dcec430-6278-4f2e-bd10-9a0bed067bbc",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading\n\nTo learn more about running containers on AWS, including how to manage and scale them securely, please follow the links below.\n\n- [Amazon Elastic Container Service](https://aws.amazon.com/ecs/)  \n- [Containers on AWS](https://aws.amazon.com/containers/)  \n- [Amazon EKS](https://aws.amazon.com/eks/)  \n- [What is Docker? | AWS](https://aws.amazon.com/docker/)  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010933,
          "key": "f006a1ad-4b8b-43a6-b199-fe6864ad3e4b",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f006a1ad-4b8b-43a6-b199-fe6864ad3e4b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010918,
              "key": "0ce0ffa6-6813-423f-9c21-781a8915b889",
              "title": "Serverless Lesson Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Serverless Recap",
              "instructor_notes": ""
            },
            {
              "id": 1010907,
              "key": "ade529ab-8caf-4172-b978-9ef4f44e43bb",
              "title": "ND320 C2 L3 09 Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rZ1GPRIqfSI",
                "china_cdn_id": "rZ1GPRIqfSI.mp4"
              }
            },
            {
              "id": 1010913,
              "key": "181f551e-b7ff-488a-814b-0c2836e4f59e",
              "title": "Lesson Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cc9a6_cand-c2-l3-what-learned/cand-c2-l3-what-learned.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/181f551e-b7ff-488a-814b-0c2836e4f59e",
              "caption": "",
              "alt": "What We've Covered",
              "width": 679,
              "height": 331,
              "instructor_notes": null
            },
            {
              "id": 1010917,
              "key": "32f4817b-2c5b-4aa4-8dc9-ab74990e41cd",
              "title": "Lesson recap recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Serverless allows you to build and run applications without the burden of thinking about servers\n\n- Serverless in AWS means built-in fault tolerance, maintenance, monitoring, and security,\n\n- Serverless allows the enterprise to reclaim the time and money that would be spent on operational tasks, and reduces the number of infrastructure engineers necessary to maintain the production environment\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010916,
              "key": "fa87c8da-c93e-4f2e-abc7-6221af40a075",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading    \n\nIf you would like to learn more about Serverless compute on AWS, and how its serverless servers integrate to provide customers with unlimited innovation potential, please follow the links below:\n\n\n- [Serverless](https://aws.amazon.com/serverless/)  \n- [AWS Well-Architected Tool](https://aws.amazon.com/well-architected-tool/)  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010930,
          "key": "92aeede4-8d61-4ce0-a31b-fb04f65bc464",
          "title": "Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92aeede4-8d61-4ce0-a31b-fb04f65bc464",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010900,
              "key": "6e8a2c38-cd4f-4001-9b15-9bc47e3be5f7",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## New Terms in This Lesson\n<br>\n<br>  \n\n| Term \t| Definition \t|\n|-----------------------------------------\t|---------------------------------------------------\t|\n| Amazon Elastic Container Registry (ECR) \t| Registry that simplifies the storage and management of container images. \t|\n| Amazon Elastic Container Service (ECS) \t| Service that simplifies the storage and management of container images. \t|\n| API \t| A software intermediary that allows two applications to talk to each other \t|\n| API Gateway \t| Fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale \t|\n| API Gateway Event \t| One way to trigger Lambda. When someone or something is calling the gateway, it will trigger Lambda \t|\n| AWS Fargate \t| Serverless compute engine for ECS and EKS \t|\n| AWS Lambda \t| Run code for virtually any type of application or backend service without provisioning or managing servers \t|\n| AWS Step Functions \t| organizes AWS services into serverless workflows ,allowing rapid application development \t|\n| Cloud Native \t| An app that has been engineered specifically to use cloud services and infrastructure \t|\n| Cognito \t| Integrates user sign-up, sign-in, and access control from social identity providers, such as Facebook, Google, and Amazon, and enterprise identity providers via SAML 2.0. to your web and mobile apps quickly and easily, scaling to millions of users \t|\n| Cold Start \t| The delayed response that occurs when a new labda instance receives its first request \t|\n| Dashbird.io \t| A 3rd party serverless observability platform built to manage serverless application \t|\n| DynamoDB \t| AWS managed Key-value and document NoSQL database that delivers single-digit millisecond performance on a serverless platform \t|\n| Elastic Kubernetes Service (EKS) \t| Managed service for containerized applications using Kubernetes \t|\n| Event \t| Can be almost anything- a file being uploaded, an API request, a login, a database update, etc. Events trigger lambda functions \t|\n| Event Source \t| The AWS service or internal/external event action that triggers the lambda function \t|\n| FaaS \t| Category of serverless cloud computing via serverless architectures \t|\n| Function \t| A piece of code running in AWS lambda that is triggered by an event \t|\n| GB/sec \t| Measure of compute time used to calculate costs in AWS lambda \t|\n| Iaas \t| Online platforms that provide computing services over the internet \t|\n| JSON (JavaScript Object Notation) | A lightweight data-interchange format that is both human-readable and easy for machines to parse and generate \t|\n| Keep Warm \t| A periodic ping or function call to lambdas to keep them on in order to avoid the delay of \t|\n| Lambda Function \t| AWS Lambda code containing associated configuration information, such as its name and description and the resources it requires to execute. \t|\n| Lift and Shift \t| The process of moving your application from an on-premises environment to the cloud without making any major changes to the code. \t|\n| Microservices \t| An approach to writing software where apps are broken down into their smallest components, independent from each other. \t|\n| Runtime \t| Relates to what coding language the function is developed in \t|\n| SQS \t| AWS managed message queuing service that enables service decoupling, distributed systems, and serverless applications \t|\n| Triggers \t| Actions caused by specific events that will further trigger the lambda function \t|\n| XML (Extensible Markup  Language) \t| A markup language that defines a set of rules for encoding documents in a format that can be easily read by humans and machines \t|",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}