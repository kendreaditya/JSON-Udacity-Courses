{
  "data": {
    "lesson": {
      "id": 1011091,
      "key": "b19ec725-4a64-4b07-ac48-6b77d9dd1aed",
      "title": "Infrastructure as Code",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Writing Infrastructure as Code",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/b19ec725-4a64-4b07-ac48-6b77d9dd1aed/1011091/1586901695914/Infrastructure+as+Code+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/b19ec725-4a64-4b07-ac48-6b77d9dd1aed/1011091/1586901691065/Infrastructure+as+Code+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1011087,
          "key": "571d5874-2b7e-4e61-870a-f0671c81205e",
          "title": "Lesson Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "571d5874-2b7e-4e61-870a-f0671c81205e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010973,
              "key": "3686797a-4a48-484f-8f1b-0f15fce6270e",
              "title": "ND063 C2 L4 01 Lesson Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wbXRXes2MWo",
                "china_cdn_id": "wbXRXes2MWo.mp4"
              }
            },
            {
              "id": 1011045,
              "key": "8f308685-7858-4b55-97c4-99bd412fc1a3",
              "title": "Lesson Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cdd77_cand-c2-l4-intro/cand-c2-l4-intro.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8f308685-7858-4b55-97c4-99bd412fc1a3",
              "caption": "",
              "alt": "Infrastructure as Code (IaC)",
              "width": 508,
              "height": 394,
              "instructor_notes": null
            },
            {
              "id": 1010990,
              "key": "d86c848c-48cc-4c3f-8aa9-f0dac17ecaef",
              "title": "What's we'll cover recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson we'll cover:\n\n- What is IaC (Infrastructure as Code)?\n- Terraform\n- Collaboration and Security\n- IaC Best Practices\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011075,
          "key": "736c1de9-6bbb-4cff-8a2c-1dda467ad434",
          "title": "Intro to IaC",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "736c1de9-6bbb-4cff-8a2c-1dda467ad434",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011004,
              "key": "c54a9710-d515-4280-bf32-8f5a7c9477b1",
              "title": "Intro to Iac heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Back to the Server Room",
              "instructor_notes": ""
            },
            {
              "id": 1010986,
              "key": "697f6070-1c30-4d36-ac0b-8fb004f255c2",
              "title": "ND063 C2 L4 02 Historical Context",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "afGqjDtU1c0",
                "china_cdn_id": "afGqjDtU1c0.mp4"
              }
            },
            {
              "id": 1010995,
              "key": "25a0ee5a-b5de-473a-a378-212ea4b4cf18",
              "title": "back to the server room",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8cde05_computer-in-a-data-center-/computer-in-a-data-center-.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/25a0ee5a-b5de-473a-a378-212ea4b4cf18",
              "caption": "Back to the Server Room",
              "alt": "A 3B15 computer, located in a data center in Somerset, New Jersey. Taken in or around 1997 From https://commons.wikimedia.org/wiki/File:3B15_computer_in_a_data_center_in_Somerset,_New_Jersey_(ca._1997).jpg",
              "width": 640,
              "height": 480,
              "instructor_notes": null
            },
            {
              "id": 1010985,
              "key": "a56c8708-4dd7-4481-8e5b-dcad6d34c143",
              "title": "Intro to IaC Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms \n\n\n| Term \t| Definition \t|\n|----------|---------|\n| Automation \t| The use of software to create repeatable instructions and processes to replace or reduce human interaction with IT systems \t|\n| Cloud Governance \t| The people, process, and technology associated with your cloud infrastructure, security, and operations. It involves a framework with a set of policies and standard practices \t|\n| Infrastructure as Code \t| The process of managing and provisioning computer resources through human and machine-readable definition files, rather than physical hardware configuration or interactive configuration tools like the AWS console \t|\n| IT Audit \t| The examination and evaluation of an organization's information technology infrastructure, policies and operations \t|\n",
              "instructor_notes": ""
            },
            {
              "id": 1010988,
              "key": "8898839b-9bbb-4ac2-8c17-4f6ab03de540",
              "title": "Intro to IaC Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- The old way of managing hardware in the server room often led to miscommunication due to a lack of centralized logs and the gap between business owners and infrastructure engineers. Servers could run for years with unused or decommissioned software, having had nobody utilize them for a long time\n<br><br>\n- Moving applications to virtual servers meant more tech for engineers to master, but because virtual servers are managed with dashboards and their health and use can be easily monitored, virtual server management is easier for engineers than in the server room\n<br><br>\n- Defining your infrastructure in code reduces error and effort by providing a visual representation of your cloud services in code that can be run to create, modify, and destroy infrastructure. \n<br><br>\n- Infrastructure as code is auditable and repeatable, which is perfect for large cloud implementations under the management of Cloud Governance where starting over for every new project or lifecycle is a tedious manual job with the potential for errors and compliance deviations",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011074,
          "key": "51dc60c3-56fe-4392-8fe8-5db009bd1587",
          "title": "Automation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51dc60c3-56fe-4392-8fe8-5db009bd1587",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010994,
              "key": "b02043e7-ed2a-4116-bdc5-a734dd9b6c84",
              "title": "What is IAC heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### What is IaC in AWS",
              "instructor_notes": ""
            },
            {
              "id": 1010987,
              "key": "f855737e-9c43-4260-83ca-4def0a736dd5",
              "title": "ND063 C2 L4 03 What Is IAC In AWS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DvlYzrTd9uI",
                "china_cdn_id": "DvlYzrTd9uI.mp4"
              }
            },
            {
              "id": 1010993,
              "key": "96d48252-db8a-4b7e-929c-5e1e01791794",
              "title": "IAC Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms  \n\n\n| Term \t| Definition \t|\n|------------------\t|-------------\t|\n| AWS CloudFormation \t| Allows for the use of code for the automation of complex infrastructure management in the AWS Cloud \t|\n| Cloud Neutral \t| Software being deployed in the cloud does not use APIs that lock customers and IT service providers into a specific cloud provider \t|\n| Standard Operating Procedure (SOP) \t| The documented processes that a company has in place to ensure services and/or products are delivered consistently every time \t|",
              "instructor_notes": ""
            },
            {
              "id": 1010992,
              "key": "ad130304-c216-4805-a414-a6e6cef7c44f",
              "title": "What is IAC in the cloud Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Infrastructure as code is also sometimes referred to as software defined infrastructure. \n\n- AWS CloudFormation makes it easy to use programming languages or even a text file to securely model and provision the resources you need to run your application. \n\n- One potential drawback of opting for AWS CloudFormation is that it effectively locks you into AWS as a cloud provider, unless you want to start over.\n",
              "instructor_notes": ""
            },
            {
              "id": 1010999,
              "key": "fa260e82-540a-4b75-9d4e-1db41aa0a49d",
              "title": "CloudFormation Features",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fa260e82-540a-4b75-9d4e-1db41aa0a49d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is a potential drawback of using AWS CloudFormation?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It has an unusual interface",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It is Cloud neutral",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "It locks you in to a particular cloud provider",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "It makes your infrastructure public",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010989,
              "key": "336d8599-336c-47c1-909d-880c796daeed",
              "title": "CloudFormation v Terraform",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "336d8599-336c-47c1-909d-880c796daeed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Where should you store your CloudFormation code if you want to version and collaborate?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "An EBS Volume",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Version Control System",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "On a network share",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "In a folder on top of the cloud",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011001,
              "key": "366531ef-7c70-4721-b142-a32c0c740949",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nLearn more about CloudFormation:  \n\n- [AWS CloudFormation](https://aws.amazon.com/cloudformation/)  \n- [AWS CloudFormation WalkThrough](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/GettingStarted.Walkthrough.html)  \n- [We Need to Talk About Cloud Netrality](https://www.wired.com/story/we-need-to-talk-about-cloud-neutrality/)  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011079,
          "key": "ac4640f6-16f0-4681-8699-9f7ea1b0588c",
          "title": "AWS CLI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ac4640f6-16f0-4681-8699-9f7ea1b0588c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011062,
              "key": "28c55b58-6c3f-4d73-934e-a395490ece20",
              "title": "AWS CLI demo heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using the AWS CLI\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010991,
              "key": "7c5fe61e-da07-4368-b071-3db5859be533",
              "title": "AWS CLI Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-9wcABOBTwY",
                "china_cdn_id": "-9wcABOBTwY.mp4"
              }
            },
            {
              "id": 1011002,
              "key": "a1b09fb7-4295-4028-9042-e89cea21e133",
              "title": "AWS CLI Demo Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- The AWS Command Line Interface is a tool to manage AWS services that allows you to control and configure them from the command line. Many AWS console functions can be automated through scripts at the command line\n\n- You can provision and terminate EC2 instances outside of the AWS Console without using IaC. \n\n- Remember that access to the AWS console should be considered an elevated privilege, and access to AWS resources can be restricted to the CLI, eliminating the need for engineers to access the AWS management console\n\n### Using the AWS CLI to Create an EC2 Instance   \n\nIf you don’t have a key pair configured for your account, or you have lost or misplaced it, you can create a new one by following these instructions [Creating a Key Pair Using Amazon EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair)  \n\n1. Confirm the CLI is installed by typing:\n```bash\nwhich aws\n```  \nat the command line to view the AWS CLI installation path, and \n```bash\naws --version\n```\nto confirm the CLI version.\n2. Type out the code for creating an instance at the command line\n3. Create the instance and observe the output\n4. Switch to the AWS Console and view the instance\n5. Return to the CLI and terminate the instance via the command line\n6. Switch to the console and observe the instance has been terminated\n7. Create infrastructure using the sample commands below. Replace the “xxxxxxxx” with the values from your AWS account\n\n#### Sample instance creation command:\n\n```bash\naws ec2 run-instances --image-id ami-xxxxxxxx --count 1 --instance-type t2.micro --key-name MyAWSKeyPair --security-group-ids sg-xxxxxxxx --subnet-id subnet-xxxxxxxx\n```\n\n#### Sample instance termination command:\n\n```bash\naws ec2 terminate-instances --instance-ids i-xxxxxxxx\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011077,
          "key": "59f21a26-518f-4ba8-ae93-f6d3df0fed92",
          "title": "Exercise: AWS CLI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59f21a26-518f-4ba8-ae93-f6d3df0fed92",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010996,
              "key": "ef2f0b8c-047b-4652-a220-9e7b2f006ef1",
              "title": "Create a Server from the CLI",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Creating AWS Cloud services outside of the AWS console has always been possible with the AWS Command Line Interface (CLI). The CLI is a unified tool to manage AWS services.\n\nFor this exercise we will create an RDS database using the AW CLI. This will give us a warm up for working in AWS from the command line and spark our imagination for picturing our infrastructure in terms of cloud resources.\n\nYou will need to consult the [AWS CLI Command Reference for RDS](https://docs.aws.amazon.com/cli/latest/reference/rds/index.html#cli-aws-rdsl)  to determine the CLI commands you will need to use to create and delete a database with these parameters:   \n\n- db.t2.micro instance class\n-  Postgres database engine \n-  20g storage\n- master username\n- password for the master user\n-  ***not*** publicly available\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011003,
              "key": "f94cf109-c5ab-48d0-88c9-a483a56a1774",
              "title": "Create a Server Using AWS CLI",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f94cf109-c5ab-48d0-88c9-a483a56a1774",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create the database using the AWS CLI",
                "Check the AWS console to confirm that the database has been created",
                "Delete the database using the AWS CLI"
              ],
              "positive_feedback": "Thanks for completing the exercise!  You can see my solution in the next video.",
              "video_feedback": null,
              "description": "Create and delete an RDS database using the AWS CLI.  "
            }
          ]
        },
        {
          "id": 1011076,
          "key": "1ccdf6e3-b022-43a2-ae60-9f9ba83b9028",
          "title": "Solution: AWS CLI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1ccdf6e3-b022-43a2-ae60-9f9ba83b9028",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010997,
              "key": "7463a7ad-28f6-42aa-9e25-2a977f3f8f47",
              "title": "AWS CLI solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 1010998,
              "key": "f99a29ca-222d-425c-b127-af00b8956008",
              "title": "AWS CLI Exercise Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ab2pq983408",
                "china_cdn_id": "ab2pq983408.mp4"
              }
            },
            {
              "id": 1010976,
              "key": "b3e3e9d0-f0fd-413d-b13a-a2d51fa4fba6",
              "title": "Create a Server from the CLI Solution Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is the code I used to create an RDS database from the command line:\n\n```bash\naws rds create-db-instance \\\n    --allocated-storage 20 --db-instance-class db.t2.micro \\\n    --db-instance-identifier myinstancename \\\n    --engine postgres \\\n    --master-username myname \\\n    --master-user-password secret99 --no-publicly-accessible\n```\n\nDon't forget to return to the CLI to delete your database!\r\n```bash \naws rds  delete-db-instance \\\n     --db-instance-identifier myinstancename \\\n     --skip-final-snapshot\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011000,
              "key": "3b3f47d9-4432-41bf-820d-e73f3b19ef72",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\rLearn more about the AWS Command Line Interface here:  \n\n- [AWS CLI](https://aws.amazon.com/cli/)  \n- [AWS CLI Command Reference](https://docs.aws.amazon.com/cli/latest/index.html)  \n- [What is AWS CLI?](https://stackify.com/what-is-aws-cli/)  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011081,
          "key": "639a848c-c0d8-43cf-a6dc-3e57836e62e6",
          "title": "Intro to Terraform",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "639a848c-c0d8-43cf-a6dc-3e57836e62e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011032,
              "key": "741366e6-8e58-4041-b6e9-4c02159da6cb",
              "title": "Terraform Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What is Terraform? ",
              "instructor_notes": ""
            },
            {
              "id": 1011021,
              "key": "5f3abef0-2a93-4bd9-9b7c-3fe6c39c817b",
              "title": "ND063 C2 L4 04 Introduction To Terraform",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RCOP3y3LG68",
                "china_cdn_id": "RCOP3y3LG68.mp4"
              }
            },
            {
              "id": 1011063,
              "key": "608e73f5-a0d8-4401-9762-748843db3c55",
              "title": "Terraform Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms    \n\n\n\n| Term \t| Definition \t|\n|------------|----|\n| Cloud Agnostic/Cloud Neutral \t| Software that is not tied to any particular provider and is portable between them \t|\n| Go \t| An open source programming language that makes it easy to build simple, reliable, and efficient software \t|\n| HCL \t| Configuration language authored by HashiCorp and used with HashiCorp's cloud infrastructure automation tools, like Terraform \t|",
              "instructor_notes": ""
            },
            {
              "id": 1011012,
              "key": "45f3c5d4-c922-4561-9b44-0151f74b0e70",
              "title": "Introduction to Terraform Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Terraform is an Open source Infrastructure as code software tool\n<br><br> \n- Terraform code is written in Hashicorp configuration language or HCL, a structured configuration language that is human and machine readable for use at the command line\n<br><br>\n- Terraform is cloud neutral, meaning the APIs it provides do not lock the user to any one particular cloud provider.\n<br><br> \n- Learning about Infrastructure as Code and Terraform is a great step toward advancing your career in cloud architecture\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010975,
              "key": "ed57328d-3c52-4d38-abb6-990a7cd62534",
              "title": "IAC Features",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ed57328d-3c52-4d38-abb6-990a7cd62534",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Terraform is cloud neutral, so what cloud platforms does Terraform work with?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Amazon Web Services",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Google Cloud Platform",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Microsoft Azure",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Digital Ocean",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1011008,
              "key": "b2d20293-a30f-4c9b-b399-24785daadcc6",
              "title": "Terraform Getting Starting heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Configuring Terraform",
              "instructor_notes": ""
            },
            {
              "id": 1011052,
              "key": "02b8b54f-dfc5-46db-96cd-34f75b3231d0",
              "title": "TF Getting Started",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1vEHTeDa4Hs",
                "china_cdn_id": "1vEHTeDa4Hs.mp4"
              }
            },
            {
              "id": 1011005,
              "key": "047b5616-a785-40e1-8549-1b748f71c1e1",
              "title": "Terraform Getting Starting recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Getting Started With Terraform\n\n- Install Terraform. You can find the correct package for your operating system on the [Terraform Downloads page](https://www.terraform.io/downloads.html)  \n\n- In order to authenticate Terraform to your AWS account, you need to set the AWS credentials for the IAM user you are using for the course\n\n- If you need a new secret access key, please follow the instructions in this blog post [How to quickly find and update your access keys, password, and MFA setting using the AWS Management Console](https://aws.amazon.com/blogs/security/how-to-find-update-access-keys-password-mfa-aws-management-console/)  \n\n- Terraform Cloud is currently free for up to 5 users, and is billed on a monthly basis for teams larger than 5\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011024,
              "key": "ff84ab43-8db0-4999-bcd4-26fe5b5f6da7",
              "title": "TF file components",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ff84ab43-8db0-4999-bcd4-26fe5b5f6da7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Once you have installed Terraform, type `terraform` at the command line. What is the first common command?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`all`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`apply`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`plan`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`destroy`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011010,
              "key": "48102811-ffd3-4781-b3da-8c382aed07d3",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\n\nLearn more about Terraform here:  \n\n- [Terraform by Hashicorp](https://www.terraform.io/)  \n- [Installing Terraform (VIDEO)](https://learn.hashicorp.com/terraform/getting-started/install.html)  \n- [Configuration Language](https://www.terraform.io/docs/configuration/index.html)  \n- [Terraform Best Practices](https://www.terraform-best-practices.com/) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011088,
          "key": "8b8a0f0d-7096-4074-a803-1e9f7e8721ee",
          "title": "Terraform Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8b8a0f0d-7096-4074-a803-1e9f7e8721ee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011007,
              "key": "2c3168e4-f1ea-4842-8f2a-6d8d705ec558",
              "title": "TF Files heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Files and Hashicorp Configuration Language",
              "instructor_notes": ""
            },
            {
              "id": 1011006,
              "key": "245712b1-34b9-4b9f-8bda-96b4e70a7027",
              "title": "ND063 C2 L4 05 Terraform Files",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "owo5Kv_8Y-Y",
                "china_cdn_id": "owo5Kv_8Y-Y.mp4"
              }
            },
            {
              "id": 1011058,
              "key": "22d8268f-4b77-4993-accb-05291676f129",
              "title": "Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms  \n\n\n| Term \t| Definition |\n|--------|------------|\n| Integrated Development Environment (IDE) | A software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of at least a source code editor, build automation tools and a debugger \t|\n| Resources | Describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records \t|\n| Provider | Responsible for understanding API interactions and exposing resources. Providers are generally an IaaS provider (e.g. AWS, GCP, Microsoft Azure)\t|\n| Blocks | Containers for other content; usually representing the configuration of some kind of object, like a resource \t|\n| Arguments \t| an argument assigns a value to a particular name ex.- server_name = JR234. In this example, server_name is the argument name and JR234 is the argument value \t|\n| Expressions \t| An expression in Terraform is anything that returns a value \t|\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011017,
              "key": "9a1edffa-2d21-401a-85d5-8dde188415a8",
              "title": "Terraform File Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points \n\n- Terraform has its own configuration language,Hashicorp Configuration Language (HCL), that it uses primarily to declare resources.  \n\n- HCL is declarative, meaning you use it to describe your desired infrastructure and Terraform will figure out how to create what you requested in the code\n\n- The set of files used to describe infrastructure in Terraform is referred to as a Terraform configuration\n\n- Terraform configuration files are named with the .tf file extension. A JSON-based varian of Terraform language uses the .tf.json file extension \n\n- A Terraform configuration can be as simple as a single root module (folder) containing one .tf file.",
              "instructor_notes": ""
            },
            {
              "id": 1011044,
              "key": "1427b7cb-7bc8-4320-9333-8c31ddae0241",
              "title": "TF file components",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1427b7cb-7bc8-4320-9333-8c31ddae0241",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "When you configured your AWS provider to interact with AWS services through terraform, what resources and credentials did you provide",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "AWS Security Group",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "AWS Region",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "AWS Access Key",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Instance Class",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "AWS Secret Access Key",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1011013,
              "key": "d54b6818-895f-4467-acb7-bcdecb7343f9",
              "title": "Terraform quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d54b6818-895f-4467-acb7-bcdecb7343f9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What two file extensions are processed by Terraform?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`.tf.json`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "`.txt`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "`.tmp`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`.tf`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010974,
              "key": "c526bd15-ed73-4ed0-9551-e7ca626c07b1",
              "title": "Terraform Commands heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Commands",
              "instructor_notes": ""
            },
            {
              "id": 1011056,
              "key": "fae3c3ed-aac2-4747-a81f-1780393c241a",
              "title": "TF Command Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "o0zFKzhqWIo",
                "china_cdn_id": "o0zFKzhqWIo.mp4"
              }
            },
            {
              "id": 1011009,
              "key": "9dd4671a-e86a-44b7-a24c-33939234f9d4",
              "title": "Terraform commands",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Terraform is a single command line application. If you ever need to refresh your memory on the available commands, simply run terraform at the command line with no arguments.\n\nSome common commands include:\n\n| Command |  Action | \n| ---- | ---- |\n|  `apply`  | builds or changes infrastructure according to configuration file instructions  |\n|  `destroy`  | destroys infrastructure managed by Terraform  |\n|  `init`  | initialize the current Terraform working directory  |\n|  `plan`  | reads configuration files to create and display the execution plan  |\n|  `refresh`  |  updates the local state file to reflect the actual resources  |\n|  `show`  |  displays Terraform state or plan for inspection\n\nTo get help or view information about a specific command, pass the `-h` flag after the command.  For example, to learn more about the ‘show’ command, type: \n\n```bash\nterraform show -h\n```\n### Demo Code  \r\nTry it out with a simple terraform file like the example shown below. Name the file `terraform.tf` and run it from a working directory in your terraform root folder. \n\n\n```bash\nprovider \"aws\" {\n  access_key = \"<Your Access Key>\"\n  secret_key = \"<Your Secret Key>\"\n  region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"example\" {\n  ami = \"ami-0c6b1d09930fac512\"\n  instance_type = \"t2.micro\"\n}\n```\n\n\nRun `terraform init`, `terraform plan`, `terraform apply`, and `terraform destroy` and observe the results in the AWS EC2 Management console.\n\n### Terraform Command Quizzes   ",
              "instructor_notes": ""
            },
            {
              "id": 1011061,
              "key": "eae70919-c227-4327-8aa1-698900b42046",
              "title": "TF file",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eae70919-c227-4327-8aa1-698900b42046",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does the command `terraform init` do?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It creates a connection to the cloud provider",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It initializes a directory containing Terraform configuration files",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "It saves Terraform files to AWS",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "It opens terraform files",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1012402,
              "key": "178863ab-eaa8-4139-82eb-5e815f976f39",
              "title": "Terraform Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "178863ab-eaa8-4139-82eb-5e815f976f39",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Terraform is a ________ language",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Descriptive",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Operational",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Object Oriented",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Declarative",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010977,
              "key": "b667c58e-2b7e-4569-b0a5-57ea1ead6299",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading   \n\nRead more about Terraform here:   \n- [An Introduction to Terraform](https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180)  \n- [Configuration Language](https://www.terraform.io/docs/configuration/index.html)  \n- [Terraform Commands](https://www.terraform.io/docs/commands/index.html)  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011085,
          "key": "ae9bd298-1069-408c-8cc7-237b411fa685",
          "title": "TF Variables and Modules",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae9bd298-1069-408c-8cc7-237b411fa685",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010984,
              "key": "5c917065-3058-4235-8c39-1bd9a295b56e",
              "title": "Terraform variables heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##  Variables in Terraform",
              "instructor_notes": ""
            },
            {
              "id": 1011027,
              "key": "e8d59169-1d22-4c2c-ac97-d931aa3409fe",
              "title": "ND063 C2 L4 06 Terraform Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nrLczX3lDvw",
                "china_cdn_id": "nrLczX3lDvw.mp4"
              }
            },
            {
              "id": 1010978,
              "key": "93430da1-45ac-426f-8a48-edfec5d8a02f",
              "title": "Introduction to TFVARS recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- Terraform variables are commonly stored in either a `variables.tf` or `.tfvars` file in a Terraform configuration\n\n- Input variables are used to make your code more configurable by allowing you to SEND values into Terraform \n\n- Output variables output or print an expression from Terraform. ",
              "instructor_notes": ""
            },
            {
              "id": 1011053,
              "key": "fe8838b0-6a77-4bf8-be2a-d44e929786d7",
              "title": "TFVARS Features",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fe8838b0-6a77-4bf8-be2a-d44e929786d7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are the two types of Terraform variables?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Stored",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Input",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Simple",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Output",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1011011,
              "key": "ea97cf1f-ab3a-4fbc-8c74-849ca27a1c10",
              "title": "TF Variables Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ea97cf1f-ab3a-4fbc-8c74-849ca27a1c10",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the file extension for a Terraform variables file?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`.tfm`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`.tfvars`",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`.vars`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`.terravars`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010979,
              "key": "bee98924-2f49-4f32-a1f4-1451b900d015",
              "title": "Terraform modules header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Modules",
              "instructor_notes": ""
            },
            {
              "id": 1011014,
              "key": "f30586b4-656b-4fd3-8a39-8d9c46be0630",
              "title": "ND063 C2 L4 07 Terraform Modules",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Q1f94Vdooy8",
                "china_cdn_id": "Q1f94Vdooy8.mp4"
              }
            },
            {
              "id": 1011057,
              "key": "2c6b0ac9-7c20-4281-97db-b9a5f3f877eb",
              "title": "Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms   \n\n\n\n| Term \t| Definition \t|\n|--------------|--------------|\n| Lifecycle Environment \t| Application life cycles are divided into life cycle environments, which represent each stage of the application life cycle- Development, QA, UAT, Staging, Production, etc \t|\n| Module \t| A set of Terraform configuration files in a folder \t|\n| Root Module \t| The module in the current working directory \t|\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011015,
              "key": "38b85608-5309-4c6f-9290-ba05ccc63e80",
              "title": "Terraform Modules recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- Terraform modules ensure that the configurations in your lifecycle environments are the same. \n\n- Terraform modules abstract your infrastructure descriptions by describing it as architecture and not actual objects.\n\n- Terraform modules are a set of Terraform configuration files in a folder.\n\n- Terraform modules can be reused in different environments, so that the code in the environments is the exact same. \n\n- A Terraform module best practice is to have separate git repositories for reusable modules and live infrastructure and specify a versioned module git URL in the source parameter instead of your local filesystem.\n\n- Terraform modules can be created and shared among Terraform users on [Terraform Registry](https://registry.terraform.io/)  or in private registries. Using premade modules is a good way to get started.",
              "instructor_notes": ""
            },
            {
              "id": 1011034,
              "key": "66e9e1bb-cfa3-4755-9912-764854661d2d",
              "title": "Terraform Create heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Terraform to Create AWS Infrastructure",
              "instructor_notes": ""
            },
            {
              "id": 1011064,
              "key": "1dcf385d-672d-45d3-8e63-ababb2753fa0",
              "title": "TF Create Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kmocwDpm8Lo",
                "china_cdn_id": "kmocwDpm8Lo.mp4"
              }
            },
            {
              "id": 1012401,
              "key": "a6b0a316-8fc7-4446-b3ef-9367b129f6c8",
              "title": "Terraform Create demo recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- Terraform is a declarative language that describes infrastructure in terms of the end goal as opposed to a series of steps it would take to get there. \n\n- An example of how declarative code differs from procedural code would be changing the number of servers in a .tf file to increase the number of running servers from 2 to 4. Terraform would recognize that two servers have already been created based on the .tfstate, and add two more because the end goal is 4 servers. In procedural language such as an AWS CLI command, increasing the server count to 4 would result in 4 additional servers.\n\n### Using Terraform to Create an EC2 Instance\n\n1. Verify you are in the correct directory by running \n```bash\nwhich terraform\n```\n<br>\n2. Locate the directory containing your terraform files\n<br><br>\n3. Initialize the directory with\n```bash\nterraform init\n```\n<br>\n4. View the Terraform execution plan with\n```bash\nterraform plan\n```\n<br>\n5. Apply the Terraform execution plan with\n```bash\nterraform apply\n```\n<br>\n6. Observe the infrastructure provisioned by Terraform in the AWS Management Console\n<br><br>\n7. Return to the terminal and terminate the infrastructure with\n```bash\nterraform destroy\n```\n\n### Demo Code\n\nHere is the Terraform code I used for main.tf. If you’d like to try to run the code, save your main.tf to a working directory in your Terraform root directory and run it there with `terraform init`, `terraform plan`, `terraform apply`, `terraform destroy`. \n\n```bash\nprovider \"aws\" {\n  access_key = \"<Your Access Key>\"\n  secret_key = \"<Your Secret Key>\"\n  region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"Udacity\" {\n  ami = \"ami-0323c3dd2da7fb37d\"\n  instance_type = \"t2.micro\"\n}  \n```",
              "instructor_notes": ""
            },
            {
              "id": 1010983,
              "key": "64a28155-2b11-447b-81ea-f5cc0d873ae0",
              "title": "Modules Features",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "64a28155-2b11-447b-81ea-f5cc0d873ae0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What can you do to apply versioning to your Terraform modules",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Use an S3 bucket",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Create separate github accounts for modules",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Make the changes manually before you terraform init, then change them back",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Create a different version for each lifecycle",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011066,
              "key": "4e1cc9f5-d5c6-43f5-818d-69ae6706a0f8",
              "title": "TF Modules quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e1cc9f5-d5c6-43f5-818d-69ae6706a0f8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Modules are containers that contain resources that are used together. What are your options for obtaining modules?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Private Registries",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Terraform Registry",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Write them yourself",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Amazon Registry",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010982,
              "key": "e5e40383-2f05-4383-b4e4-4bc68ba4a06b",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nLearn more about Terraform Modules  \n\n- [Terraform Modules](https://learn.hashicorp.com/terraform/getting-started/modules.html)    \n- [Creating Modules](https://www.terraform.io/docs/modules/index.html)    \n- [Terraform Registry](https://registry.terraform.io/)    \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012408,
          "key": "432326bd-4c6c-4ad6-b366-ccf36e83e09d",
          "title": "Exercise: Terraform Create",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "432326bd-4c6c-4ad6-b366-ccf36e83e09d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012403,
              "key": "30e00ade-2828-4972-8993-f687bdc7cfbe",
              "title": "TC Exercise Intro",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Creating AWS Infrastructure with Terraform\n\nFor this exercise, we will create EC2 instances by writing a configuration file in a code editor declaring the infrastructure we want to create. \n\nWe will instruct Terraform to analyze our configuration plan and then create our desired infrastructure by executing the plan. \n\nFinally, after we have successfully provisioned infrastructure with Terraform, we will return to the terminal and destroy the infrastructure with Terraform.\n\nUse Terraform to create and destroy infrastructure with these parameters:   \n\n- A provider block (provider, access key, secret key, and region)\n- A resource block ( ami, at least 2 EC2 instances, instance type, a tag (key/value))\n\n#### AWS Resource Warning!  \n\nThis exercise will use resources that are **outside of the AWS Free Tier**.  Do not forget to destroy the EC2 instances when you have completed the exercise.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1012406,
              "key": "303a19aa-4b5c-4899-8d9a-f9a54dc4dccb",
              "title": "Terraform Create Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "303a19aa-4b5c-4899-8d9a-f9a54dc4dccb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a Terraform configuration file in your preferred code editor",
                "Initialize Terraform from the command line and apply your configuration",
                "Confirm the expected configuration in the AWS Management Console",
                "Return to the terminal and destroy the infrastructure from the command line using Terraform"
              ],
              "positive_feedback": "Thanks for completing the exercise!",
              "video_feedback": null,
              "description": "Create Infrastructure using Terraform"
            }
          ]
        },
        {
          "id": 1012409,
          "key": "a9105f96-8188-4203-84b9-7c4b07e17b44",
          "title": "Solution: Terraform Create",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a9105f96-8188-4203-84b9-7c4b07e17b44",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012405,
              "key": "aec747b8-3b5c-42f5-87bf-fd639eaa6fda",
              "title": "TC Solution heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 1012407,
              "key": "4ed2ed47-6e96-4eea-9592-81c5694bf3b2",
              "title": "TF Create Exercise Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5KpscJYIEUg",
                "china_cdn_id": "5KpscJYIEUg.mp4"
              }
            },
            {
              "id": 1012404,
              "key": "5c97b82e-67bc-411d-9767-19ec4eabbefd",
              "title": "TC Exercise Solution recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### My Exercise Solution\n\nHere is the code for the `main.tf` file I used to create AWS infrastructure with Terraform:\n\n```bash\nprovider \"aws\" {\n  access_key = \"<Your Access Key>\"\n  secret_key = \"<Your Secret Key>\"\n  region = \"us-east-1\"\n}\n \nresource \"aws_instance\" \"Udacity\" {\n  count = \"2\"\n  ami = \"ami-0323c3dd2da7fb37d\"\n  instance_type = \"t2.small\"\n  tags = {\n    name = \"Udacity Terraform\"\n  }\n}\n``` \n\n### AWS Costs Reminder\n\nPlease verify you have destroyed the infrastructure you created in this lesson.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011090,
          "key": "e06a9017-730c-4514-bc88-33d5dbc8513e",
          "title": "TF State Management",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e06a9017-730c-4514-bc88-33d5dbc8513e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011022,
              "key": "7c439dac-7e3e-4923-9add-23e8ee35cd0b",
              "title": "State mgmt heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## TFState FIle Management with Terraform",
              "instructor_notes": ""
            },
            {
              "id": 1011060,
              "key": "a8df4051-ea41-4f93-a8f2-cdf412cdeaf2",
              "title": "ND063 C2 L4 08 Intro To Terraform State Files",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ce6XFJi60e8",
                "china_cdn_id": "ce6XFJi60e8.mp4"
              }
            },
            {
              "id": 1010980,
              "key": "dbc4d3e2-a083-44ca-ab30-8ef23b7662b9",
              "title": "Glossary Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms \n\n\n| Term \t| Definition \t|\n|-----------------\t|-------------------------------------\t|\n| Local Backend \t| Stores the terraform.tfstate file on your local disk \t|\n| Remote Backend \t| Allows you to store the terraform.tfstate file in a remote, shared storage location \t|\n| Secrets \t| Sensitive data that needs to be kept private \t|\n| Terraform State \t| Information about what infrastructure Terraform created \t|\n",
              "instructor_notes": ""
            },
            {
              "id": 1011019,
              "key": "dc6f0470-deeb-4102-a300-27561860e342",
              "title": "Introduction to Terraform State Files recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points  \n\n- The Terraform state file, `terraform.tfstate`, is how Terraform is able to keep track of the elements of your infrastructure it is responsible for. The state file allows Terraform to find the resources it has previously created or updated and proceed to carry out the current instruction\n\n- `terraform.tfstate` is a JSON file that maps the instructions in your configuration files to the actual resource in the real world and maintains all of the metadata about the resource so it can keep track of its status.\n\n- Instead of using version control for your `terraform.tfstate` file, the terraform best practice is to use a remote backend to store the file.\n\n\n### Using AWS S3 \nIf you are already using Terraform with AWS, your best bet would be to use AWS S3 as your remote backend.\n\n- AWS S3 is extremely durable, so losing your state file is nearly impossible\n\n- AWS S3 supports encryption in transit and at rest, and it supports versioning, so if you ever need to roll back your changes, all of your older versions are available\n\n- Storing a `terraform.tfstate` file in S3 would cost almost nothing.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010981,
              "key": "8af3b700-4519-441f-90e5-4ad54c2f5e7f",
              "title": "TF State demo heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Remote State Management",
              "instructor_notes": ""
            },
            {
              "id": 1011059,
              "key": "10e2c129-1e14-4477-9f3e-cdb029819d09",
              "title": "TF Backend Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ADn1pBCI45I",
                "china_cdn_id": "ADn1pBCI45I.mp4"
              }
            },
            {
              "id": 1011016,
              "key": "cca0c476-9682-4fb2-b2d4-7c647549d290",
              "title": "TF State demo recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Demo Code \n\n\nHere is the code I used to create the `backend.tf` file. You'll need to update it with the name of your S3 bucket and the path to your `terraform.tfstate` file.\n```bash \nterraform {\n    backend \"s3\" {\n        bucket = \"<Name of your S3 bucket>\"\n        key = \"<Path To Your terraform.tfstate file>\" \n        region = \"us-east-1\"\n    }\n}\n```\nHere is the code for terraform.tf used to create the S3 backend. You can model yours off my example, or be creative and create your own- just make sure you destroy any infrastructure you create!\n\n```bash\nprovider \"aws\" {\n  access_key = \"<Your Access Key>\"\n  secret_key = \"<Your Secret Key>\"\n  region = \"us-east-1\"\n}\n\nresource \"aws_instance\" \"Backend\" {\n  count = \"2\"\n  ami = \"ami-0323c3dd2da7fb37d\"\n  instance_type = \"t2.micro\"\n}\n```\n\nSave your `backend.tf file` with your `terraform.tf` (or `main.tf` file) in a working directory under your Terraform root directory. In the demo, the working directory is `~/terraform/udacity_s3`\n\n#### Note:   \nIn order to maintain your tfstate file properly, you MUST have versioning enabled on your S3 bucket.",
              "instructor_notes": ""
            },
            {
              "id": 1011068,
              "key": "78e63725-ce0d-4288-a6fa-5b3d50e97f68",
              "title": "tfstate file features",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "78e63725-ce0d-4288-a6fa-5b3d50e97f68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the best way for your team to store your Terraform State files?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Remote Backend",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Local Backend",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Github",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "USB",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011026,
              "key": "b0fcd6fa-b0a4-4b86-af12-1a6fdc8ec4f7",
              "title": "TF remote backend",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b0fcd6fa-b0a4-4b86-af12-1a6fdc8ec4f7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which options below are examples of a secure remote backend?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "AWS S3",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Google Cloud Storage",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Terraform Pro",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "/usr/local/bin/terraform",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011028,
              "key": "55a1d860-babf-4741-815d-548a20969efa",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nRead more about Terraform State  \n\n- [Terraform State](https://www.terraform.io/docs/state/index.html)  \n- [Terraform State Demystified](https://thorsten-hans.com/terraform-state-demystified)  \n- [Cleaning up a Terraform State File](https://medium.com/faun/cleaning-up-a-terraform-state-file-the-right-way-ab509f6e47f3)  \n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011073,
          "key": "848ec559-37a7-4763-b03b-7fc71b07d1b6",
          "title": "Exercise: Remote Backend",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "848ec559-37a7-4763-b03b-7fc71b07d1b6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011041,
              "key": "a9292b49-9467-4446-ba48-fcf4e8fb8f44",
              "title": "TF remote backend intro",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Remote State Management Exercise\n\nFor this exercise, we will be storing the Terraform state file (terraform.tfstate) remotely in an S3 bucket. When the state file is stored remotely in S3, it can be versioned and shared collaboratively\n\n#### Hints:\rThese resources will be helpful: \n- [How Do I Enable or Suspend Versioning for an S3 Bucket?\n](https://docs.amazonaws.cn/en_us/AmazonS3/latest/user-guide/enable-versioning.html)  \n-  [Terraform  Backend Configuration for S3 Bucket](https://www.terraform.io/docs/backends/types/s3.html) \n\n\n#### AWS Resource Warning!  \n\nThis exercise will use resources that are **outside of the AWS Free Tier**.  Do not forget to destroy the infrastructure you have created when you have completed the exercise.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011023,
              "key": "97508519-02de-4756-9895-841165333e4b",
              "title": "TF remote backend list",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "97508519-02de-4756-9895-841165333e4b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create an S3 bucket for storing your terraform.tfstate file remotely.",
                "Create an exercise working directory under your Terraform directory",
                "Create a `backend.tf` file in your Terraform exercise working directory.",
                "Include an infrastructure configuration file to provision AWS infrastructure in your Terraform working directory",
                "Use the AWS Console to confirm that your  `terraform.tfstate` file is in your Terraform backend S3 bucket",
                "Uses `terraform destroy` to destroy the resources after you have completed the exercise"
              ],
              "positive_feedback": "Thank you for completing the exercise.  See my solution in the next video.",
              "video_feedback": null,
              "description": "Please follow the steps below to create an S3 backend for your terraform.tfstate file"
            }
          ]
        },
        {
          "id": 1011082,
          "key": "271db746-4516-4f9c-a937-f95f1aa54ca7",
          "title": "Solution: Remote Backend",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "271db746-4516-4f9c-a937-f95f1aa54ca7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011025,
              "key": "b5d8da94-909a-48b7-99b4-665f514eccbe",
              "title": "TF Remote Backend solution header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 1011050,
              "key": "287ac5a2-a3dc-45b6-9372-c2fe70aceef2",
              "title": "TF Backend Exercise Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fD7w6hp317U",
                "china_cdn_id": "fD7w6hp317U.mp4"
              }
            },
            {
              "id": 1011065,
              "key": "c3cda16b-4fb5-496e-a981-f086892106b0",
              "title": "Remote Backend recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- Backends define where tfstate files are stored, and remote backends allow you to store your state files in a remote and shared storage location.\n\n- Using AWS S3 as a remote backend is an easy choice if you are already using Terraform for AWS\n\n- AWS S3 is inexpensive, extremely durable, fully managed, and has built-in error proof versioning. \n\n### AWS Costs Reminder\n\nPlease verify you have destroyed the infrastructure you created in this lesson.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011036,
              "key": "98212a01-a5e1-4d4e-a59b-60f5bdc969ca",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Reading  \n\nRead more about managing Terraform State\n\n- [Terraform Backends](https://www.terraform.io/docs/backends/index.html)  \n- [How to Manage Terraform State](https://blog.gruntwork.io/how-to-manage-terraform-state-28f5697e68fa) \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011086,
          "key": "64b3710c-7815-4392-8b0b-a81ffeda1cf9",
          "title": "TF Best Practices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "64b3710c-7815-4392-8b0b-a81ffeda1cf9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011020,
              "key": "19c9c9fb-f701-45eb-8f10-bc1484197b04",
              "title": "Best practices heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Terraform Best Practices",
              "instructor_notes": ""
            },
            {
              "id": 1011040,
              "key": "a7eb481c-7363-42e7-b508-d5dde9a8dd8e",
              "title": "ND063 C2 L4 09 Terraform Best Practices",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FnHP8TalGGA",
                "china_cdn_id": "FnHP8TalGGA.mp4"
              }
            },
            {
              "id": 1011071,
              "key": "d4737758-9663-43ee-bdd9-04fa889b36f2",
              "title": "TF Best Practices Intro Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Points\n\n- Best practices are subjective and what works best for one company won’t work for another, These practices will generally keep you aware of the power of Terraform and the risks and rewards of running infrastructure as code\n\n- Ultimately, the implementation of a best practices culture at your company will lay the foundation for effective team communication, rapid issue resolution, and predictable deployments.\n\n- Terraform implementation should be done incrementally with all members of the team on board.\n\n- Terraform is not the answer for every company, especially a company that doesn’t want to use it. The risk of using it improperly is too great\n\n- Terraform has the best chance of succeeding at your company when it is used to address a specific pain point, and it performs that function well\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1011048,
              "key": "f54fcef9-fac1-449c-931e-c7a1128a5faf",
              "title": "What is not a best practice",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f54fcef9-fac1-449c-931e-c7a1128a5faf",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which answer below is a bad Terraform practice?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Using a Style Guide",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Making Out of Band Changes",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Creating an IAM account for Terraform",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Code Reviews",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011029,
              "key": "52fef971-6d39-4501-aeb4-f5c3bffbb9d4",
              "title": "What is a best practice",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "52fef971-6d39-4501-aeb4-f5c3bffbb9d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which answer below is a Terraform best practice",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Unilateral decision making",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Using a Sandbox to test Terraform",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Automatic Merges",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011067,
              "key": "c58effb8-42ab-4148-8cc4-30292cce56cd",
              "title": "Good Terraform Planning",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c58effb8-42ab-4148-8cc4-30292cce56cd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the best way to implement Terraform ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A huge transformational project",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Do it next year",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Incrementally",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Have the Junior Devs test it first",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011039,
              "key": "5377f5c1-da2b-4ece-8c30-dda8f3df5c88",
              "title": "Think Like a Cloud Architect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5377f5c1-da2b-4ece-8c30-dda8f3df5c88",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What do you think is the worst thing that can happen if Terraform isn’t implemented correctly?"
              },
              "answer": {
                "text": "In my opinion, the #1 worst thing that can happen is having your secrets accidentally exposed in your tfstate file or even worse your AWS config file in a public repo. Even though you are learners, you should start implementing the best practice of strong single-use passwords and multi-factor authentication. Once someone with bad intentions has your password, they will be off to the races trying to use it to get into other parts of your infrastructure. \n\nAWS does scan public repos for secrets and notifies users when they have made such a mistake, but by that time, anything could have happened, and by anything, I mean a person may have provisioned quantum computers to mine bitcoin on your AWS account. Which brings me to another reminder to always set a billing alarm when you create an AWS account!",
                "video": null
              }
            },
            {
              "id": 1011046,
              "key": "66edde5e-e3f1-421b-b850-3c7a310e345f",
              "title": "Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading  \n\nPlease follow the links below to learn more about Terraform. Terraform is the industry-leading IaC tool, and learning more about how to manage infrastructure using Terraform will be great for your cloud architecture career.\n\n- [Terraform Recommended Practices](https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html)  \n- [Best Practices to Create and Organize Code for AWS](https://medium.com/xebia-engineering/best-practices-to-create-organize-terraform-code-for-aws-2f4162525a1a)  \n- [Terraform and Infrastructure as Code Best Practices](https://blog.realkinetic.com/terraform-infrastructure-as-code-best-practices-2591ea047da7)  \n- [Terraform Best Practices](https://www.terraform-best-practices.com/)  \n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011080,
          "key": "c6561586-c7da-41a5-8266-88f7ecca132b",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c6561586-c7da-41a5-8266-88f7ecca132b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011070,
              "key": "50eafae6-6444-47f7-8370-985629b00932",
              "title": "L4 Recap Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Infrastructure as Code Recap  ",
              "instructor_notes": ""
            },
            {
              "id": 1011038,
              "key": "8aae19ce-31c1-4802-b0f5-594a6ff543bd",
              "title": "ND063 C2 L4 10 Lesson Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CQOuf48tnds",
                "china_cdn_id": "CQOuf48tnds.mp4"
              }
            },
            {
              "id": 1011042,
              "key": "00dd4f4a-ceaf-4d42-a583-7f1ef9e3f77b",
              "title": "Lesson Overview",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8ce00e_cand-c2-c4-recap/cand-c2-c4-recap.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/00dd4f4a-ceaf-4d42-a583-7f1ef9e3f77b",
              "caption": "",
              "alt": "What we have learned in this course:  What is Iac, Terraform, Collaboration and Security, IaC Best Practices",
              "width": 753,
              "height": 318,
              "instructor_notes": null
            },
            {
              "id": 1011069,
              "key": "bfed4ec3-2f2a-4e3b-b67e-52db1908849a",
              "title": "Lesson Overview",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this lesson we discussed:\n\n- What Infrastructure as Code is \n- When IaC is helpful\n- How we can use Terraform to design and deploy infrastructure\n- Terraform collaboration and security\n- Best practices for using IaC\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011084,
          "key": "ba4daacf-db64-43b1-adc4-3733429ed6f3",
          "title": "Course Wrap Up",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba4daacf-db64-43b1-adc4-3733429ed6f3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011051,
              "key": "9778f5a8-c78b-4f22-9a0a-8e3f87957b6c",
              "title": "ND063 C2 L4 11 Course Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qC6vhgxI8jw",
                "china_cdn_id": "qC6vhgxI8jw.mp4"
              }
            },
            {
              "id": 1011043,
              "key": "1d6ef4d1-8613-4863-b63c-5398cb94028b",
              "title": "Course Overview Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8ce038_cand-c2-l4-summary/cand-c2-l4-summary.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1d6ef4d1-8613-4863-b63c-5398cb94028b",
              "caption": "What We Have Learned",
              "alt": "What we have learned",
              "width": 960,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 1011055,
              "key": "55060189-9cf7-40b6-8ef2-acce3d6c56c3",
              "title": "Course High Level Overview",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "- How costs figure into the cloud story, and how to optimize your environment for the most cost effective solutions  \n\n- How to use AWS services to improve the performance of your infrastructure and applications  \n\n- How AWS Lambda can save you time and money for applications with varied demands and shorter \n\n- How your team can use Terraform in AWS to reduce error and effort\n\n\n**Good Luck in your next adventure in Cloud Architecture!**  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1011078,
          "key": "dc4ef30a-f616-4e6c-a3dd-68295a9fcb1c",
          "title": "Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc4ef30a-f616-4e6c-a3dd-68295a9fcb1c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1011047,
              "key": "14e97a75-11ca-4fbd-940a-45df7e9de192",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## New Terms in This Lesson  \n<br>  \n<br> \n\n\n\n\n| Term \t| Definition \t|\n|------|------------\t|\n| Arguments \t| An argument assigns a value to a particular name ex.- server_name = JR234. In this example, server_name is the argument name and JR234 is the argument value \t|\n| Automation \t| The use of software to create repeatable instructions and processes to replace or reduce human interaction with IT systems \t|\n| AWS CloudFormation \t| Allows for the use of code for the automation of complex infrastructure management in the AWS Cloud \t|\n| Blocks \t| Containers for other content and usually represent the configuration of some kind of object, like a resource \t|\n| Cloud Agnostic/Cloud Neutral \t| Software that is not tied to any particular provider and is portable between them \t|\n| Cloud Governance \t| The people, process, and technology associated with your cloud infrastructure, security, and operations. It involves a framework with a set of policies and standard practices \t|\n| Cloud Neutral \t| Software being deployed in the cloud does not use APIs that lock customers and IT service providers into a specific cloud provider \t|\n| Expressions \t| An expression in Terraform is anything that returns a value \t|\n| Go \t| An open source programming language that makes it easy to build simple, reliable, and efficient software \t|\n| HCL \t| Configuration language authored by HashiCorp and used with HashiCorp's cloud infrastructure automation tools, like Terraform \t|\n| Infrastructure as Code \t| The process of managing and provisioning computer resources through human and machine-readable definition files, rather than physical hardware configuration or interactive configuration tools like the AWS console \t|\n| Integrated Development Environment (IDE) \t| A software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of at least a source code editor, build automation tools and a debugger \t|\n| IT Audit \t| The examination and evaluation of an organization's information technology infrastructure, policies and operations \t|\n| Lifecycle Environment \t| Application life cycles are divided into life cycle environments, which represent each stage of the application life cycle- Development, QA, UAT, Staging, Production, etc \t|\n| Local Backend \t| Stores the terraform.tfstate file on your local disk \t|\n| Module \t| A set of Terraform configuration files in a folder \t|\n| Provider \t| Responsible for understanding API interactions and exposing resources. Providers generally are an IaaS (e.g. AWS, GCP, Microsoft Azure) \t|\n| Remote Backend \t| Allows you to store the terraform.tfstate file in a remote, shared storage location \t|\n| Resources \t| Describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records \t|\n| Root Module \t| The module in the current working directory \t|\n| Secrets \t| Sensitive data that needs to be kept private \t|\n| Standard Operating Procedure (SOP) \t| The documented processes that a company has in place to ensure services and/or products are delivered consistently every time \t|\n| Terraform State \t| Information about what infrastructure Terraform created \t|\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}